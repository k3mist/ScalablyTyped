package typings
package dynatableLib.JQueryDynatableNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait SortsHeaders extends js.Object {
  /**
    * Inject the arrow down inside the $link
    *
    * @param $link The jQuery object to be used
    */
  def appendArrowDown($link: dynatableLib.JQuery): scala.Unit
  /**
    * Inject the arrow up inside the $link
    *
    * @param $link The jQuery object to be used
    */
  def appendArrowUp($link: dynatableLib.JQuery): scala.Unit
  /** Go through each cell and call `attachOne` */
  def attach(): scala.Unit
  /**
    * If sorting is allowed for the provided cell, it injects the hml generated by `create`
    *
    * @param cell The cell Element to be parsed
    */
  def attachOne(cell: stdLib.Element): scala.Unit
  /**
    * Generate the html markup to be inserted inside the header of the sortable column
    *
    * @param cell An Element which point to the cell in the header row
    * @return A jQuery object containing the markup of the link
    */
  def create(cell: stdLib.Element): dynatableLib.JQuery
  /** Create and init the sorts */
  def init(): scala.Unit
  /**
    * Check if sort feature is enabled
    *
    * @return A boolean if sort feature is enabled
    */
  def initOnLoad(): scala.Boolean
  /** Remove all the sort headers from the table */
  def removeAll(): scala.Unit
  /** Remove all arrows Elements from the table */
  def removeAllArrows(): scala.Unit
  /**
    * Remove the arrow found inside the provided $link
    *
    * @param $link The jQuery object containing the `<a>` markup in the sortable headers
    */
  def removeArrow($link: dynatableLib.JQuery): scala.Unit
  /**
    * Remove the link generated by dynatable inside the sortable header
    * and restore its original html content
    *
    * @param cell The cell Element that will be parsed
    */
  def removeOne(cell: stdLib.Element): scala.Unit
  /**
    * @todo learn more about this method and document it
    *
    * @param $link The jQuery object to be used
    * @param column The Column object that will be used
    * @return A boolean which is true if supplied test function passes for ALL items in an array
    */
  def sortedByColumn($link: dynatableLib.JQuery, column: Column): scala.Boolean
  /**
    * Inspect the settings to determine the order to use
    *
    * @param column The Column object that will be used
    * @return A number (-1 or +1) describing the order to use (DESC or ASC)
    */
  def sortedByColumnValue(column: Column): scala.Double
  /**
    * Refresh the [multi] sorting of the dataset
    *
    * @param $e The event object (of the click on the table sortable header)
    * @param $link The header link
    * @param column The Column object to be sorted
    */
  def toggleSort(e: stdLib.Event, $link: dynatableLib.JQuery, column: Column): scala.Unit
}

object SortsHeaders {
  @scala.inline
  def apply(
    appendArrowDown: js.Function1[dynatableLib.JQuery, scala.Unit],
    appendArrowUp: js.Function1[dynatableLib.JQuery, scala.Unit],
    attach: js.Function0[scala.Unit],
    attachOne: js.Function1[stdLib.Element, scala.Unit],
    create: js.Function1[stdLib.Element, dynatableLib.JQuery],
    init: js.Function0[scala.Unit],
    initOnLoad: js.Function0[scala.Boolean],
    removeAll: js.Function0[scala.Unit],
    removeAllArrows: js.Function0[scala.Unit],
    removeArrow: js.Function1[dynatableLib.JQuery, scala.Unit],
    removeOne: js.Function1[stdLib.Element, scala.Unit],
    sortedByColumn: js.Function2[dynatableLib.JQuery, Column, scala.Boolean],
    sortedByColumnValue: js.Function1[Column, scala.Double],
    toggleSort: js.Function3[stdLib.Event, dynatableLib.JQuery, Column, scala.Unit]
  ): SortsHeaders = {
    val __obj = js.Dynamic.literal(appendArrowDown = appendArrowDown, appendArrowUp = appendArrowUp, attach = attach, attachOne = attachOne, create = create, init = init, initOnLoad = initOnLoad, removeAll = removeAll, removeAllArrows = removeAllArrows, removeArrow = removeArrow, removeOne = removeOne, sortedByColumn = sortedByColumn, sortedByColumnValue = sortedByColumnValue, toggleSort = toggleSort)
  
    __obj.asInstanceOf[SortsHeaders]
  }
}

