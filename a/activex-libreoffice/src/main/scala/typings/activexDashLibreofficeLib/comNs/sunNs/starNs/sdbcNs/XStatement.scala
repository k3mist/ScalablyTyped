package typings
package activexDashLibreofficeLib.comNs.sunNs.starNs.sdbcNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * is used for executing a static SQL statement and obtaining the results produced by it.
  *
  * Only one {@link ResultSet} per {@link Statement} can be open at any point in time; therefore, if the reading of one {@link ResultSet} is interleaved
  * with the reading of another, each must have been generated by different Statements. All statement `execute` methods implicitly close a statement's
  * current {@link ResultSet} if an open one exists.
  */
trait XStatement
  extends activexDashLibreofficeLib.comNs.sunNs.starNs.unoNs.XInterface {
  /**
    * returns the {@link com.sun.star.sdbc.Connection} object that produced this `Statement` object.
    * @returns the connection that produced this statement
    * @throws SQLException if a database access error occurs.
    */
  val Connection: XConnection
  /**
    * executes a SQL statement that may return multiple results.
    *
    * Under some (uncommon) situations a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you
    * are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The
    * navigation through multiple results is covered by {@link com.sun.star.sdbc.XMultipleResults} .
    *
    * The `execute` method executes a SQL statement and indicates the form of the first result. You can then use {@link
    * com.sun.star.sdbc.XMultipleResults.getResultSet()} or {@link com.sun.star.sdbc.XMultipleResults.getUpdateCount()} to retrieve the result, and {@link
    * com.sun.star.sdbc.XMultipleResults.getMoreResults()} to move to any subsequent result(s).
    * @param sql any SQL statement
    * @returns `TRUE` if the next result is a {@link ResultSet} ; `FALSE` if it is an update count or there are no more results
    * @throws SQLException if a database access error occurs.
    */
  def execute(sql: java.lang.String): scala.Boolean
  /**
    * executes a SQL statement that returns a single {@link ResultSet} .
    * @param sql the SQL statement which should be executed
    * @returns a {@link ResultSet} that contains the data produced by the query; never `NULL`
    * @throws SQLException if a database access error occurs.
    */
  def executeQuery(sql: java.lang.String): XResultSet
  /**
    * executes an SQL INSERT, UPDATE, or DELETE statement. In addition, SQL statements that return nothing, such as SQL DDL statements, can be executed.
    * @param sql a SQL INSERT, UPDATE or DELETE statement or a SQL statement that returns nothing
    * @returns either the row count for INSERT, UPDATE or DELETE or 0 for SQL statements that return nothing
    * @throws SQLException if a database access error occurs.
    */
  def executeUpdate(sql: java.lang.String): scala.Double
  /**
    * returns the {@link com.sun.star.sdbc.Connection} object that produced this `Statement` object.
    * @returns the connection that produced this statement
    * @throws SQLException if a database access error occurs.
    */
  def getConnection(): XConnection
}

object XStatement {
  @scala.inline
  def apply(
    Connection: XConnection,
    acquire: js.Function0[scala.Unit],
    execute: js.Function1[java.lang.String, scala.Boolean],
    executeQuery: js.Function1[java.lang.String, XResultSet],
    executeUpdate: js.Function1[java.lang.String, scala.Double],
    getConnection: js.Function0[XConnection],
    queryInterface: js.Function1[activexDashLibreofficeLib.`type`, js.Any],
    release: js.Function0[scala.Unit]
  ): XStatement = {
    val __obj = js.Dynamic.literal(Connection = Connection, acquire = acquire, execute = execute, executeQuery = executeQuery, executeUpdate = executeUpdate, getConnection = getConnection, queryInterface = queryInterface, release = release)
  
    __obj.asInstanceOf[XStatement]
  }
}

