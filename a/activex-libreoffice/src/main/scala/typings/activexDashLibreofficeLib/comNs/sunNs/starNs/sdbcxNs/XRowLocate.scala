package typings
package activexDashLibreofficeLib.comNs.sunNs.starNs.sdbcxNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * is used to identify rows within a result set and to find rows by a bookmark.
  *
  * Bookmarks are only valid in the scope of the current result set and are not interchangeable between result sets. A bookmark could be a complex data
  * structure, so it could not be compared in a safe way. Because of that, a provider has to implement the compare method for bookmarks.
  */
trait XRowLocate
  extends activexDashLibreofficeLib.comNs.sunNs.starNs.unoNs.XInterface {
  /**
    * returns the bookmark of the current row of a result set.
    * @returns the current bookmark
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  val Bookmark: js.Any
  /**
    * compares two bookmarks and returns an indication of their relative values.
    *
    * The bookmarks must apply to the same {@link ResultSet} . You cannot reliably compare bookmarks from different ResultSets, even if they were created
    * from the same source or statement. ;  A bookmark that is not valid, or incorrectly formed, will cause an exception.
    * @param first the first bookmark
    * @param second the second bookmark
    * @returns a value of {@link com.sun.star.sdbcx.CompareBookmark}
    * @see com.sun.star.sdbcx.CompareBookmark
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  def compareBookmarks(first: js.Any, second: js.Any): scala.Double
  /**
    * returns the bookmark of the current row of a result set.
    * @returns the current bookmark
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  def getBookmark(): js.Any
  /**
    * determines whether the bookmarks of a result set are ordered or not.
    * @returns `TRUE` if so
    * @see com.sun.star.sdbcx.CompareBookmark
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  def hasOrderedBookmarks(): scala.Boolean
  /**
    * returns the hash value for a specified bookmark.
    * @param bookmark the bookmark to hash
    * @returns the hashed value
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  def hashBookmark(bookmark: js.Any): scala.Double
  /**
    * moves the cursor a relative number of rows, either positive or negative starting at a given bookmark position.
    *
    * If the bookmark could not be located, a result set will be positioned after the last record. ;  If the bookmark is invalid, or not generated by the
    * current result set, then the behavior is not defined, even an abnormal termination is possible.
    * @param bookmark the bookmark where to move
    * @param rows count of rows move relative to the bookmark
    * @returns `TRUE` if successful
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  def moveRelativeToBookmark(bookmark: js.Any, rows: scala.Double): scala.Boolean
  /**
    * moves the cursor to the row identified by an valid bookmark.
    *
    * If the bookmark could not be located, a result set will be positioned after the last record. ;  If the bookmark is invalid, or not generated by the
    * current result set, then the behavior is not defined, even an abnormal termination is possible.
    * @param bookmark the bookmark where to move
    * @returns `TRUE` if successful
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  def moveToBookmark(bookmark: js.Any): scala.Boolean
}

object XRowLocate {
  @scala.inline
  def apply(
    Bookmark: js.Any,
    acquire: js.Function0[scala.Unit],
    compareBookmarks: js.Function2[js.Any, js.Any, scala.Double],
    getBookmark: js.Function0[js.Any],
    hasOrderedBookmarks: js.Function0[scala.Boolean],
    hashBookmark: js.Function1[js.Any, scala.Double],
    moveRelativeToBookmark: js.Function2[js.Any, scala.Double, scala.Boolean],
    moveToBookmark: js.Function1[js.Any, scala.Boolean],
    queryInterface: js.Function1[activexDashLibreofficeLib.`type`, js.Any],
    release: js.Function0[scala.Unit]
  ): XRowLocate = {
    val __obj = js.Dynamic.literal(Bookmark = Bookmark, acquire = acquire, compareBookmarks = compareBookmarks, getBookmark = getBookmark, hasOrderedBookmarks = hasOrderedBookmarks, hashBookmark = hashBookmark, moveRelativeToBookmark = moveRelativeToBookmark, moveToBookmark = moveToBookmark, queryInterface = queryInterface, release = release)
  
    __obj.asInstanceOf[XRowLocate]
  }
}

