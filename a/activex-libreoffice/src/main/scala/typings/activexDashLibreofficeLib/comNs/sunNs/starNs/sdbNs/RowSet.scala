package typings
package activexDashLibreofficeLib.comNs.sunNs.starNs.sdbNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * is a client side {@link RowSet} , which use retrieves is data based on a database table, a query or a SQL command or by a row set reader, who mustn't
  * support SQL. The connection of the row set is typically a named {@link DataSource} or a DataAccess component or a previous instantiated connection.
  *
  * Depending on the {@link com.sun.star.sdbc.ResultSetConcurrency} , the {@link RowSet} caches all data or uses an optimized way for retrieving the data,
  * such as, refetching rows by their keys or if provided, by their bookmarks.
  *
  * In addition, it provides events for {@link RowSet} navigation and {@link RowSet} modifications to approve the actions and to react on them.
  * @see com.sun.star.sdb.RowChangeAction
  * @see com.sun.star.sdb.RowChangeEvent
  * @see com.sun.star.sdb.RowsChangeEvent  **Notifications**  A row set is able to be operated in various ways, and additionally it notifies various chang
  */
/* import warning: RemoveMultipleInheritance.findNewParents newComments Dropped parents 
- activexDashLibreofficeLib.comNs.sunNs.starNs.sdbcNs.RowSet because var conflicts: CursorName, FetchDirection, FetchSize, ResultSetConcurrency, ResultSetType. Inlined Command, DataSourceName, EscapeProcessing, MaxFieldSize, MaxRows, Password, QueryTimeOut, TransactionIsolation, TypeMap, URL, User */ trait RowSet
  extends ResultSet
     with XCompletedExecution
     with XRowSetApproveBroadcaster
     with XResultSetAccess
     with XParametersSupplier {
  /**
    * is the command which is currently used.
    * @see com.sun.star.sdb.CommandType
    */
  var ActiveCommand: java.lang.String
  /**
    * is the connection generated by a {@link DataSource} or by a URL. It could also be set from outside. When set from outside the {@link RowSet} is not
    * responsible for the closing of the connection.
    */
  var ActiveConnection: activexDashLibreofficeLib.comNs.sunNs.starNs.sdbcNs.XConnection
  /** indicates whether the filter should be applied or not, default is `FALSE` . */
  var ApplyFilter: scala.Boolean
  /**
    * is the command which should be executed, the type of command depends on the {@link CommandType} .
    *
    * In case of a {@link CommandType} of {@link CommandType.COMMAND} , means in case the {@link Command} specifies an SQL statement, the inherited {@link
    * com.sun.star.sdbc.RowSet.EscapeProcessing} becomes relevant: ;  It then can be to used to specify whether the SQL statement should be analyzed on the
    * client side before sending it to the database server. ;  The default value for {@link com.sun.star.sdbc.RowSet.EscapeProcessing} is `TRUE` . By
    * switching it to `FALSE` , you can pass backend-specific SQL statements, which are not standard SQL, to your database.
    * @see com.sun.star.sdb.CommandType
    * @see com.sun.star.sdbc.RowSet.EscapeProcessing
    */
  var Command: java.lang.String
  /**
    * is the type of the command.
    * @see com.sun.star.sdb.CommandType
    */
  var CommandType: scala.Double
  /** is the name of the datasource to use, this could be a named datasource or the URL of a data access component. */
  var DataSourceName: java.lang.String
  /**
    * returns if escape processing is on or off. If escape scanning is on (the default), the driver will do escape substitution before sending the SQL to
    * the database. This is only evaluated, if the CommandType is COMMAND.
    */
  var EscapeProcessing: scala.Boolean
  /** additional filter for a row set. */
  var Filter: java.lang.String
  /** additional group by for the row set */
  var GroupBy: java.lang.String
  /** additional having clause for the row set */
  var HavingClause: java.lang.String
  /** indicates whether all results should be discarded or not. */
  var IgnoreResult: scala.Boolean
  /** indicates that the current row is modified. */
  var IsModified: scala.Boolean
  /** indicates that the current row is going to be inserted to the database. */
  var IsNew: scala.Boolean
  /** indicates that all rows of the row set have been counted. */
  var IsRowCountFinal: scala.Boolean
  /**
    * returns the maximum number of bytes allowed for any column value.
    *
    * This limit is the maximum number of bytes that can be returned for any column value. The limit applies only to {@link
    * com.sun.star.sdbc.DataType.BINARY} , {@link com.sun.star.sdbc.DataType.VARBINARY} , {@link com.sun.star.sdbc.DataType.LONGVARBINARY} , {@link
    * com.sun.star.sdbc.DataType.CHAR} , {@link com.sun.star.sdbc.DataType.VARCHAR} , and {@link com.sun.star.sdbc.DataType.LONGVARCHAR} columns. If the
    * limit is exceeded, the excess data is silently discarded. ;  There is no limitation, if set to zero.
    */
  var MaxFieldSize: scala.Double
  /**
    * retrieves the maximum number of rows that a {@link ResultSet} can contain. If the limit is exceeded, the excess rows are silently dropped. ;  There is
    * no limitation, if set to zero.
    */
  var MaxRows: scala.Double
  /** is a additional sort order definition for a row set. */
  var Order: java.lang.String
  /** determines the user for whom to open the connection. */
  var Password: java.lang.String
  /**
    * indicates the privileges for insert, update, and delete.
    * @see com.sun.star.sdbcx.Privilege
    */
  var Privileges: scala.Double
  /**
    * retrieves the number of seconds the driver will wait for a {@link Statement} to execute. If the limit is exceeded, a {@link
    * com.sun.star.sdbc.SQLException} is thrown. There is no limitation, if set to zero.
    */
  var QueryTimeOut: scala.Double
  /** contains the number of rows accessed in a the data source. */
  var RowCount: scala.Double
  /**
    * indicates the transaction isolation level, which should be used for the connection.
    * @see com.sun.star.sdbc.TransactionIsolation
    */
  var TransactionIsolation: scala.Double
  /** is the type map that will be used for the custom mapping of SQL structured types and distinct types. */
  var TypeMap: activexDashLibreofficeLib.comNs.sunNs.starNs.containerNs.XNameAccess
  /** is the connection URL. Could be used instead of the DataSourceName. */
  var URL: java.lang.String
  /** is the name of the table catalog */
  var UpdateCatalogName: java.lang.String
  /** is the name of the table schema. */
  var UpdateSchemaName: java.lang.String
  /** is the name of the table which should be updated, this is usually used for queries which relate to more than one table. */
  var UpdateTableName: java.lang.String
  /** determines the user for whom to open the connection. */
  var User: java.lang.String
}

object RowSet {
  @scala.inline
  def apply(
    ActiveCommand: java.lang.String,
    ActiveConnection: activexDashLibreofficeLib.comNs.sunNs.starNs.sdbcNs.XConnection,
    ApplyFilter: scala.Boolean,
    Command: java.lang.String,
    CommandType: scala.Double,
    DataSourceName: java.lang.String,
    Filter: java.lang.String,
    GroupBy: java.lang.String,
    HavingClause: java.lang.String,
    IgnoreResult: scala.Boolean,
    IsModified: scala.Boolean,
    IsNew: scala.Boolean,
    IsRowCountFinal: scala.Boolean,
    Order: java.lang.String,
    Privileges: scala.Double,
    RowCount: scala.Double,
    RowSet: activexDashLibreofficeLib.comNs.sunNs.starNs.sdbcNs.RowSet = null,
    UpdateCatalogName: java.lang.String,
    UpdateSchemaName: java.lang.String,
    UpdateTableName: java.lang.String,
    XCompletedExecution: XCompletedExecution = null,
    XParametersSupplier: XParametersSupplier = null,
    XResultSetAccess: XResultSetAccess = null,
    XRowSetApproveBroadcaster: XRowSetApproveBroadcaster = null,
    ResultSet: ResultSet = null
  ): RowSet = {
    val __obj = js.Dynamic.literal(ActiveCommand = ActiveCommand, ActiveConnection = ActiveConnection, ApplyFilter = ApplyFilter, Command = Command, CommandType = CommandType, DataSourceName = DataSourceName, Filter = Filter, GroupBy = GroupBy, HavingClause = HavingClause, IgnoreResult = IgnoreResult, IsModified = IsModified, IsNew = IsNew, IsRowCountFinal = IsRowCountFinal, Order = Order, Privileges = Privileges, RowCount = RowCount, UpdateCatalogName = UpdateCatalogName, UpdateSchemaName = UpdateSchemaName, UpdateTableName = UpdateTableName)
    if (__obj != null) js.Dynamic.global.Object.assign(__obj, RowSet)
    if (__obj != null) js.Dynamic.global.Object.assign(__obj, XCompletedExecution)
    if (__obj != null) js.Dynamic.global.Object.assign(__obj, XParametersSupplier)
    if (__obj != null) js.Dynamic.global.Object.assign(__obj, XResultSetAccess)
    if (__obj != null) js.Dynamic.global.Object.assign(__obj, XRowSetApproveBroadcaster)
    js.Dynamic.global.Object.assign(__obj, ResultSet)
    __obj.asInstanceOf[RowSet]
  }
}

