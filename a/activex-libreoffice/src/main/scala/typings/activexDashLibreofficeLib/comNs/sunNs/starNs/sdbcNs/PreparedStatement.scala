package typings
package activexDashLibreofficeLib.comNs.sunNs.starNs.sdbcNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * represents a precompiled SQL statement.
  *
  * A SQL statement is pre-compiled and stored in a {@link PreparedStatement} object. This object can then be used to efficiently execute this statement
  * multiple times.
  *
  * ** Note: ** The `setXXX` methods for setting IN parameter values must specify types that are compatible with the defined SQL type of the input
  * parameter. For instance, if the IN parameter has SQL type Integer, then the method {@link com.sun.star.sdbc.XParameters.setInt()} should be used.
  *
  * If arbitrary parameter type conversions are required, the method {@link com.sun.star.sdbc.XParameters.setObject()} should be used with a target SQL
  * type.
  *
  * Example of setting a parameter; `con` is an active connection. {{program example here, see documentation}}
  *
  *
  *
  * Only one {@link com.sun.star.sdbc.ResultSet} per {@link com.sun.star.sdbc.Statement} can be open at any point in time. Therefore, if the reading of
  * one {@link ResultSet} is interleaved with the reading of another, each must have been generated by different Statements. All statement `execute`
  * methods implicitly close a statement's current {@link ResultSet} if an open one exists.
  */
trait PreparedStatement
  extends activexDashLibreofficeLib.comNs.sunNs.starNs.langNs.XComponent
     with XCloseable
     with activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertySet
     with activexDashLibreofficeLib.comNs.sunNs.starNs.utilNs.XCancellable
     with XPreparedStatement
     with XResultSetMetaDataSupplier
     with XParameters
     with XPreparedBatchExecution
     with XWarningsSupplier
     with XMultipleResults {
  /**
    * defines the SQL cursor name that will be used by subsequent {@link Statement}`execute` methods.
    *
    * This name can then be used in SQL positioned update/delete statements to identify the current row in the {@link ResultSet} generated by this
    * statement. If the database does not support positioned update/delete, this property is a noop. To insure that a cursor has the proper isolation level
    * to support updates, the cursor's SELECT statement should be of the form "select for update ...". If the "for update" phrase is omitted, positioned
    * updates may fail.
    *
    * ** Note: ** By definition, positioned update/delete execution must be done by a different {@link Statement} than the one which generated the {@link
    * ResultSet} being used for positioning. Also, cursor names must be unique within a connection.
    */
  var CursorName: java.lang.String
  /**
    * retrieves the direction for fetching rows from database tables that is the default for result sets generated from this `Statement` object.
    *
    * If this `Statement` object has not set a fetch direction, the return value is implementation-specific.
    */
  var FetchDirection: scala.Double
  /**
    * retrieves the number of result set rows that is the default fetch size for result sets generated from this `Statement` object.
    *
    * If this `Statement` object has not set a fetch size, the return value is implementation-specific.
    */
  var FetchSize: scala.Double
  /**
    * returns the maximum number of bytes allowed for any column value.
    *
    * This limit is the maximum number of bytes that can be returned for any column value. The limit applies only to {@link
    * com.sun.star.sdbc.DataType.BINARY} , {@link com.sun.star.sdbc.DataType.VARBINARY} , {@link com.sun.star.sdbc.DataType.LONGVARBINARY} , {@link
    * com.sun.star.sdbc.DataType.CHAR} , {@link com.sun.star.sdbc.DataType.VARCHAR} , and {@link com.sun.star.sdbc.DataType.LONGVARCHAR} columns. If the
    * limit is exceeded, the excess data is silently discarded.
    *
    * There is no limitation, if set to zero.
    */
  var MaxFieldSize: scala.Double
  /**
    * retrieves the maximum number of rows that a {@link ResultSet} can contain. If the limit is exceeded, the excess rows are silently dropped. ;  There is
    * no limitation, if set to zero.
    */
  var MaxRows: scala.Double
  /**
    * retrieves the number of seconds the driver will wait for a {@link Statement} to execute. If the limit is exceeded, a {@link SQLException} is thrown.
    * There is no limitation, if set to zero.
    */
  var QueryTimeOut: scala.Double
  /**
    * retrieves the result set concurrency.
    * @see com.sun.star.sdbc.ResultSetConcurrency
    */
  var ResultSetConcurrency: scala.Double
  /**
    * Determine the result set type.
    * @see com.sun.star.sdbc.ResultSetType
    */
  var ResultSetType: scala.Double
}

object PreparedStatement {
  @scala.inline
  def apply(
    Connection: XConnection,
    CursorName: java.lang.String,
    FetchDirection: scala.Double,
    FetchSize: scala.Double,
    MaxFieldSize: scala.Double,
    MaxRows: scala.Double,
    MetaData: XResultSetMetaData,
    MoreResults: scala.Boolean,
    PropertySetInfo: activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertySetInfo,
    QueryTimeOut: scala.Double,
    ResultSet: XResultSet,
    ResultSetConcurrency: scala.Double,
    ResultSetType: scala.Double,
    UpdateCount: scala.Double,
    Warnings: js.Any,
    acquire: js.Function0[scala.Unit],
    addBatch: js.Function0[scala.Unit],
    addEventListener: js.Function1[activexDashLibreofficeLib.comNs.sunNs.starNs.langNs.XEventListener, scala.Unit],
    addPropertyChangeListener: js.Function2[
      java.lang.String, 
      activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertyChangeListener, 
      scala.Unit
    ],
    addVetoableChangeListener: js.Function2[
      java.lang.String, 
      activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XVetoableChangeListener, 
      scala.Unit
    ],
    cancel: js.Function0[scala.Unit],
    clearBatch: js.Function0[scala.Unit],
    clearParameters: js.Function0[scala.Unit],
    clearWarnings: js.Function0[scala.Unit],
    close: js.Function0[scala.Unit],
    dispose: js.Function0[scala.Unit],
    execute: js.Function0[scala.Boolean],
    executeBatch: js.Function0[activexDashInteropLib.SafeArray[scala.Double]],
    executeQuery: js.Function0[XResultSet],
    executeUpdate: js.Function0[scala.Double],
    getConnection: js.Function0[XConnection],
    getMetaData: js.Function0[XResultSetMetaData],
    getMoreResults: js.Function0[scala.Boolean],
    getPropertySetInfo: js.Function0[activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertySetInfo],
    getPropertyValue: js.Function1[java.lang.String, js.Any],
    getResultSet: js.Function0[XResultSet],
    getUpdateCount: js.Function0[scala.Double],
    getWarnings: js.Function0[js.Any],
    queryInterface: js.Function1[activexDashLibreofficeLib.`type`, js.Any],
    release: js.Function0[scala.Unit],
    removeEventListener: js.Function1[activexDashLibreofficeLib.comNs.sunNs.starNs.langNs.XEventListener, scala.Unit],
    removePropertyChangeListener: js.Function2[
      java.lang.String, 
      activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XPropertyChangeListener, 
      scala.Unit
    ],
    removeVetoableChangeListener: js.Function2[
      java.lang.String, 
      activexDashLibreofficeLib.comNs.sunNs.starNs.beansNs.XVetoableChangeListener, 
      scala.Unit
    ],
    setArray: js.Function2[scala.Double, XArray, scala.Unit],
    setBinaryStream: js.Function3[
      scala.Double, 
      activexDashLibreofficeLib.comNs.sunNs.starNs.ioNs.XInputStream, 
      scala.Double, 
      scala.Unit
    ],
    setBlob: js.Function2[scala.Double, XBlob, scala.Unit],
    setBoolean: js.Function2[scala.Double, scala.Boolean, scala.Unit],
    setByte: js.Function2[scala.Double, scala.Double, scala.Unit],
    setBytes: js.Function2[
      scala.Double, 
      activexDashLibreofficeLib.LibreOfficeNs.SeqEquiv[scala.Double], 
      scala.Unit
    ],
    setCharacterStream: js.Function3[
      scala.Double, 
      activexDashLibreofficeLib.comNs.sunNs.starNs.ioNs.XInputStream, 
      scala.Double, 
      scala.Unit
    ],
    setClob: js.Function2[scala.Double, XClob, scala.Unit],
    setDate: js.Function2[scala.Double, activexDashLibreofficeLib.comNs.sunNs.starNs.utilNs.Date, scala.Unit],
    setDouble: js.Function2[scala.Double, scala.Double, scala.Unit],
    setFloat: js.Function2[scala.Double, scala.Double, scala.Unit],
    setInt: js.Function2[scala.Double, scala.Double, scala.Unit],
    setLong: js.Function2[scala.Double, scala.Double, scala.Unit],
    setNull: js.Function2[scala.Double, scala.Double, scala.Unit],
    setObject: js.Function2[scala.Double, js.Any, scala.Unit],
    setObjectNull: js.Function3[scala.Double, scala.Double, java.lang.String, scala.Unit],
    setObjectWithInfo: js.Function4[scala.Double, js.Any, scala.Double, scala.Double, scala.Unit],
    setPropertyValue: js.Function2[java.lang.String, js.Any, scala.Unit],
    setRef: js.Function2[scala.Double, XRef, scala.Unit],
    setShort: js.Function2[scala.Double, scala.Double, scala.Unit],
    setString: js.Function2[scala.Double, java.lang.String, scala.Unit],
    setTime: js.Function2[scala.Double, activexDashLibreofficeLib.comNs.sunNs.starNs.utilNs.Time, scala.Unit],
    setTimestamp: js.Function2[
      scala.Double, 
      activexDashLibreofficeLib.comNs.sunNs.starNs.utilNs.DateTime, 
      scala.Unit
    ]
  ): PreparedStatement = {
    val __obj = js.Dynamic.literal(Connection = Connection, CursorName = CursorName, FetchDirection = FetchDirection, FetchSize = FetchSize, MaxFieldSize = MaxFieldSize, MaxRows = MaxRows, MetaData = MetaData, MoreResults = MoreResults, PropertySetInfo = PropertySetInfo, QueryTimeOut = QueryTimeOut, ResultSet = ResultSet, ResultSetConcurrency = ResultSetConcurrency, ResultSetType = ResultSetType, UpdateCount = UpdateCount, Warnings = Warnings, acquire = acquire, addBatch = addBatch, addEventListener = addEventListener, addPropertyChangeListener = addPropertyChangeListener, addVetoableChangeListener = addVetoableChangeListener, cancel = cancel, clearBatch = clearBatch, clearParameters = clearParameters, clearWarnings = clearWarnings, close = close, dispose = dispose, execute = execute, executeBatch = executeBatch, executeQuery = executeQuery, executeUpdate = executeUpdate, getConnection = getConnection, getMetaData = getMetaData, getMoreResults = getMoreResults, getPropertySetInfo = getPropertySetInfo, getPropertyValue = getPropertyValue, getResultSet = getResultSet, getUpdateCount = getUpdateCount, getWarnings = getWarnings, queryInterface = queryInterface, release = release, removeEventListener = removeEventListener, removePropertyChangeListener = removePropertyChangeListener, removeVetoableChangeListener = removeVetoableChangeListener, setArray = setArray, setBinaryStream = setBinaryStream, setBlob = setBlob, setBoolean = setBoolean, setByte = setByte, setBytes = setBytes, setCharacterStream = setCharacterStream, setClob = setClob, setDate = setDate, setDouble = setDouble, setFloat = setFloat, setInt = setInt, setLong = setLong, setNull = setNull, setObject = setObject, setObjectNull = setObjectNull, setObjectWithInfo = setObjectWithInfo, setPropertyValue = setPropertyValue, setRef = setRef, setShort = setShort, setString = setString, setTime = setTime, setTimestamp = setTimestamp)
  
    __obj.asInstanceOf[PreparedStatement]
  }
}

