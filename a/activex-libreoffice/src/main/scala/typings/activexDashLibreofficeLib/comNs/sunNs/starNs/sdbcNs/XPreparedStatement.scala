package typings
package activexDashLibreofficeLib.comNs.sunNs.starNs.sdbcNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * provides the possibility of executing a precompiled SQL statement.
  *
  * A SQL statement is pre-compiled and stored in a {@link PreparedStatement} object. This object can then be used to efficiently execute this statement
  * multiple times.
  */
trait XPreparedStatement
  extends activexDashLibreofficeLib.comNs.sunNs.starNs.unoNs.XInterface {
  /**
    * returns the {@link com.sun.star.sdbc.Connection} object that produced this {@link com.sun.star.sdbc.Statement} object.
    * @returns the {@link Connection} object
    * @throws SQLException if a database access error occurs.
    */
  val Connection: XConnection
  /**
    * executes any kind of SQL statement.
    *
    * Some prepared statements return multiple results; the execute method handles these complex statements as well as the simpler form of statements
    * handled by executeQuery and executeUpdate.
    * @returns `TRUE` if successful
    * @throws SQLException if a database access error occurs.
    */
  def execute(): scala.Boolean
  /**
    * executes the SQL query in this `PreparedStatement` object and returns the result set generated by the query.
    * @returns the {@link ResultSet} object
    * @throws SQLException if a database access error occurs.
    */
  def executeQuery(): XResultSet
  /**
    * executes the SQL INSERT, UPDATE or DELETE statement in this {@link com.sun.star.sdbc.PreparedStatement} object. ;  In addition, SQL statements that
    * return nothing, such as SQL DDL statements, can be executed.
    * @returns either the row count for INSERT, UPDATE or DELETE statements; or 0 for SQL statements that return nothing
    * @throws SQLException if a database access error occurs.
    */
  def executeUpdate(): scala.Double
  /**
    * returns the {@link com.sun.star.sdbc.Connection} object that produced this {@link com.sun.star.sdbc.Statement} object.
    * @returns the {@link Connection} object
    * @throws SQLException if a database access error occurs.
    */
  def getConnection(): XConnection
}

object XPreparedStatement {
  @scala.inline
  def apply(
    Connection: XConnection,
    acquire: js.Function0[scala.Unit],
    execute: js.Function0[scala.Boolean],
    executeQuery: js.Function0[XResultSet],
    executeUpdate: js.Function0[scala.Double],
    getConnection: js.Function0[XConnection],
    queryInterface: js.Function1[activexDashLibreofficeLib.`type`, js.Any],
    release: js.Function0[scala.Unit]
  ): XPreparedStatement = {
    val __obj = js.Dynamic.literal(Connection = Connection, acquire = acquire, execute = execute, executeQuery = executeQuery, executeUpdate = executeUpdate, getConnection = getConnection, queryInterface = queryInterface, release = release)
  
    __obj.asInstanceOf[XPreparedStatement]
  }
}

