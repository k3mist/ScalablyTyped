package typings
package awsDashSdkLib.clientsEc2Mod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@JSImport("aws-sdk/clients/ec2", "EC2")
@js.native
object EC2Ns extends js.Object {
  trait AcceptReservedInstancesExchangeQuoteRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The IDs of the Convertible Reserved Instances to exchange for another Convertible Reserved Instance of the same or higher value.
      */
    var ReservedInstanceIds: ReservedInstanceIdSet
    /**
      * The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
      */
    var TargetConfigurations: js.UndefOr[TargetConfigurationRequestSet] = js.undefined
  }
  
  trait AcceptReservedInstancesExchangeQuoteResult extends js.Object {
    /**
      * The ID of the successful exchange.
      */
    var ExchangeId: js.UndefOr[String] = js.undefined
  }
  
  trait AcceptTransitGatewayVpcAttachmentRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: String
  }
  
  trait AcceptTransitGatewayVpcAttachmentResult extends js.Object {
    /**
      * The VPC attachment.
      */
    var TransitGatewayVpcAttachment: js.UndefOr[TransitGatewayVpcAttachment] = js.undefined
  }
  
  trait AcceptVpcEndpointConnectionsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the endpoint service.
      */
    var ServiceId: String
    /**
      * The IDs of one or more interface VPC endpoints.
      */
    var VpcEndpointIds: ValueStringList
  }
  
  trait AcceptVpcEndpointConnectionsResult extends js.Object {
    /**
      * Information about the interface endpoints that were not accepted, if applicable.
      */
    var Unsuccessful: js.UndefOr[UnsuccessfulItemSet] = js.undefined
  }
  
  trait AcceptVpcPeeringConnectionRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC peering connection. You must specify this parameter in the request.
      */
    var VpcPeeringConnectionId: js.UndefOr[String] = js.undefined
  }
  
  trait AcceptVpcPeeringConnectionResult extends js.Object {
    /**
      * Information about the VPC peering connection.
      */
    var VpcPeeringConnection: js.UndefOr[VpcPeeringConnection] = js.undefined
  }
  
  trait AccountAttribute extends js.Object {
    /**
      * The name of the account attribute.
      */
    var AttributeName: js.UndefOr[String] = js.undefined
    /**
      * One or more values for the account attribute.
      */
    var AttributeValues: js.UndefOr[AccountAttributeValueList] = js.undefined
  }
  
  trait AccountAttributeValue extends js.Object {
    /**
      * The value of the attribute.
      */
    var AttributeValue: js.UndefOr[String] = js.undefined
  }
  
  trait ActiveInstance extends js.Object {
    /**
      * The health status of the instance. If the status of either the instance status check or the system status check is impaired, the health status of the instance is unhealthy. Otherwise, the health status is healthy.
      */
    var InstanceHealth: js.UndefOr[InstanceHealthStatus] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Spot Instance request.
      */
    var SpotInstanceRequestId: js.UndefOr[String] = js.undefined
  }
  
  trait Address extends js.Object {
    /**
      * The ID representing the allocation of the address for use with EC2-VPC.
      */
    var AllocationId: js.UndefOr[String] = js.undefined
    /**
      * The ID representing the association of the address with an instance in a VPC.
      */
    var AssociationId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether this Elastic IP address is for use with instances in EC2-Classic (standard) or instances in a VPC (vpc).
      */
    var Domain: js.UndefOr[DomainType] = js.undefined
    /**
      * The ID of the instance that the address is associated with (if any).
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the AWS account that owns the network interface.
      */
    var NetworkInterfaceOwnerId: js.UndefOr[String] = js.undefined
    /**
      * The private IP address associated with the Elastic IP address.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
    /**
      * The Elastic IP address.
      */
    var PublicIp: js.UndefOr[String] = js.undefined
    /**
      * The ID of an address pool.
      */
    var PublicIpv4Pool: js.UndefOr[String] = js.undefined
    /**
      * Any tags assigned to the Elastic IP address.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
  }
  
  trait AdvertiseByoipCidrRequest extends js.Object {
    /**
      * The IPv4 address range, in CIDR notation. This must be the exact range that you provisioned. You can't advertise only a portion of the provisioned range.
      */
    var Cidr: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait AdvertiseByoipCidrResult extends js.Object {
    /**
      * Information about the address range.
      */
    var ByoipCidr: js.UndefOr[ByoipCidr] = js.undefined
  }
  
  trait AllocateAddressRequest extends js.Object {
    /**
      * [EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address pool.
      */
    var Address: js.UndefOr[String] = js.undefined
    /**
      * Set to vpc to allocate the address for use with instances in a VPC. Default: The address is for use with instances in EC2-Classic.
      */
    var Domain: js.UndefOr[DomainType] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool. To specify a specific address from the address pool, use the Address parameter instead.
      */
    var PublicIpv4Pool: js.UndefOr[String] = js.undefined
  }
  
  trait AllocateAddressResult extends js.Object {
    /**
      * [EC2-VPC] The ID that AWS assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.
      */
    var AllocationId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether this Elastic IP address is for use with instances in EC2-Classic (standard) or instances in a VPC (vpc).
      */
    var Domain: js.UndefOr[DomainType] = js.undefined
    /**
      * The Elastic IP address.
      */
    var PublicIp: js.UndefOr[String] = js.undefined
    /**
      * The ID of an address pool.
      */
    var PublicIpv4Pool: js.UndefOr[String] = js.undefined
  }
  
  trait AllocateHostsRequest extends js.Object {
    /**
      * This is enabled by default. This property allows instances to be automatically placed onto available Dedicated Hosts, when you are launching instances without specifying a host ID. Default: Enabled
      */
    var AutoPlacement: js.UndefOr[AutoPlacement] = js.undefined
    /**
      * The Availability Zone for the Dedicated Hosts.
      */
    var AvailabilityZone: String
    /**
      * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide. 
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Specify the instance type for which to configure your Dedicated Hosts. When you specify the instance type, that is the only instance type that you can launch onto that host.
      */
    var InstanceType: String
    /**
      * The number of Dedicated Hosts to allocate to your account with these parameters.
      */
    var Quantity: Integer
    /**
      * The tags to apply to the Dedicated Host during creation.
      */
    var TagSpecifications: js.UndefOr[TagSpecificationList] = js.undefined
  }
  
  trait AllocateHostsResult extends js.Object {
    /**
      * The ID of the allocated Dedicated Host. This is used to launch an instance onto a specific host.
      */
    var HostIds: js.UndefOr[ResponseHostIdList] = js.undefined
  }
  
  trait AllowedPrincipal extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the principal.
      */
    var Principal: js.UndefOr[String] = js.undefined
    /**
      * The type of principal.
      */
    var PrincipalType: js.UndefOr[PrincipalType] = js.undefined
  }
  
  trait ApplySecurityGroupsToClientVpnTargetNetworkRequest extends js.Object {
    /**
      * The ID of the Client VPN endpoint.
      */
    var ClientVpnEndpointId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The IDs of the security groups to apply to the associated target network. Up to 5 security groups can be applied to an associated target network.
      */
    var SecurityGroupIds: ClientVpnSecurityGroupIdSet
    /**
      * The ID of the VPC in which the associated target network is located.
      */
    var VpcId: String
  }
  
  trait ApplySecurityGroupsToClientVpnTargetNetworkResult extends js.Object {
    /**
      * The IDs of the applied security groups.
      */
    var SecurityGroupIds: js.UndefOr[ClientVpnSecurityGroupIdSet] = js.undefined
  }
  
  trait AssignIpv6AddressesRequest extends js.Object {
    /**
      * The number of IPv6 addresses to assign to the network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
      */
    var Ipv6AddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * One or more specific IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses.
      */
    var Ipv6Addresses: js.UndefOr[Ipv6AddressList] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: String
  }
  
  trait AssignIpv6AddressesResult extends js.Object {
    /**
      * The IPv6 addresses assigned to the network interface.
      */
    var AssignedIpv6Addresses: js.UndefOr[Ipv6AddressList] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
  }
  
  trait AssignPrivateIpAddressesRequest extends js.Object {
    /**
      * Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.
      */
    var AllowReassignment: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: String
    /**
      * One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses. If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.
      */
    var PrivateIpAddresses: js.UndefOr[PrivateIpAddressStringList] = js.undefined
    /**
      * The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.
      */
    var SecondaryPrivateIpAddressCount: js.UndefOr[Integer] = js.undefined
  }
  
  trait AssociateAddressRequest extends js.Object {
    /**
      * [EC2-VPC] The allocation ID. This is required for EC2-VPC.
      */
    var AllocationId: js.UndefOr[String] = js.undefined
    /**
      * [EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.
      */
    var AllowReassociation: js.UndefOr[Boolean] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. The operation fails if you specify an instance ID unless exactly one network interface is attached.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * [EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * [EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
    /**
      * The Elastic IP address. This is required for EC2-Classic.
      */
    var PublicIp: js.UndefOr[String] = js.undefined
  }
  
  trait AssociateAddressResult extends js.Object {
    /**
      * [EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.
      */
    var AssociationId: js.UndefOr[String] = js.undefined
  }
  
  trait AssociateClientVpnTargetNetworkRequest extends js.Object {
    /**
      * The ID of the Client VPN endpoint.
      */
    var ClientVpnEndpointId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the subnet to associate with the Client VPN endpoint.
      */
    var SubnetId: String
  }
  
  trait AssociateClientVpnTargetNetworkResult extends js.Object {
    /**
      * The unique ID of the target network association.
      */
    var AssociationId: js.UndefOr[String] = js.undefined
    /**
      * The current state of the target network association.
      */
    var Status: js.UndefOr[AssociationStatus] = js.undefined
  }
  
  trait AssociateDhcpOptionsRequest extends js.Object {
    /**
      * The ID of the DHCP options set, or default to associate no DHCP options with the VPC.
      */
    var DhcpOptionsId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait AssociateIamInstanceProfileRequest extends js.Object {
    /**
      * The IAM instance profile.
      */
    var IamInstanceProfile: IamInstanceProfileSpecification
    /**
      * The ID of the instance.
      */
    var InstanceId: String
  }
  
  trait AssociateIamInstanceProfileResult extends js.Object {
    /**
      * Information about the IAM instance profile association.
      */
    var IamInstanceProfileAssociation: js.UndefOr[IamInstanceProfileAssociation] = js.undefined
  }
  
  trait AssociateRouteTableRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the route table.
      */
    var RouteTableId: String
    /**
      * The ID of the subnet.
      */
    var SubnetId: String
  }
  
  trait AssociateRouteTableResult extends js.Object {
    /**
      * The route table association ID. This ID is required for disassociating the route table.
      */
    var AssociationId: js.UndefOr[String] = js.undefined
  }
  
  trait AssociateSubnetCidrBlockRequest extends js.Object {
    /**
      * The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix length.
      */
    var Ipv6CidrBlock: String
    /**
      * The ID of your subnet.
      */
    var SubnetId: String
  }
  
  trait AssociateSubnetCidrBlockResult extends js.Object {
    /**
      * Information about the IPv6 CIDR block association.
      */
    var Ipv6CidrBlockAssociation: js.UndefOr[SubnetIpv6CidrBlockAssociation] = js.undefined
    /**
      * The ID of the subnet.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
  }
  
  trait AssociateTransitGatewayRouteTableRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: String
    /**
      * The ID of the transit gateway route table.
      */
    var TransitGatewayRouteTableId: String
  }
  
  trait AssociateTransitGatewayRouteTableResult extends js.Object {
    /**
      * The ID of the association.
      */
    var Association: js.UndefOr[TransitGatewayAssociation] = js.undefined
  }
  
  trait AssociateVpcCidrBlockRequest extends js.Object {
    /**
      * Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.
      */
    var AmazonProvidedIpv6CidrBlock: js.UndefOr[Boolean] = js.undefined
    /**
      * An IPv4 CIDR block to associate with the VPC.
      */
    var CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait AssociateVpcCidrBlockResult extends js.Object {
    /**
      * Information about the IPv4 CIDR block association.
      */
    var CidrBlockAssociation: js.UndefOr[VpcCidrBlockAssociation] = js.undefined
    /**
      * Information about the IPv6 CIDR block association.
      */
    var Ipv6CidrBlockAssociation: js.UndefOr[VpcIpv6CidrBlockAssociation] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait AssociatedTargetNetwork extends js.Object {
    /**
      *  The ID of the subnet. 
      */
    var NetworkId: js.UndefOr[String] = js.undefined
    /**
      *  The target network type. 
      */
    var NetworkType: js.UndefOr[AssociatedNetworkType] = js.undefined
  }
  
  trait AssociationStatus extends js.Object {
    /**
      * The state of the target network association.
      */
    var Code: js.UndefOr[AssociationStatusCode] = js.undefined
    /**
      * A message about the status of the target network association, if applicable.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait AttachClassicLinkVpcRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC.
      */
    var Groups: GroupIdStringList
    /**
      * The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.
      */
    var InstanceId: String
    /**
      * The ID of a ClassicLink-enabled VPC.
      */
    var VpcId: String
  }
  
  trait AttachClassicLinkVpcResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait AttachInternetGatewayRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the internet gateway.
      */
    var InternetGatewayId: String
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait AttachNetworkInterfaceRequest extends js.Object {
    /**
      * The index of the device for the network interface attachment.
      */
    var DeviceIndex: Integer
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: String
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: String
  }
  
  trait AttachNetworkInterfaceResult extends js.Object {
    /**
      * The ID of the network interface attachment.
      */
    var AttachmentId: js.UndefOr[String] = js.undefined
  }
  
  trait AttachVolumeRequest extends js.Object {
    /**
      * The device name (for example, /dev/sdh or xvdh).
      */
    var Device: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: String
    /**
      * The ID of the EBS volume. The volume and instance must be within the same Availability Zone.
      */
    var VolumeId: String
  }
  
  trait AttachVpnGatewayRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: String
    /**
      * The ID of the virtual private gateway.
      */
    var VpnGatewayId: String
  }
  
  trait AttachVpnGatewayResult extends js.Object {
    /**
      * Information about the attachment.
      */
    var VpcAttachment: js.UndefOr[VpcAttachment] = js.undefined
  }
  
  trait AttributeBooleanValue extends js.Object {
    /**
      * The attribute value. The valid values are true or false.
      */
    var Value: js.UndefOr[Boolean] = js.undefined
  }
  
  trait AttributeValue extends js.Object {
    /**
      * The attribute value. The value is case-sensitive.
      */
    var Value: js.UndefOr[String] = js.undefined
  }
  
  trait AuthorizationRule extends js.Object {
    /**
      * Indicates whether the authorization rule grants access to all clients.
      */
    var AccessAll: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the Client VPN endpoint with which the authorization rule is associated.
      */
    var ClientVpnEndpointId: js.UndefOr[String] = js.undefined
    /**
      * A brief description of the authorization rule.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.
      */
    var DestinationCidr: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Active Directory group to which the authorization rule grants access.
      */
    var GroupId: js.UndefOr[String] = js.undefined
    /**
      * The current state of the authorization rule.
      */
    var Status: js.UndefOr[ClientVpnAuthorizationRuleStatus] = js.undefined
  }
  
  trait AuthorizeClientVpnIngressRequest extends js.Object {
    /**
      * The ID of the Active Directory group to grant access.
      */
    var AccessGroupId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether to grant access to all clients. Use true to grant all clients who successfully establish a VPN connection access to the network.
      */
    var AuthorizeAllGroups: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the Client VPN endpoint.
      */
    var ClientVpnEndpointId: String
    /**
      * A brief description of the authorization rule.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The IPv4 address range, in CIDR notation, of the network for which access is being authorized.
      */
    var TargetNetworkCidr: String
  }
  
  trait AuthorizeClientVpnIngressResult extends js.Object {
    /**
      * The current state of the authorization rule.
      */
    var Status: js.UndefOr[ClientVpnAuthorizationRuleStatus] = js.undefined
  }
  
  trait AuthorizeSecurityGroupEgressRequest extends js.Object {
    /**
      * Not supported. Use a set of IP permissions to specify the CIDR.
      */
    var CidrIp: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Not supported. Use a set of IP permissions to specify the port.
      */
    var FromPort: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the security group.
      */
    var GroupId: String
    /**
      * One or more sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
      */
    var IpPermissions: js.UndefOr[IpPermissionList] = js.undefined
    /**
      * Not supported. Use a set of IP permissions to specify the protocol name or number.
      */
    var IpProtocol: js.UndefOr[String] = js.undefined
    /**
      * Not supported. Use a set of IP permissions to specify a destination security group.
      */
    var SourceSecurityGroupName: js.UndefOr[String] = js.undefined
    /**
      * Not supported. Use a set of IP permissions to specify a destination security group.
      */
    var SourceSecurityGroupOwnerId: js.UndefOr[String] = js.undefined
    /**
      * Not supported. Use a set of IP permissions to specify the port.
      */
    var ToPort: js.UndefOr[Integer] = js.undefined
  }
  
  trait AuthorizeSecurityGroupIngressRequest extends js.Object {
    /**
      * The CIDR IPv4 address range. You can't specify this parameter when specifying a source security group.
      */
    var CidrIp: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. For the ICMP/ICMPv6 type number, use -1 to specify all types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
      */
    var FromPort: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
      */
    var GroupId: js.UndefOr[String] = js.undefined
    /**
      * [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * One or more sets of IP permissions. Can be used to specify multiple rules in a single command.
      */
    var IpPermissions: js.UndefOr[IpPermissionList] = js.undefined
    /**
      * The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). (VPC only) Use -1 to specify all protocols. If you specify -1, or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6), traffic on all ports is allowed, regardless of any ports you specify. For tcp, udp, and icmp, you must specify a port range. For protocol 58 (ICMPv6), you can optionally specify a port range; if you don't, traffic for all types and codes is allowed.
      */
    var IpProtocol: js.UndefOr[String] = js.undefined
    /**
      * [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For EC2-VPC, the source security group must be in the same VPC.
      */
    var SourceSecurityGroupName: js.UndefOr[String] = js.undefined
    /**
      * [nondefault VPC] The AWS account ID for the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead.
      */
    var SourceSecurityGroupOwnerId: js.UndefOr[String] = js.undefined
    /**
      * The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code number. For the ICMP/ICMPv6 code number, use -1 to specify all codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
      */
    var ToPort: js.UndefOr[Integer] = js.undefined
  }
  
  trait AvailabilityZone extends js.Object {
    /**
      * Any messages about the Availability Zone.
      */
    var Messages: js.UndefOr[AvailabilityZoneMessageList] = js.undefined
    /**
      * The name of the region.
      */
    var RegionName: js.UndefOr[String] = js.undefined
    /**
      * The state of the Availability Zone.
      */
    var State: js.UndefOr[AvailabilityZoneState] = js.undefined
    /**
      * The ID of the Availability Zone.
      */
    var ZoneId: js.UndefOr[String] = js.undefined
    /**
      * The name of the Availability Zone.
      */
    var ZoneName: js.UndefOr[String] = js.undefined
  }
  
  trait AvailabilityZoneMessage extends js.Object {
    /**
      * The message about the Availability Zone.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait AvailableCapacity extends js.Object {
    /**
      * The total number of instances supported by the Dedicated Host.
      */
    var AvailableInstanceCapacity: js.UndefOr[AvailableInstanceCapacityList] = js.undefined
    /**
      * The number of vCPUs available on the Dedicated Host.
      */
    var AvailableVCpus: js.UndefOr[Integer] = js.undefined
  }
  
  trait BlobAttributeValue extends js.Object {
    var Value: js.UndefOr[_Blob] = js.undefined
  }
  
  trait BlockDeviceMapping extends js.Object {
    /**
      * The device name (for example, /dev/sdh or xvdh).
      */
    var DeviceName: js.UndefOr[String] = js.undefined
    /**
      * Parameters used to automatically set up EBS volumes when the instance is launched.
      */
    var Ebs: js.UndefOr[EbsBlockDevice] = js.undefined
    /**
      * Suppresses the specified device included in the block device mapping of the AMI.
      */
    var NoDevice: js.UndefOr[String] = js.undefined
    /**
      * The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. NVMe instance store volumes are automatically enumerated and assigned a device name. Including them in your block device mapping has no effect. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
      */
    var VirtualName: js.UndefOr[String] = js.undefined
  }
  
  trait BundleInstanceRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance to bundle. Type: String Default: None Required: Yes
      */
    var InstanceId: String
    /**
      * The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
      */
    var Storage: Storage
  }
  
  trait BundleInstanceResult extends js.Object {
    /**
      * Information about the bundle task.
      */
    var BundleTask: js.UndefOr[BundleTask] = js.undefined
  }
  
  trait BundleTask extends js.Object {
    /**
      * The ID of the bundle task.
      */
    var BundleId: js.UndefOr[String] = js.undefined
    /**
      * If the task fails, a description of the error.
      */
    var BundleTaskError: js.UndefOr[BundleTaskError] = js.undefined
    /**
      * The ID of the instance associated with this bundle task.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The level of task completion, as a percent (for example, 20%).
      */
    var Progress: js.UndefOr[String] = js.undefined
    /**
      * The time this task started.
      */
    var StartTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The state of the task.
      */
    var State: js.UndefOr[BundleTaskState] = js.undefined
    /**
      * The Amazon S3 storage locations.
      */
    var Storage: js.UndefOr[Storage] = js.undefined
    /**
      * The time of the most recent update for the task.
      */
    var UpdateTime: js.UndefOr[DateTime] = js.undefined
  }
  
  trait BundleTaskError extends js.Object {
    /**
      * The error code.
      */
    var Code: js.UndefOr[String] = js.undefined
    /**
      * The error message.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait ByoipCidr extends js.Object {
    /**
      * The public IPv4 address range, in CIDR notation.
      */
    var Cidr: js.UndefOr[String] = js.undefined
    /**
      * The description of the address range.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The state of the address pool.
      */
    var State: js.UndefOr[ByoipCidrState] = js.undefined
    /**
      * Upon success, contains the ID of the address pool. Otherwise, contains an error message.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
  }
  
  trait CancelBundleTaskRequest extends js.Object {
    /**
      * The ID of the bundle task.
      */
    var BundleId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait CancelBundleTaskResult extends js.Object {
    /**
      * Information about the bundle task.
      */
    var BundleTask: js.UndefOr[BundleTask] = js.undefined
  }
  
  trait CancelCapacityReservationRequest extends js.Object {
    /**
      * The ID of the Capacity Reservation to be cancelled.
      */
    var CapacityReservationId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait CancelCapacityReservationResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait CancelConversionRequest extends js.Object {
    /**
      * The ID of the conversion task.
      */
    var ConversionTaskId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The reason for canceling the conversion task.
      */
    var ReasonMessage: js.UndefOr[String] = js.undefined
  }
  
  trait CancelExportTaskRequest extends js.Object {
    /**
      * The ID of the export task. This is the ID returned by CreateInstanceExportTask.
      */
    var ExportTaskId: String
  }
  
  trait CancelImportTaskRequest extends js.Object {
    /**
      * The reason for canceling the task.
      */
    var CancelReason: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the import image or import snapshot task to be canceled.
      */
    var ImportTaskId: js.UndefOr[String] = js.undefined
  }
  
  trait CancelImportTaskResult extends js.Object {
    /**
      * The ID of the task being canceled.
      */
    var ImportTaskId: js.UndefOr[String] = js.undefined
    /**
      * The current state of the task being canceled.
      */
    var PreviousState: js.UndefOr[String] = js.undefined
    /**
      * The current state of the task being canceled.
      */
    var State: js.UndefOr[String] = js.undefined
  }
  
  trait CancelReservedInstancesListingRequest extends js.Object {
    /**
      * The ID of the Reserved Instance listing.
      */
    var ReservedInstancesListingId: String
  }
  
  trait CancelReservedInstancesListingResult extends js.Object {
    /**
      * The Reserved Instance listing.
      */
    var ReservedInstancesListings: js.UndefOr[ReservedInstancesListingList] = js.undefined
  }
  
  trait CancelSpotFleetRequestsError extends js.Object {
    /**
      * The error code.
      */
    var Code: js.UndefOr[CancelBatchErrorCode] = js.undefined
    /**
      * The description for the error code.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait CancelSpotFleetRequestsErrorItem extends js.Object {
    /**
      * The error.
      */
    var Error: js.UndefOr[CancelSpotFleetRequestsError] = js.undefined
    /**
      * The ID of the Spot Fleet request.
      */
    var SpotFleetRequestId: js.UndefOr[String] = js.undefined
  }
  
  trait CancelSpotFleetRequestsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The IDs of the Spot Fleet requests.
      */
    var SpotFleetRequestIds: ValueStringList
    /**
      * Indicates whether to terminate instances for a Spot Fleet request if it is canceled successfully.
      */
    var TerminateInstances: Boolean
  }
  
  trait CancelSpotFleetRequestsResponse extends js.Object {
    /**
      * Information about the Spot Fleet requests that are successfully canceled.
      */
    var SuccessfulFleetRequests: js.UndefOr[CancelSpotFleetRequestsSuccessSet] = js.undefined
    /**
      * Information about the Spot Fleet requests that are not successfully canceled.
      */
    var UnsuccessfulFleetRequests: js.UndefOr[CancelSpotFleetRequestsErrorSet] = js.undefined
  }
  
  trait CancelSpotFleetRequestsSuccessItem extends js.Object {
    /**
      * The current state of the Spot Fleet request.
      */
    var CurrentSpotFleetRequestState: js.UndefOr[BatchState] = js.undefined
    /**
      * The previous state of the Spot Fleet request.
      */
    var PreviousSpotFleetRequestState: js.UndefOr[BatchState] = js.undefined
    /**
      * The ID of the Spot Fleet request.
      */
    var SpotFleetRequestId: js.UndefOr[String] = js.undefined
  }
  
  trait CancelSpotInstanceRequestsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more Spot Instance request IDs.
      */
    var SpotInstanceRequestIds: SpotInstanceRequestIdList
  }
  
  trait CancelSpotInstanceRequestsResult extends js.Object {
    /**
      * One or more Spot Instance requests.
      */
    var CancelledSpotInstanceRequests: js.UndefOr[CancelledSpotInstanceRequestList] = js.undefined
  }
  
  trait CancelledSpotInstanceRequest extends js.Object {
    /**
      * The ID of the Spot Instance request.
      */
    var SpotInstanceRequestId: js.UndefOr[String] = js.undefined
    /**
      * The state of the Spot Instance request.
      */
    var State: js.UndefOr[CancelSpotInstanceRequestState] = js.undefined
  }
  
  trait CapacityReservation extends js.Object {
    /**
      * The Availability Zone in which the capacity is reserved.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.
      */
    var AvailableInstanceCount: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the Capacity Reservation.
      */
    var CapacityReservationId: js.UndefOr[String] = js.undefined
    /**
      * The date and time at which the Capacity Reservation was created.
      */
    var CreateDate: js.UndefOr[DateTime] = js.undefined
    /**
      * Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
      */
    var EbsOptimized: js.UndefOr[Boolean] = js.undefined
    /**
      * The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time.
      */
    var EndDate: js.UndefOr[DateTime] = js.undefined
    /**
      * Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it.    limited - The Capacity Reservation expires automatically at a specified date and time.  
      */
    var EndDateType: js.UndefOr[EndDateType] = js.undefined
    /**
      * Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
      */
    var EphemeralStorage: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates the type of instance launches that the Capacity Reservation accepts. The options include:    open - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying any additional parameters.    targeted - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.   
      */
    var InstanceMatchCriteria: js.UndefOr[InstanceMatchCriteria] = js.undefined
    /**
      * The type of operating system for which the Capacity Reservation reserves capacity.
      */
    var InstancePlatform: js.UndefOr[CapacityReservationInstancePlatform] = js.undefined
    /**
      * The type of instance for which the Capacity Reservation reserves capacity.
      */
    var InstanceType: js.UndefOr[String] = js.undefined
    /**
      * The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:    active - The Capacity Reservation is active and the capacity is available for your use.    cancelled - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.    expired - The Capacity Reservation was manually cancelled. The reserved capacity is no longer available for your use.    pending - The Capacity Reservation request was successful but the capacity provisioning is still pending.    failed - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.  
      */
    var State: js.UndefOr[CapacityReservationState] = js.undefined
    /**
      * Any tags assigned to the Capacity Reservation.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:    default - The Capacity Reservation is created on hardware that is shared with other AWS accounts.    dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.  
      */
    var Tenancy: js.UndefOr[CapacityReservationTenancy] = js.undefined
    /**
      * The number of instances for which the Capacity Reservation reserves capacity.
      */
    var TotalInstanceCount: js.UndefOr[Integer] = js.undefined
  }
  
  trait CapacityReservationSpecification extends js.Object {
    /**
      * Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.  
      */
    var CapacityReservationPreference: js.UndefOr[CapacityReservationPreference] = js.undefined
    /**
      * Information about the target Capacity Reservation.
      */
    var CapacityReservationTarget: js.UndefOr[CapacityReservationTarget] = js.undefined
  }
  
  trait CapacityReservationSpecificationResponse extends js.Object {
    /**
      * Describes the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.  
      */
    var CapacityReservationPreference: js.UndefOr[CapacityReservationPreference] = js.undefined
    /**
      * Information about the targeted Capacity Reservation.
      */
    var CapacityReservationTarget: js.UndefOr[CapacityReservationTargetResponse] = js.undefined
  }
  
  trait CapacityReservationTarget extends js.Object {
    /**
      * The ID of the Capacity Reservation.
      */
    var CapacityReservationId: js.UndefOr[String] = js.undefined
  }
  
  trait CapacityReservationTargetResponse extends js.Object {
    /**
      * The ID of the Capacity Reservation.
      */
    var CapacityReservationId: js.UndefOr[String] = js.undefined
  }
  
  trait CertificateAuthentication extends js.Object {
    /**
      *  The ARN of the client certificate.  
      */
    var ClientRootCertificateChain: js.UndefOr[String] = js.undefined
  }
  
  trait CertificateAuthenticationRequest extends js.Object {
    /**
      *  The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM). 
      */
    var ClientRootCertificateChainArn: js.UndefOr[String] = js.undefined
  }
  
  trait CidrAuthorizationContext extends js.Object {
    /**
      * The plain-text authorization message for the prefix and account.
      */
    var Message: String
    /**
      * The signed authorization message for the prefix and account.
      */
    var Signature: String
  }
  
  trait CidrBlock extends js.Object {
    /**
      * The IPv4 CIDR block.
      */
    var CidrBlock: js.UndefOr[String] = js.undefined
  }
  
  trait ClassicLinkDnsSupport extends js.Object {
    /**
      * Indicates whether ClassicLink DNS support is enabled for the VPC.
      */
    var ClassicLinkDnsSupported: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait ClassicLinkInstance extends js.Object {
    /**
      * A list of security groups.
      */
    var Groups: js.UndefOr[GroupIdentifierList] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * Any tags assigned to the instance.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait ClassicLoadBalancer extends js.Object {
    /**
      * The name of the load balancer.
      */
    var Name: js.UndefOr[String] = js.undefined
  }
  
  trait ClassicLoadBalancersConfig extends js.Object {
    /**
      * One or more Classic Load Balancers.
      */
    var ClassicLoadBalancers: js.UndefOr[ClassicLoadBalancers] = js.undefined
  }
  
  trait ClientApiVersions extends js.Object {
    /**
      * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
      */
    var apiVersion: js.UndefOr[apiVersion] = js.undefined
  }
  
  trait ClientCertificateRevocationListStatus extends js.Object {
    /**
      * The state of the client certificate revocation list.
      */
    var Code: js.UndefOr[ClientCertificateRevocationListStatusCode] = js.undefined
    /**
      * A message about the status of the client certificate revocation list, if applicable.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait ClientData extends js.Object {
    /**
      * A user-defined comment about the disk upload.
      */
    var Comment: js.UndefOr[String] = js.undefined
    /**
      * The time that the disk upload ends.
      */
    var UploadEnd: js.UndefOr[DateTime] = js.undefined
    /**
      * The size of the uploaded disk image, in GiB.
      */
    var UploadSize: js.UndefOr[Double] = js.undefined
    /**
      * The time that the disk upload starts.
      */
    var UploadStart: js.UndefOr[DateTime] = js.undefined
  }
  
  trait ClientVpnAuthentication extends js.Object {
    /**
      * Information about the Active Directory, if applicable.
      */
    var ActiveDirectory: js.UndefOr[DirectoryServiceAuthentication] = js.undefined
    /**
      * Information about the authentication certificates, if applicable.
      */
    var MutualAuthentication: js.UndefOr[CertificateAuthentication] = js.undefined
    /**
      * The authentication type used.
      */
    var Type: js.UndefOr[ClientVpnAuthenticationType] = js.undefined
  }
  
  trait ClientVpnAuthenticationRequest extends js.Object {
    /**
      * Information about the Active Directory to be used, if applicable. You must provide this information if Type is directory-service-authentication.
      */
    var ActiveDirectory: js.UndefOr[DirectoryServiceAuthenticationRequest] = js.undefined
    /**
      * Information about the authentication certificates to be used, if applicable. You must provide this information if Type is certificate-authentication.
      */
    var MutualAuthentication: js.UndefOr[CertificateAuthenticationRequest] = js.undefined
    /**
      * The type of client authentication to be used. Specify certificate-authentication to use certificate-based authentication, or directory-service-authentication to use Active Directory authentication.
      */
    var Type: js.UndefOr[ClientVpnAuthenticationType] = js.undefined
  }
  
  trait ClientVpnAuthorizationRuleStatus extends js.Object {
    /**
      * The state of the authorization rule.
      */
    var Code: js.UndefOr[ClientVpnAuthorizationRuleStatusCode] = js.undefined
    /**
      * A message about the status of the authorization rule, if applicable.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait ClientVpnConnection extends js.Object {
    /**
      * The IP address of the client.
      */
    var ClientIp: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Client VPN endpoint to which the client is connected.
      */
    var ClientVpnEndpointId: js.UndefOr[String] = js.undefined
    /**
      *  The common name associated with the client. This is either the name of the client certificate, or the Active Directory user name. 
      */
    var CommonName: js.UndefOr[String] = js.undefined
    /**
      * The date and time the client connection was terminated.
      */
    var ConnectionEndTime: js.UndefOr[String] = js.undefined
    /**
      * The date and time the client connection was established.
      */
    var ConnectionEstablishedTime: js.UndefOr[String] = js.undefined
    /**
      * The ID of the client connection.
      */
    var ConnectionId: js.UndefOr[String] = js.undefined
    /**
      * The number of bytes received by the client.
      */
    var EgressBytes: js.UndefOr[String] = js.undefined
    /**
      * The number of packets received by the client.
      */
    var EgressPackets: js.UndefOr[String] = js.undefined
    /**
      * The number of bytes sent by the client.
      */
    var IngressBytes: js.UndefOr[String] = js.undefined
    /**
      * The number of packets sent by the client.
      */
    var IngressPackets: js.UndefOr[String] = js.undefined
    /**
      * The current state of the client connection.
      */
    var Status: js.UndefOr[ClientVpnConnectionStatus] = js.undefined
    /**
      *  The current date and time. 
      */
    var Timestamp: js.UndefOr[String] = js.undefined
    /**
      * The username of the client who established the client connection. This information is only provided if Active Directory client authentication is used.
      */
    var Username: js.UndefOr[String] = js.undefined
  }
  
  trait ClientVpnConnectionStatus extends js.Object {
    /**
      * The state of the client connection.
      */
    var Code: js.UndefOr[ClientVpnConnectionStatusCode] = js.undefined
    /**
      * A message about the status of the client connection, if applicable.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait ClientVpnEndpoint extends js.Object {
    /**
      * Information about the associated target networks. A target network is a subnet in a VPC.
      */
    var AssociatedTargetNetworks: js.UndefOr[AssociatedTargetNetworkSet] = js.undefined
    /**
      * Information about the authentication method used by the Client VPN endpoint.
      */
    var AuthenticationOptions: js.UndefOr[ClientVpnAuthenticationList] = js.undefined
    /**
      * The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.
      */
    var ClientCidrBlock: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Client VPN endpoint.
      */
    var ClientVpnEndpointId: js.UndefOr[String] = js.undefined
    /**
      * Information about the client connection logging options for the Client VPN endpoint.
      */
    var ConnectionLogOptions: js.UndefOr[ConnectionLogResponseOptions] = js.undefined
    /**
      * The date and time the Client VPN endpoint was created.
      */
    var CreationTime: js.UndefOr[String] = js.undefined
    /**
      * The date and time the Client VPN endpoint was deleted, if applicable.
      */
    var DeletionTime: js.UndefOr[String] = js.undefined
    /**
      * A brief description of the endpoint.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The DNS name to be used by clients when connecting to the Client VPN endpoint.
      */
    var DnsName: js.UndefOr[String] = js.undefined
    /**
      * Information about the DNS servers to be used for DNS resolution. 
      */
    var DnsServers: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The ARN of the server certificate.
      */
    var ServerCertificateArn: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether VPN split tunneling is supported.
      */
    var SplitTunnel: js.UndefOr[Boolean] = js.undefined
    /**
      * The current state of the Client VPN endpoint.
      */
    var Status: js.UndefOr[ClientVpnEndpointStatus] = js.undefined
    /**
      * Any tags assigned to the Client VPN endpoint.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      *  The transport protocol used by the Client VPN endpoint. 
      */
    var TransportProtocol: js.UndefOr[TransportProtocol] = js.undefined
    /**
      * The protocol used by the VPN session.
      */
    var VpnProtocol: js.UndefOr[VpnProtocol] = js.undefined
  }
  
  trait ClientVpnEndpointStatus extends js.Object {
    /**
      * The state of the Client VPN endpoint. Possible states include:    pending-associate - The Client VPN endpoint has been created but no target networks have been associated. The Client VPN endpoint cannot accept connections.    available - The Client VPN endpoint has been created and a target network has been associated. The Client VPN endpoint can accept connections.    deleting - The Client VPN endpoint is being deleted. The Client VPN endpoint cannot accept connections.    deleted - The Client VPN endpoint has been deleted. The Client VPN endpoint cannot accept connections.  
      */
    var Code: js.UndefOr[ClientVpnEndpointStatusCode] = js.undefined
    /**
      * A message about the status of the Client VPN endpoint.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait ClientVpnRoute extends js.Object {
    /**
      * The ID of the Client VPN endpoint with which the route is associated.
      */
    var ClientVpnEndpointId: js.UndefOr[String] = js.undefined
    /**
      * A brief description of the route.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The IPv4 address range, in CIDR notation, of the route destination.
      */
    var DestinationCidr: js.UndefOr[String] = js.undefined
    /**
      * Indicates how the route was associated with the Client VPN endpoint. associate indicates that the route was automatically added when the target network was associated with the Client VPN endpoint. add-route indicates that the route was manually added using the CreateClientVpnRoute action.
      */
    var Origin: js.UndefOr[String] = js.undefined
    /**
      * The current state of the route.
      */
    var Status: js.UndefOr[ClientVpnRouteStatus] = js.undefined
    /**
      * The ID of the subnet through which traffic is routed.
      */
    var TargetSubnet: js.UndefOr[String] = js.undefined
    /**
      *  The route type. 
      */
    var Type: js.UndefOr[String] = js.undefined
  }
  
  trait ClientVpnRouteStatus extends js.Object {
    /**
      * The state of the Client VPN endpoint route.
      */
    var Code: js.UndefOr[ClientVpnRouteStatusCode] = js.undefined
    /**
      * A message about the status of the Client VPN endpoint route, if applicable.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait ConfirmProductInstanceRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: String
    /**
      * The product code. This must be a product code that you own.
      */
    var ProductCode: String
  }
  
  trait ConfirmProductInstanceResult extends js.Object {
    /**
      * The AWS account ID of the instance owner. This is only present if the product code is attached to the instance.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * The return value of the request. Returns true if the specified product code is owned by the requester and associated with the specified instance.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ConnectionLogOptions extends js.Object {
    /**
      * The name of the CloudWatch Logs log group.
      */
    var CloudwatchLogGroup: js.UndefOr[String] = js.undefined
    /**
      * The name of the CloudWatch Logs log stream to which the connection data is published.
      */
    var CloudwatchLogStream: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether connection logging is enabled.
      */
    var Enabled: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ConnectionLogResponseOptions extends js.Object {
    /**
      * The name of the Amazon CloudWatch Logs log group to which connection logging data is published.
      */
    var CloudwatchLogGroup: js.UndefOr[String] = js.undefined
    /**
      * The name of the Amazon CloudWatch Logs log stream to which connection logging data is published.
      */
    var CloudwatchLogStream: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether client connection logging is enabled for the Client VPN endpoint.
      */
    var Enabled: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ConnectionNotification extends js.Object {
    /**
      * The events for the notification. Valid values are Accept, Connect, Delete, and Reject.
      */
    var ConnectionEvents: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The ARN of the SNS topic for the notification.
      */
    var ConnectionNotificationArn: js.UndefOr[String] = js.undefined
    /**
      * The ID of the notification.
      */
    var ConnectionNotificationId: js.UndefOr[String] = js.undefined
    /**
      * The state of the notification.
      */
    var ConnectionNotificationState: js.UndefOr[ConnectionNotificationState] = js.undefined
    /**
      * The type of notification.
      */
    var ConnectionNotificationType: js.UndefOr[ConnectionNotificationType] = js.undefined
    /**
      * The ID of the endpoint service.
      */
    var ServiceId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the VPC endpoint.
      */
    var VpcEndpointId: js.UndefOr[String] = js.undefined
  }
  
  trait ConversionTask extends js.Object {
    /**
      * The ID of the conversion task.
      */
    var ConversionTaskId: js.UndefOr[String] = js.undefined
    /**
      * The time when the task expires. If the upload isn't complete before the expiration time, we automatically cancel the task.
      */
    var ExpirationTime: js.UndefOr[String] = js.undefined
    /**
      * If the task is for importing an instance, this contains information about the import instance task.
      */
    var ImportInstance: js.UndefOr[ImportInstanceTaskDetails] = js.undefined
    /**
      * If the task is for importing a volume, this contains information about the import volume task.
      */
    var ImportVolume: js.UndefOr[ImportVolumeTaskDetails] = js.undefined
    /**
      * The state of the conversion task.
      */
    var State: js.UndefOr[ConversionTaskState] = js.undefined
    /**
      * The status message related to the conversion task.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
    /**
      * Any tags assigned to the task.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
  }
  
  trait CopyFpgaImageRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The description for the new AFI.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The name for the new AFI. The default is the name of the source AFI.
      */
    var Name: js.UndefOr[String] = js.undefined
    /**
      * The ID of the source AFI.
      */
    var SourceFpgaImageId: String
    /**
      * The region that contains the source AFI.
      */
    var SourceRegion: String
  }
  
  trait CopyFpgaImageResult extends js.Object {
    /**
      * The ID of the new AFI.
      */
    var FpgaImageId: js.UndefOr[String] = js.undefined
  }
  
  trait CopyImageRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * A description for the new AMI in the destination region.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Specifies whether the destination snapshots of the copied image should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot create an unencrypted copy of an encrypted snapshot. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias, in the form alias/ExampleAlias     ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.    ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified CMK must exist in the region that the snapshot is being copied to. 
      */
    var KmsKeyId: js.UndefOr[String] = js.undefined
    /**
      * The name of the new AMI in the destination region.
      */
    var Name: String
    /**
      * The ID of the AMI to copy.
      */
    var SourceImageId: String
    /**
      * The name of the region that contains the AMI to copy.
      */
    var SourceRegion: String
  }
  
  trait CopyImageResult extends js.Object {
    /**
      * The ID of the new AMI.
      */
    var ImageId: js.UndefOr[String] = js.undefined
  }
  
  trait CopySnapshotRequest extends js.Object {
    /**
      * A description for the EBS snapshot.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The destination region to use in the PresignedUrl parameter of a snapshot copy operation. This parameter is only valid for specifying the destination region in a PresignedUrl parameter, where it is required. The snapshot copy is sent to the regional endpoint that you sent the HTTP request to (for example, ec2.us-east-1.amazonaws.com). With the AWS CLI, this is specified using the --region parameter or the default region in your AWS configuration file.
      */
    var DestinationRegion: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Specifies whether the destination snapshot should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot use it to create an unencrypted copy of an encrypted snapshot. Your default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias   ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.    ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. The action will eventually fail. 
      */
    var KmsKeyId: js.UndefOr[String] = js.undefined
    /**
      * When you copy an encrypted source snapshot using the Amazon EC2 Query API, you must supply a pre-signed URL. This parameter is optional for unencrypted snapshots. For more information, see Query Requests. The PresignedUrl should use the snapshot source endpoint, the CopySnapshot action, and include the SourceRegion, SourceSnapshotId, and DestinationRegion parameters. The PresignedUrl must be signed using AWS Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in Authenticating Requests by Using Query Parameters (AWS Signature Version 4) in the Amazon Simple Storage Service API Reference. An invalid or improperly signed PresignedUrl will cause the copy operation to fail asynchronously, and the snapshot will move to an error state.
      */
    var PresignedUrl: js.UndefOr[String] = js.undefined
    /**
      * The ID of the region that contains the snapshot to be copied.
      */
    var SourceRegion: String
    /**
      * The ID of the EBS snapshot to copy.
      */
    var SourceSnapshotId: String
  }
  
  trait CopySnapshotResult extends js.Object {
    /**
      * The ID of the new snapshot.
      */
    var SnapshotId: js.UndefOr[String] = js.undefined
  }
  
  trait CpuOptions extends js.Object {
    /**
      * The number of CPU cores for the instance.
      */
    var CoreCount: js.UndefOr[Integer] = js.undefined
    /**
      * The number of threads per CPU core.
      */
    var ThreadsPerCore: js.UndefOr[Integer] = js.undefined
  }
  
  trait CpuOptionsRequest extends js.Object {
    /**
      * The number of CPU cores for the instance.
      */
    var CoreCount: js.UndefOr[Integer] = js.undefined
    /**
      * The number of threads per CPU core. To disable Intel Hyper-Threading Technology for the instance, specify a value of 1. Otherwise, specify the default value of 2.
      */
    var ThreadsPerCore: js.UndefOr[Integer] = js.undefined
  }
  
  trait CreateCapacityReservationRequest extends js.Object {
    /**
      * The Availability Zone in which to create the Capacity Reservation.
      */
    var AvailabilityZone: String
    /**
      * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency. Constraint: Maximum 64 ASCII characters.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
      */
    var EbsOptimized: js.UndefOr[Boolean] = js.undefined
    /**
      * The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time. You must provide an EndDate value if EndDateType is limited. Omit EndDate if EndDateType is unlimited. If the EndDateType is limited, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
      */
    var EndDate: js.UndefOr[DateTime] = js.undefined
    /**
      * Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an EndDate if the EndDateType is unlimited.    limited - The Capacity Reservation expires automatically at a specified date and time. You must provide an EndDate value if the EndDateType value is limited.  
      */
    var EndDateType: js.UndefOr[EndDateType] = js.undefined
    /**
      * Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
      */
    var EphemeralStorage: js.UndefOr[Boolean] = js.undefined
    /**
      * The number of instances for which to reserve capacity.
      */
    var InstanceCount: Integer
    /**
      * Indicates the type of instance launches that the Capacity Reservation accepts. The options include:    open - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.    targeted - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.    Default: open 
      */
    var InstanceMatchCriteria: js.UndefOr[InstanceMatchCriteria] = js.undefined
    /**
      * The type of operating system for which to reserve capacity.
      */
    var InstancePlatform: CapacityReservationInstancePlatform
    /**
      * The instance type for which to reserve capacity. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
      */
    var InstanceType: String
    /**
      * The tags to apply to the Capacity Reservation during launch.
      */
    var TagSpecifications: js.UndefOr[TagSpecificationList] = js.undefined
    /**
      * Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:    default - The Capacity Reservation is created on hardware that is shared with other AWS accounts.    dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.  
      */
    var Tenancy: js.UndefOr[CapacityReservationTenancy] = js.undefined
  }
  
  trait CreateCapacityReservationResult extends js.Object {
    /**
      * Information about the Capacity Reservation.
      */
    var CapacityReservation: js.UndefOr[CapacityReservation] = js.undefined
  }
  
  trait CreateClientVpnEndpointRequest extends js.Object {
    /**
      * Information about the authentication method to be used to authenticate clients.
      */
    var AuthenticationOptions: ClientVpnAuthenticationRequestList
    /**
      * The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
      */
    var ClientCidrBlock: String
    /**
      * Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see  How to Ensure Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the client connection logging options. If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:   Client connection requests   Client connection results (successful and unsuccessful)   Reasons for unsuccessful client connection requests   Client connection termination time  
      */
    var ConnectionLogOptions: ConnectionLogOptions
    /**
      * A brief description of the Client VPN endpoint.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the VPC that is to be associated with Client VPN endpoint is used as the DNS server.
      */
    var DnsServers: js.UndefOr[ValueStringList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ARN of the server certificate. For more information, see the AWS Certificate Manager User Guide .
      */
    var ServerCertificateArn: String
    /**
      * The tags to apply to the Client VPN endpoint during creation.
      */
    var TagSpecifications: js.UndefOr[TagSpecificationList] = js.undefined
    /**
      * The transport protocol to be used by the VPN session. Default value: udp 
      */
    var TransportProtocol: js.UndefOr[TransportProtocol] = js.undefined
  }
  
  trait CreateClientVpnEndpointResult extends js.Object {
    /**
      * The ID of the Client VPN endpoint.
      */
    var ClientVpnEndpointId: js.UndefOr[String] = js.undefined
    /**
      * The DNS name to be used by clients when establishing their VPN session.
      */
    var DnsName: js.UndefOr[String] = js.undefined
    /**
      * The current state of the Client VPN endpoint.
      */
    var Status: js.UndefOr[ClientVpnEndpointStatus] = js.undefined
  }
  
  trait CreateClientVpnRouteRequest extends js.Object {
    /**
      * The ID of the Client VPN endpoint to which to add the route.
      */
    var ClientVpnEndpointId: String
    /**
      * A brief description of the route.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The IPv4 address range, in CIDR notation, of the route destination. For example:   To add a route for Internet access, enter 0.0.0.0/0    To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range   To add a route for an on-premises network, enter the AWS Site-to-Site VPN connection's IPv4 CIDR range   Route address ranges cannot overlap with the CIDR range specified for client allocation.
      */
    var DestinationCidrBlock: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the subnet through which you want to route traffic. The specified subnet must be an existing target network of the Client VPN endpoint.
      */
    var TargetVpcSubnetId: String
  }
  
  trait CreateClientVpnRouteResult extends js.Object {
    /**
      * The current state of the route.
      */
    var Status: js.UndefOr[ClientVpnRouteStatus] = js.undefined
  }
  
  trait CreateCustomerGatewayRequest extends js.Object {
    /**
      * For devices that support BGP, the customer gateway's BGP ASN. Default: 65000
      */
    var BgpAsn: Integer
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The Internet-routable IP address for the customer gateway's outside interface. The address must be static.
      */
    var PublicIp: String
    /**
      * The type of VPN connection that this customer gateway supports (ipsec.1).
      */
    var Type: GatewayType
  }
  
  trait CreateCustomerGatewayResult extends js.Object {
    /**
      * Information about the customer gateway.
      */
    var CustomerGateway: js.UndefOr[CustomerGateway] = js.undefined
  }
  
  trait CreateDefaultSubnetRequest extends js.Object {
    /**
      * The Availability Zone in which to create the default subnet.
      */
    var AvailabilityZone: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait CreateDefaultSubnetResult extends js.Object {
    /**
      * Information about the subnet.
      */
    var Subnet: js.UndefOr[Subnet] = js.undefined
  }
  
  trait CreateDefaultVpcRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait CreateDefaultVpcResult extends js.Object {
    /**
      * Information about the VPC.
      */
    var Vpc: js.UndefOr[Vpc] = js.undefined
  }
  
  trait CreateDhcpOptionsRequest extends js.Object {
    /**
      * A DHCP configuration option.
      */
    var DhcpConfigurations: NewDhcpConfigurationList
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait CreateDhcpOptionsResult extends js.Object {
    /**
      * A set of DHCP options.
      */
    var DhcpOptions: js.UndefOr[DhcpOptions] = js.undefined
  }
  
  trait CreateEgressOnlyInternetGatewayRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC for which to create the egress-only internet gateway.
      */
    var VpcId: String
  }
  
  trait CreateEgressOnlyInternetGatewayResult extends js.Object {
    /**
      * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the egress-only internet gateway.
      */
    var EgressOnlyInternetGateway: js.UndefOr[EgressOnlyInternetGateway] = js.undefined
  }
  
  trait CreateFleetError extends js.Object {
    /**
      * The error code that indicates why the instance could not be launched. For more information about error codes, see Error Codes.
      */
    var ErrorCode: js.UndefOr[String] = js.undefined
    /**
      * The error message that describes why the instance could not be launched. For more information about error messages, see ee Error Codes.
      */
    var ErrorMessage: js.UndefOr[String] = js.undefined
    /**
      * The launch templates and overrides that were used for launching the instances. Any parameters that you specify in the Overrides override the same parameters in the launch template.
      */
    var LaunchTemplateAndOverrides: js.UndefOr[LaunchTemplateAndOverridesResponse] = js.undefined
    /**
      * Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
      */
    var Lifecycle: js.UndefOr[InstanceLifecycle] = js.undefined
  }
  
  trait CreateFleetInstance extends js.Object {
    /**
      * The IDs of the instances.
      */
    var InstanceIds: js.UndefOr[InstanceIdsSet] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The launch templates and overrides that were used for launching the instances. Any parameters that you specify in the Overrides override the same parameters in the launch template.
      */
    var LaunchTemplateAndOverrides: js.UndefOr[LaunchTemplateAndOverridesResponse] = js.undefined
    /**
      * Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
      */
    var Lifecycle: js.UndefOr[InstanceLifecycle] = js.undefined
    /**
      * The value is Windows for Windows instances; otherwise blank.
      */
    var Platform: js.UndefOr[PlatformValues] = js.undefined
  }
  
  trait CreateFleetRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
      */
    var ExcessCapacityTerminationPolicy: js.UndefOr[FleetExcessCapacityTerminationPolicy] = js.undefined
    /**
      * The configuration for the EC2 Fleet.
      */
    var LaunchTemplateConfigs: FleetLaunchTemplateConfigListRequest
    /**
      * The allocation strategy of On-Demand Instances in an EC2 Fleet.
      */
    var OnDemandOptions: js.UndefOr[OnDemandOptionsRequest] = js.undefined
    /**
      * Indicates whether EC2 Fleet should replace unhealthy instances.
      */
    var ReplaceUnhealthyInstances: js.UndefOr[Boolean] = js.undefined
    /**
      * Describes the configuration of Spot Instances in an EC2 Fleet.
      */
    var SpotOptions: js.UndefOr[SpotOptionsRequest] = js.undefined
    /**
      * The key-value pair for tagging the EC2 Fleet request on creation. The value for ResourceType must be fleet, otherwise the fleet request fails. To tag instances at launch, specify the tags in the launch template. For information about tagging after launch, see Tagging Your Resources. 
      */
    var TagSpecifications: js.UndefOr[TagSpecificationList] = js.undefined
    /**
      * The TotalTargetCapacity, OnDemandTargetCapacity, SpotTargetCapacity, and DefaultCapacityType structure.
      */
    var TargetCapacitySpecification: TargetCapacitySpecificationRequest
    /**
      * Indicates whether running instances should be terminated when the EC2 Fleet expires.
      */
    var TerminateInstancesWithExpiration: js.UndefOr[Boolean] = js.undefined
    /**
      * The type of the request. By default, the EC2 Fleet places an asynchronous request for your desired capacity, and maintains it by replenishing interrupted Spot Instances (maintain). A value of instant places a synchronous one-time request, and returns errors for any instances that could not be launched. A value of request places an asynchronous one-time request without maintaining capacity or submitting requests in alternative capacity pools if capacity is unavailable. For more information, see EC2 Fleet Request Types in the Amazon Elastic Compute Cloud User Guide.
      */
    var Type: js.UndefOr[FleetType] = js.undefined
    /**
      * The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
      */
    var ValidFrom: js.UndefOr[DateTime] = js.undefined
    /**
      * The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. The default end date is 7 days from the current date.
      */
    var ValidUntil: js.UndefOr[DateTime] = js.undefined
  }
  
  trait CreateFleetResult extends js.Object {
    /**
      * Information about the instances that could not be launched by the fleet. Valid only when Type is set to instant.
      */
    var Errors: js.UndefOr[CreateFleetErrorsSet] = js.undefined
    /**
      * The ID of the EC2 Fleet.
      */
    var FleetId: js.UndefOr[FleetIdentifier] = js.undefined
    /**
      * Information about the instances that were launched by the fleet. Valid only when Type is set to instant.
      */
    var Instances: js.UndefOr[CreateFleetInstancesSet] = js.undefined
  }
  
  trait CreateFlowLogsRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The ARN for the IAM role that's used to post flow logs to a log group.
      */
    var DeliverLogsPermissionArn: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Specifies the destination to which the flow log data is to be published. Flow log data can be published to an CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified for LogDestinationType. If LogDestinationType is not specified or cloud-watch-logs, specify the Amazon Resource Name (ARN) of the CloudWatch Logs log group. If LogDestinationType is s3, specify the ARN of the Amazon S3 bucket. You can also specify a subfolder in the bucket. To specify a subfolder in the bucket, use the following ARN format: bucket_ARN/subfolder_name/. For example, to specify a subfolder named my-logs in a bucket named my-bucket, use the following ARN: arn:aws:s3:::my-bucket/my-logs/. You cannot use AWSLogs as a subfolder name. This is a reserved term.
      */
    var LogDestination: js.UndefOr[String] = js.undefined
    /**
      * Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3. To publish flow log data to CloudWatch Logs, specify cloud-watch-logs. To publish flow log data to Amazon S3, specify s3. Default: cloud-watch-logs 
      */
    var LogDestinationType: js.UndefOr[LogDestinationType] = js.undefined
    /**
      * The name of the log group.
      */
    var LogGroupName: js.UndefOr[String] = js.undefined
    /**
      * One or more subnet, network interface, or VPC IDs. Constraints: Maximum of 1000 resources
      */
    var ResourceIds: ValueStringList
    /**
      * The type of resource on which to create the flow log.
      */
    var ResourceType: FlowLogsResourceType
    /**
      * The type of traffic to log.
      */
    var TrafficType: TrafficType
  }
  
  trait CreateFlowLogsResult extends js.Object {
    /**
      * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The IDs of the flow logs.
      */
    var FlowLogIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * Information about the flow logs that could not be created successfully.
      */
    var Unsuccessful: js.UndefOr[UnsuccessfulItemSet] = js.undefined
  }
  
  trait CreateFpgaImageRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * A description for the AFI.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball.
      */
    var InputStorageLocation: StorageLocation
    /**
      * The location in Amazon S3 for the output logs.
      */
    var LogsStorageLocation: js.UndefOr[StorageLocation] = js.undefined
    /**
      * A name for the AFI.
      */
    var Name: js.UndefOr[String] = js.undefined
  }
  
  trait CreateFpgaImageResult extends js.Object {
    /**
      * The global FPGA image identifier (AGFI ID).
      */
    var FpgaImageGlobalId: js.UndefOr[String] = js.undefined
    /**
      * The FPGA image identifier (AFI ID).
      */
    var FpgaImageId: js.UndefOr[String] = js.undefined
  }
  
  trait CreateImageRequest extends js.Object {
    /**
      * Information about one or more block device mappings. This parameter cannot be used to modify the encryption status of existing volumes or snapshots. To create an AMI with encrypted snapshots, use the CopyImage action.
      */
    var BlockDeviceMappings: js.UndefOr[BlockDeviceMappingRequestList] = js.undefined
    /**
      * A description for the new image.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: String
    /**
      * A name for the new image. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
      */
    var Name: String
    /**
      * By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image. If the 'No Reboot' option is set, Amazon EC2 doesn't shut down the instance before creating the image. When this option is used, file system integrity on the created image can't be guaranteed.
      */
    var NoReboot: js.UndefOr[Boolean] = js.undefined
  }
  
  trait CreateImageResult extends js.Object {
    /**
      * The ID of the new AMI.
      */
    var ImageId: js.UndefOr[String] = js.undefined
  }
  
  trait CreateInstanceExportTaskRequest extends js.Object {
    /**
      * A description for the conversion task or the resource being exported. The maximum length is 255 bytes.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The format and location for an instance export task.
      */
    var ExportToS3Task: js.UndefOr[ExportToS3TaskSpecification] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: String
    /**
      * The target virtualization environment.
      */
    var TargetEnvironment: js.UndefOr[ExportEnvironment] = js.undefined
  }
  
  trait CreateInstanceExportTaskResult extends js.Object {
    /**
      * Information about the instance export task.
      */
    var ExportTask: js.UndefOr[ExportTask] = js.undefined
  }
  
  trait CreateInternetGatewayRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait CreateInternetGatewayResult extends js.Object {
    /**
      * Information about the internet gateway.
      */
    var InternetGateway: js.UndefOr[InternetGateway] = js.undefined
  }
  
  trait CreateKeyPairRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * A unique name for the key pair. Constraints: Up to 255 ASCII characters
      */
    var KeyName: String
  }
  
  trait CreateLaunchTemplateRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraint: Maximum 128 ASCII characters.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The information for the launch template.
      */
    var LaunchTemplateData: RequestLaunchTemplateData
    /**
      * A name for the launch template.
      */
    var LaunchTemplateName: LaunchTemplateName
    /**
      * A description for the first version of the launch template.
      */
    var VersionDescription: js.UndefOr[VersionDescription] = js.undefined
  }
  
  trait CreateLaunchTemplateResult extends js.Object {
    /**
      * Information about the launch template.
      */
    var LaunchTemplate: js.UndefOr[LaunchTemplate] = js.undefined
  }
  
  trait CreateLaunchTemplateVersionRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraint: Maximum 128 ASCII characters.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The information for the launch template.
      */
    var LaunchTemplateData: RequestLaunchTemplateData
    /**
      * The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      */
    var LaunchTemplateId: js.UndefOr[String] = js.undefined
    /**
      * The name of the launch template. You must specify either the launch template ID or launch template name in the request.
      */
    var LaunchTemplateName: js.UndefOr[LaunchTemplateName] = js.undefined
    /**
      * The version number of the launch template version on which to base the new version. The new version inherits the same launch parameters as the source version, except for parameters that you specify in LaunchTemplateData.
      */
    var SourceVersion: js.UndefOr[String] = js.undefined
    /**
      * A description for the version of the launch template.
      */
    var VersionDescription: js.UndefOr[VersionDescription] = js.undefined
  }
  
  trait CreateLaunchTemplateVersionResult extends js.Object {
    /**
      * Information about the launch template version.
      */
    var LaunchTemplateVersion: js.UndefOr[LaunchTemplateVersion] = js.undefined
  }
  
  trait CreateNatGatewayRequest extends js.Object {
    /**
      * The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.
      */
    var AllocationId: String
    /**
      * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency. Constraint: Maximum 64 ASCII characters.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The subnet in which to create the NAT gateway.
      */
    var SubnetId: String
  }
  
  trait CreateNatGatewayResult extends js.Object {
    /**
      * Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the NAT gateway.
      */
    var NatGateway: js.UndefOr[NatGateway] = js.undefined
  }
  
  trait CreateNetworkAclEntryRequest extends js.Object {
    /**
      * The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
      */
    var CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).
      */
    var Egress: Boolean
    /**
      * ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
      */
    var IcmpTypeCode: js.UndefOr[IcmpTypeCode] = js.undefined
    /**
      * The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64).
      */
    var Ipv6CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * The ID of the network ACL.
      */
    var NetworkAclId: String
    /**
      * TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).
      */
    var PortRange: js.UndefOr[PortRange] = js.undefined
    /**
      * The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.
      */
    var Protocol: String
    /**
      * Indicates whether to allow or deny the traffic that matches the rule.
      */
    var RuleAction: RuleAction
    /**
      * The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number. Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.
      */
    var RuleNumber: Integer
  }
  
  trait CreateNetworkAclRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait CreateNetworkAclResult extends js.Object {
    /**
      * Information about the network ACL.
      */
    var NetworkAcl: js.UndefOr[NetworkAcl] = js.undefined
  }
  
  trait CreateNetworkInterfacePermissionRequest extends js.Object {
    /**
      * The AWS account ID.
      */
    var AwsAccountId: js.UndefOr[String] = js.undefined
    /**
      * The AWS service. Currently not supported.
      */
    var AwsService: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: String
    /**
      * The type of permission to grant.
      */
    var Permission: InterfacePermissionType
  }
  
  trait CreateNetworkInterfacePermissionResult extends js.Object {
    /**
      * Information about the permission for the network interface.
      */
    var InterfacePermission: js.UndefOr[NetworkInterfacePermission] = js.undefined
  }
  
  trait CreateNetworkInterfaceRequest extends js.Object {
    /**
      * A description for the network interface.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The IDs of one or more security groups.
      */
    var Groups: js.UndefOr[SecurityGroupIdStringList] = js.undefined
    /**
      * The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses. If your subnet has the AssignIpv6AddressOnCreation attribute set to true, you can specify 0 to override this setting.
      */
    var Ipv6AddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
      */
    var Ipv6Addresses: js.UndefOr[InstanceIpv6AddressList] = js.undefined
    /**
      * The primary private IPv4 address of the network interface. If you don't specify an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP addresses specified in privateIpAddresses as primary (only one IP address can be designated as primary).
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
    /**
      * One or more private IPv4 addresses.
      */
    var PrivateIpAddresses: js.UndefOr[PrivateIpAddressSpecificationList] = js.undefined
    /**
      * The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using privateIpAddresses. The number of IP addresses you can assign to a network interface varies by instance type. For more information, see IP Addresses Per ENI Per Instance Type in the Amazon Virtual Private Cloud User Guide.
      */
    var SecondaryPrivateIpAddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the subnet to associate with the network interface.
      */
    var SubnetId: String
  }
  
  trait CreateNetworkInterfaceResult extends js.Object {
    /**
      * Information about the network interface.
      */
    var NetworkInterface: js.UndefOr[NetworkInterface] = js.undefined
  }
  
  trait CreatePlacementGroupRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * A name for the placement group. Must be unique within the scope of your account for the Region. Constraints: Up to 255 ASCII characters
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * The number of partitions. Valid only when Strategy is set to partition.
      */
    var PartitionCount: js.UndefOr[Integer] = js.undefined
    /**
      * The placement strategy.
      */
    var Strategy: js.UndefOr[PlacementStrategy] = js.undefined
  }
  
  trait CreateReservedInstancesListingRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see Ensuring Idempotency.
      */
    var ClientToken: String
    /**
      * The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call.
      */
    var InstanceCount: Integer
    /**
      * A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term.
      */
    var PriceSchedules: PriceScheduleSpecificationList
    /**
      * The ID of the active Standard Reserved Instance.
      */
    var ReservedInstancesId: String
  }
  
  trait CreateReservedInstancesListingResult extends js.Object {
    /**
      * Information about the Standard Reserved Instance listing.
      */
    var ReservedInstancesListings: js.UndefOr[ReservedInstancesListingList] = js.undefined
  }
  
  trait CreateRouteRequest extends js.Object {
    /**
      * The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match.
      */
    var DestinationCidrBlock: js.UndefOr[String] = js.undefined
    /**
      * The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.
      */
    var DestinationIpv6CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * [IPv6 traffic only] The ID of an egress-only internet gateway.
      */
    var EgressOnlyInternetGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of an internet gateway or virtual private gateway attached to your VPC.
      */
    var GatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * [IPv4 traffic only] The ID of a NAT gateway.
      */
    var NatGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of a network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the route table for the route.
      */
    var RouteTableId: String
    /**
      * The ID of a transit gateway.
      */
    var TransitGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of a VPC peering connection.
      */
    var VpcPeeringConnectionId: js.UndefOr[String] = js.undefined
  }
  
  trait CreateRouteResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait CreateRouteTableRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait CreateRouteTableResult extends js.Object {
    /**
      * Information about the route table.
      */
    var RouteTable: js.UndefOr[RouteTable] = js.undefined
  }
  
  trait CreateSecurityGroupRequest extends js.Object {
    /**
      * A description for the security group. This is informational only. Constraints: Up to 255 characters in length Constraints for EC2-Classic: ASCII characters Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
      */
    var Description: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The name of the security group. Constraints: Up to 255 characters in length. Cannot start with sg-. Constraints for EC2-Classic: ASCII characters Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
      */
    var GroupName: String
    /**
      * [EC2-VPC] The ID of the VPC. Required for EC2-VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait CreateSecurityGroupResult extends js.Object {
    /**
      * The ID of the security group.
      */
    var GroupId: js.UndefOr[String] = js.undefined
  }
  
  trait CreateSnapshotRequest extends js.Object {
    /**
      * A description for the snapshot.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The tags to apply to the snapshot during creation.
      */
    var TagSpecifications: js.UndefOr[TagSpecificationList] = js.undefined
    /**
      * The ID of the EBS volume.
      */
    var VolumeId: String
  }
  
  trait CreateSpotDatafeedSubscriptionRequest extends js.Object {
    /**
      * The Amazon S3 bucket in which to store the Spot Instance data feed.
      */
    var Bucket: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * A prefix for the data feed file names.
      */
    var Prefix: js.UndefOr[String] = js.undefined
  }
  
  trait CreateSpotDatafeedSubscriptionResult extends js.Object {
    /**
      * The Spot Instance data feed subscription.
      */
    var SpotDatafeedSubscription: js.UndefOr[SpotDatafeedSubscription] = js.undefined
  }
  
  trait CreateSubnetRequest extends js.Object {
    /**
      * The Availability Zone for the subnet. Default: AWS selects one for you. If you create more than one subnet in your VPC, we may not necessarily select a different zone for each subnet.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The AZ ID of the subnet.
      */
    var AvailabilityZoneId: js.UndefOr[String] = js.undefined
    /**
      * The IPv4 network range for the subnet, in CIDR notation. For example, 10.0.0.0/24.
      */
    var CidrBlock: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length.
      */
    var Ipv6CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait CreateSubnetResult extends js.Object {
    /**
      * Information about the subnet.
      */
    var Subnet: js.UndefOr[Subnet] = js.undefined
  }
  
  trait CreateTagsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The IDs of one or more resources, separated by spaces. Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.
      */
    var Resources: ResourceIdList
    /**
      * One or more tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string. 
      */
    var Tags: TagList
  }
  
  trait CreateTransitGatewayRequest extends js.Object {
    /**
      * A description of the transit gateway.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The transit gateway options.
      */
    var Options: js.UndefOr[TransitGatewayRequestOptions] = js.undefined
    /**
      * The tags to apply to the transit gateway.
      */
    var TagSpecifications: js.UndefOr[TagSpecificationList] = js.undefined
  }
  
  trait CreateTransitGatewayResult extends js.Object {
    /**
      * Information about the transit gateway.
      */
    var TransitGateway: js.UndefOr[TransitGateway] = js.undefined
  }
  
  trait CreateTransitGatewayRouteRequest extends js.Object {
    /**
      * Indicates whether traffic matching this route is to be dropped.
      */
    var Blackhole: js.UndefOr[Boolean] = js.undefined
    /**
      * The CIDR range used for destination matches. Routing decisions are based on the most specific match.
      */
    var DestinationCidrBlock: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the transit gateway route table.
      */
    var TransitGatewayRouteTableId: String
  }
  
  trait CreateTransitGatewayRouteResult extends js.Object {
    /**
      * Information about the route.
      */
    var Route: js.UndefOr[TransitGatewayRoute] = js.undefined
  }
  
  trait CreateTransitGatewayRouteTableRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The tags to apply to the transit gateway route table.
      */
    var TagSpecifications: js.UndefOr[TagSpecificationList] = js.undefined
    /**
      * The ID of the transit gateway.
      */
    var TransitGatewayId: String
  }
  
  trait CreateTransitGatewayRouteTableResult extends js.Object {
    /**
      * Information about the transit gateway route table.
      */
    var TransitGatewayRouteTable: js.UndefOr[TransitGatewayRouteTable] = js.undefined
  }
  
  trait CreateTransitGatewayVpcAttachmentRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The VPC attachment options.
      */
    var Options: js.UndefOr[CreateTransitGatewayVpcAttachmentRequestOptions] = js.undefined
    /**
      * The IDs of one or more subnets. You can specify only one subnet per Availability Zone. You must specify at least one subnet, but we recommend that you specify two subnets for better availability. The transit gateway uses one IP address from each specified subnet.
      */
    var SubnetIds: ValueStringList
    /**
      * The tags to apply to the VPC attachment.
      */
    var TagSpecifications: js.UndefOr[TagSpecificationList] = js.undefined
    /**
      * The ID of the transit gateway.
      */
    var TransitGatewayId: String
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait CreateTransitGatewayVpcAttachmentRequestOptions extends js.Object {
    /**
      * Enable or disable DNS support. The default is enable.
      */
    var DnsSupport: js.UndefOr[DnsSupportValue] = js.undefined
    /**
      * Enable or disable IPv6 support. The default is enable.
      */
    var Ipv6Support: js.UndefOr[Ipv6SupportValue] = js.undefined
  }
  
  trait CreateTransitGatewayVpcAttachmentResult extends js.Object {
    /**
      * Information about the VPC attachment.
      */
    var TransitGatewayVpcAttachment: js.UndefOr[TransitGatewayVpcAttachment] = js.undefined
  }
  
  trait CreateVolumePermission extends js.Object {
    /**
      * The specific group that is to be added or removed from a volume's list of create volume permissions.
      */
    var Group: js.UndefOr[PermissionGroup] = js.undefined
    /**
      * The specific AWS account ID that is to be added or removed from a volume's list of create volume permissions.
      */
    var UserId: js.UndefOr[String] = js.undefined
  }
  
  trait CreateVolumePermissionModifications extends js.Object {
    /**
      * Adds a specific AWS account ID or group to a volume's list of create volume permissions.
      */
    var Add: js.UndefOr[CreateVolumePermissionList] = js.undefined
    /**
      * Removes a specific AWS account ID or group from a volume's list of create volume permissions.
      */
    var Remove: js.UndefOr[CreateVolumePermissionList] = js.undefined
  }
  
  trait CreateVolumeRequest extends js.Object {
    /**
      * The Availability Zone in which to create the volume. Use DescribeAvailabilityZones to list the Availability Zones that are currently available to you.
      */
    var AvailabilityZone: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Specifies whether the volume should be encrypted. Encrypted Amazon EBS volumes may only be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are automatically encrypted. There is no way to create an encrypted volume from an unencrypted snapshot or vice versa. If your AMI uses encrypted volumes, you can only launch it on supported instance types. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * The number of I/O operations per second (IOPS) to provision for the volume, with a maximum ratio of 50 IOPS/GiB. Range is 100 to 64,000 IOPS for volumes in most regions. Maximum IOPS of 64,000 is guaranteed only on Nitro-based instances. Other instance families guarantee performance up to 32,000 IOPS. For more information, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. This parameter is valid only for Provisioned IOPS SSD (io1) volumes.
      */
    var Iops: js.UndefOr[Integer] = js.undefined
    /**
      * An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias   ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.    ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. The action will eventually fail. 
      */
    var KmsKeyId: js.UndefOr[String] = js.undefined
    /**
      * The size of the volume, in GiBs. Constraints: 1-16,384 for gp2, 4-16,384 for io1, 500-16,384 for st1, 500-16,384 for sc1, and 1-1,024 for standard. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.  At least one of Size or SnapshotId are required. 
      */
    var Size: js.UndefOr[Integer] = js.undefined
    /**
      * The snapshot from which to create the volume.  At least one of Size or SnapshotId are required. 
      */
    var SnapshotId: js.UndefOr[String] = js.undefined
    /**
      * The tags to apply to the volume during creation.
      */
    var TagSpecifications: js.UndefOr[TagSpecificationList] = js.undefined
    /**
      * The volume type. This can be gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes. Defaults: If no volume type is specified, the default is standard in us-east-1, eu-west-1, eu-central-1, us-west-2, us-west-1, sa-east-1, ap-northeast-1, ap-northeast-2, ap-southeast-1, ap-southeast-2, ap-south-1, us-gov-west-1, and cn-north-1. In all other regions, EBS defaults to gp2.
      */
    var VolumeType: js.UndefOr[VolumeType] = js.undefined
  }
  
  trait CreateVpcEndpointConnectionNotificationRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * One or more endpoint events for which to receive notifications. Valid values are Accept, Connect, Delete, and Reject.
      */
    var ConnectionEvents: ValueStringList
    /**
      * The ARN of the SNS topic for the notifications.
      */
    var ConnectionNotificationArn: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the endpoint service.
      */
    var ServiceId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the endpoint. 
      */
    var VpcEndpointId: js.UndefOr[String] = js.undefined
  }
  
  trait CreateVpcEndpointConnectionNotificationResult extends js.Object {
    /**
      * Unique, case-sensitive identifier you provide to ensure the idempotency of the request.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the notification.
      */
    var ConnectionNotification: js.UndefOr[ConnectionNotification] = js.undefined
  }
  
  trait CreateVpcEndpointRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * (Gateway endpoint) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.
      */
    var PolicyDocument: js.UndefOr[String] = js.undefined
    /**
      * (Interface endpoint) Indicate whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the region (for example, kinesis.us-east-1.amazonaws.com) which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service. To use a private hosted zone, you must set the following VPC attributes to true: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to set the VPC attributes. Default: false 
      */
    var PrivateDnsEnabled: js.UndefOr[Boolean] = js.undefined
    /**
      * (Gateway endpoint) One or more route table IDs.
      */
    var RouteTableIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * (Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface.
      */
    var SecurityGroupIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The service name. To get a list of available services, use the DescribeVpcEndpointServices request, or get the name from the service provider.
      */
    var ServiceName: String
    /**
      * (Interface endpoint) The ID of one or more subnets in which to create an endpoint network interface.
      */
    var SubnetIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The type of endpoint. Default: Gateway
      */
    var VpcEndpointType: js.UndefOr[VpcEndpointType] = js.undefined
    /**
      * The ID of the VPC in which the endpoint will be used.
      */
    var VpcId: String
  }
  
  trait CreateVpcEndpointResult extends js.Object {
    /**
      * Unique, case-sensitive identifier you provide to ensure the idempotency of the request.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the endpoint.
      */
    var VpcEndpoint: js.UndefOr[VpcEndpoint] = js.undefined
  }
  
  trait CreateVpcEndpointServiceConfigurationRequest extends js.Object {
    /**
      * Indicate whether requests from service consumers to create an endpoint to your service must be accepted. To accept a request, use AcceptVpcEndpointConnections.
      */
    var AcceptanceRequired: js.UndefOr[Boolean] = js.undefined
    /**
      * Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The Amazon Resource Names (ARNs) of one or more Network Load Balancers for your service.
      */
    var NetworkLoadBalancerArns: ValueStringList
  }
  
  trait CreateVpcEndpointServiceConfigurationResult extends js.Object {
    /**
      * Unique, case-sensitive identifier you provide to ensure the idempotency of the request.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the service configuration.
      */
    var ServiceConfiguration: js.UndefOr[ServiceConfiguration] = js.undefined
  }
  
  trait CreateVpcPeeringConnectionRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The AWS account ID of the owner of the accepter VPC. Default: Your AWS account ID
      */
    var PeerOwnerId: js.UndefOr[String] = js.undefined
    /**
      * The region code for the accepter VPC, if the accepter VPC is located in a region other than the region in which you make the request. Default: The region in which you make the request.
      */
    var PeerRegion: js.UndefOr[String] = js.undefined
    /**
      * The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
      */
    var PeerVpcId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the requester VPC. You must specify this parameter in the request.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait CreateVpcPeeringConnectionResult extends js.Object {
    /**
      * Information about the VPC peering connection.
      */
    var VpcPeeringConnection: js.UndefOr[VpcPeeringConnection] = js.undefined
  }
  
  trait CreateVpcRequest extends js.Object {
    /**
      * Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.
      */
    var AmazonProvidedIpv6CidrBlock: js.UndefOr[Boolean] = js.undefined
    /**
      * The IPv4 network range for the VPC, in CIDR notation. For example, 10.0.0.0/16.
      */
    var CidrBlock: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The tenancy options for instances launched into the VPC. For default, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For dedicated, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of dedicated or host into a dedicated tenancy VPC.   Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default 
      */
    var InstanceTenancy: js.UndefOr[Tenancy] = js.undefined
  }
  
  trait CreateVpcResult extends js.Object {
    /**
      * Information about the VPC.
      */
    var Vpc: js.UndefOr[Vpc] = js.undefined
  }
  
  trait CreateVpnConnectionRequest extends js.Object {
    /**
      * The ID of the customer gateway.
      */
    var CustomerGatewayId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The options for the VPN connection.
      */
    var Options: js.UndefOr[VpnConnectionOptionsSpecification] = js.undefined
    /**
      * The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private gateway.
      */
    var TransitGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The type of VPN connection (ipsec.1).
      */
    var Type: String
    /**
      * The ID of the virtual private gateway. If you specify a virtual private gateway, you cannot specify a transit gateway.
      */
    var VpnGatewayId: js.UndefOr[String] = js.undefined
  }
  
  trait CreateVpnConnectionResult extends js.Object {
    /**
      * Information about the VPN connection.
      */
    var VpnConnection: js.UndefOr[VpnConnection] = js.undefined
  }
  
  trait CreateVpnConnectionRouteRequest extends js.Object {
    /**
      * The CIDR block associated with the local subnet of the customer network.
      */
    var DestinationCidrBlock: String
    /**
      * The ID of the VPN connection.
      */
    var VpnConnectionId: String
  }
  
  trait CreateVpnGatewayRequest extends js.Object {
    /**
      * A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range. Default: 64512
      */
    var AmazonSideAsn: js.UndefOr[Long] = js.undefined
    /**
      * The Availability Zone for the virtual private gateway.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The type of VPN connection this virtual private gateway supports.
      */
    var Type: GatewayType
  }
  
  trait CreateVpnGatewayResult extends js.Object {
    /**
      * Information about the virtual private gateway.
      */
    var VpnGateway: js.UndefOr[VpnGateway] = js.undefined
  }
  
  trait CreditSpecification extends js.Object {
    /**
      * The credit option for CPU usage of a T2 or T3 instance. Valid values are standard and unlimited.
      */
    var CpuCredits: js.UndefOr[String] = js.undefined
  }
  
  trait CreditSpecificationRequest extends js.Object {
    /**
      * The credit option for CPU usage of a T2 or T3 instance. Valid values are standard and unlimited.
      */
    var CpuCredits: String
  }
  
  trait CustomerGateway extends js.Object {
    /**
      * The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).
      */
    var BgpAsn: js.UndefOr[String] = js.undefined
    /**
      * The ID of the customer gateway.
      */
    var CustomerGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The Internet-routable IP address of the customer gateway's outside interface.
      */
    var IpAddress: js.UndefOr[String] = js.undefined
    /**
      * The current state of the customer gateway (pending | available | deleting | deleted).
      */
    var State: js.UndefOr[String] = js.undefined
    /**
      * Any tags assigned to the customer gateway.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The type of VPN connection the customer gateway supports (ipsec.1).
      */
    var Type: js.UndefOr[String] = js.undefined
  }
  
  trait DeleteClientVpnEndpointRequest extends js.Object {
    /**
      * The ID of the Client VPN to be deleted.
      */
    var ClientVpnEndpointId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DeleteClientVpnEndpointResult extends js.Object {
    /**
      * The current state of the Client VPN endpoint.
      */
    var Status: js.UndefOr[ClientVpnEndpointStatus] = js.undefined
  }
  
  trait DeleteClientVpnRouteRequest extends js.Object {
    /**
      * The ID of the Client VPN endpoint from which the route is to be deleted.
      */
    var ClientVpnEndpointId: String
    /**
      * The IPv4 address range, in CIDR notation, of the route to be deleted.
      */
    var DestinationCidrBlock: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the target subnet used by the route.
      */
    var TargetVpcSubnetId: js.UndefOr[String] = js.undefined
  }
  
  trait DeleteClientVpnRouteResult extends js.Object {
    /**
      * The current state of the route.
      */
    var Status: js.UndefOr[ClientVpnRouteStatus] = js.undefined
  }
  
  trait DeleteCustomerGatewayRequest extends js.Object {
    /**
      * The ID of the customer gateway.
      */
    var CustomerGatewayId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DeleteDhcpOptionsRequest extends js.Object {
    /**
      * The ID of the DHCP options set.
      */
    var DhcpOptionsId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DeleteEgressOnlyInternetGatewayRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the egress-only internet gateway.
      */
    var EgressOnlyInternetGatewayId: EgressOnlyInternetGatewayId
  }
  
  trait DeleteEgressOnlyInternetGatewayResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var ReturnCode: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DeleteFleetError extends js.Object {
    /**
      * The error code.
      */
    var Code: js.UndefOr[DeleteFleetErrorCode] = js.undefined
    /**
      * The description for the error code.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait DeleteFleetErrorItem extends js.Object {
    /**
      * The error.
      */
    var Error: js.UndefOr[DeleteFleetError] = js.undefined
    /**
      * The ID of the EC2 Fleet.
      */
    var FleetId: js.UndefOr[FleetIdentifier] = js.undefined
  }
  
  trait DeleteFleetSuccessItem extends js.Object {
    /**
      * The current state of the EC2 Fleet.
      */
    var CurrentFleetState: js.UndefOr[FleetStateCode] = js.undefined
    /**
      * The ID of the EC2 Fleet.
      */
    var FleetId: js.UndefOr[FleetIdentifier] = js.undefined
    /**
      * The previous state of the EC2 Fleet.
      */
    var PreviousFleetState: js.UndefOr[FleetStateCode] = js.undefined
  }
  
  trait DeleteFleetsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The IDs of the EC2 Fleets.
      */
    var FleetIds: FleetIdSet
    /**
      * Indicates whether to terminate instances for an EC2 Fleet if it is deleted successfully.
      */
    var TerminateInstances: Boolean
  }
  
  trait DeleteFleetsResult extends js.Object {
    /**
      * Information about the EC2 Fleets that are successfully deleted.
      */
    var SuccessfulFleetDeletions: js.UndefOr[DeleteFleetSuccessSet] = js.undefined
    /**
      * Information about the EC2 Fleets that are not successfully deleted.
      */
    var UnsuccessfulFleetDeletions: js.UndefOr[DeleteFleetErrorSet] = js.undefined
  }
  
  trait DeleteFlowLogsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more flow log IDs.
      */
    var FlowLogIds: ValueStringList
  }
  
  trait DeleteFlowLogsResult extends js.Object {
    /**
      * Information about the flow logs that could not be deleted successfully.
      */
    var Unsuccessful: js.UndefOr[UnsuccessfulItemSet] = js.undefined
  }
  
  trait DeleteFpgaImageRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the AFI.
      */
    var FpgaImageId: String
  }
  
  trait DeleteFpgaImageResult extends js.Object {
    /**
      * Is true if the request succeeds, and an error otherwise.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DeleteInternetGatewayRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the internet gateway.
      */
    var InternetGatewayId: String
  }
  
  trait DeleteKeyPairRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The name of the key pair.
      */
    var KeyName: String
  }
  
  trait DeleteLaunchTemplateRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      */
    var LaunchTemplateId: js.UndefOr[String] = js.undefined
    /**
      * The name of the launch template. You must specify either the launch template ID or launch template name in the request.
      */
    var LaunchTemplateName: js.UndefOr[LaunchTemplateName] = js.undefined
  }
  
  trait DeleteLaunchTemplateResult extends js.Object {
    /**
      * Information about the launch template.
      */
    var LaunchTemplate: js.UndefOr[LaunchTemplate] = js.undefined
  }
  
  trait DeleteLaunchTemplateVersionsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      */
    var LaunchTemplateId: js.UndefOr[String] = js.undefined
    /**
      * The name of the launch template. You must specify either the launch template ID or launch template name in the request.
      */
    var LaunchTemplateName: js.UndefOr[LaunchTemplateName] = js.undefined
    /**
      * The version numbers of one or more launch template versions to delete.
      */
    var Versions: VersionStringList
  }
  
  trait DeleteLaunchTemplateVersionsResponseErrorItem extends js.Object {
    /**
      * The ID of the launch template.
      */
    var LaunchTemplateId: js.UndefOr[String] = js.undefined
    /**
      * The name of the launch template.
      */
    var LaunchTemplateName: js.UndefOr[String] = js.undefined
    /**
      * Information about the error.
      */
    var ResponseError: js.UndefOr[ResponseError] = js.undefined
    /**
      * The version number of the launch template.
      */
    var VersionNumber: js.UndefOr[Long] = js.undefined
  }
  
  trait DeleteLaunchTemplateVersionsResponseSuccessItem extends js.Object {
    /**
      * The ID of the launch template.
      */
    var LaunchTemplateId: js.UndefOr[String] = js.undefined
    /**
      * The name of the launch template.
      */
    var LaunchTemplateName: js.UndefOr[String] = js.undefined
    /**
      * The version number of the launch template.
      */
    var VersionNumber: js.UndefOr[Long] = js.undefined
  }
  
  trait DeleteLaunchTemplateVersionsResult extends js.Object {
    /**
      * Information about the launch template versions that were successfully deleted.
      */
    var SuccessfullyDeletedLaunchTemplateVersions: js.UndefOr[DeleteLaunchTemplateVersionsResponseSuccessSet] = js.undefined
    /**
      * Information about the launch template versions that could not be deleted.
      */
    var UnsuccessfullyDeletedLaunchTemplateVersions: js.UndefOr[DeleteLaunchTemplateVersionsResponseErrorSet] = js.undefined
  }
  
  trait DeleteNatGatewayRequest extends js.Object {
    /**
      * The ID of the NAT gateway.
      */
    var NatGatewayId: String
  }
  
  trait DeleteNatGatewayResult extends js.Object {
    /**
      * The ID of the NAT gateway.
      */
    var NatGatewayId: js.UndefOr[String] = js.undefined
  }
  
  trait DeleteNetworkAclEntryRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether the rule is an egress rule.
      */
    var Egress: Boolean
    /**
      * The ID of the network ACL.
      */
    var NetworkAclId: String
    /**
      * The rule number of the entry to delete.
      */
    var RuleNumber: Integer
  }
  
  trait DeleteNetworkAclRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the network ACL.
      */
    var NetworkAclId: String
  }
  
  trait DeleteNetworkInterfacePermissionRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Specify true to remove the permission even if the network interface is attached to an instance.
      */
    var Force: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the network interface permission.
      */
    var NetworkInterfacePermissionId: String
  }
  
  trait DeleteNetworkInterfacePermissionResult extends js.Object {
    /**
      * Returns true if the request succeeds, otherwise returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DeleteNetworkInterfaceRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: String
  }
  
  trait DeletePlacementGroupRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The name of the placement group.
      */
    var GroupName: String
  }
  
  trait DeleteRouteRequest extends js.Object {
    /**
      * The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
      */
    var DestinationCidrBlock: js.UndefOr[String] = js.undefined
    /**
      * The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
      */
    var DestinationIpv6CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the route table.
      */
    var RouteTableId: String
  }
  
  trait DeleteRouteTableRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the route table.
      */
    var RouteTableId: String
  }
  
  trait DeleteSecurityGroupRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the security group. Required for a nondefault VPC.
      */
    var GroupId: js.UndefOr[String] = js.undefined
    /**
      * [EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID.
      */
    var GroupName: js.UndefOr[String] = js.undefined
  }
  
  trait DeleteSnapshotRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the EBS snapshot.
      */
    var SnapshotId: String
  }
  
  trait DeleteSpotDatafeedSubscriptionRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DeleteSubnetRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the subnet.
      */
    var SubnetId: String
  }
  
  trait DeleteTagsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The IDs of one or more resources, separated by spaces. Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.
      */
    var Resources: ResourceIdList
    /**
      * One or more tags to delete. Specify a tag key and an optional tag value to delete specific tags. If you specify a tag key without a tag value, we delete any tag with this key regardless of its value. If you specify a tag key with an empty string as the tag value, we delete the tag only if its value is an empty string. If you omit this parameter, we delete all user-defined tags for the specified resources. We do not delete AWS-generated tags (tags that have the aws: prefix).
      */
    var Tags: js.UndefOr[TagList] = js.undefined
  }
  
  trait DeleteTransitGatewayRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the transit gateway.
      */
    var TransitGatewayId: String
  }
  
  trait DeleteTransitGatewayResult extends js.Object {
    /**
      * Information about the deleted transit gateway.
      */
    var TransitGateway: js.UndefOr[TransitGateway] = js.undefined
  }
  
  trait DeleteTransitGatewayRouteRequest extends js.Object {
    /**
      * The CIDR range for the route. This must match the CIDR for the route exactly.
      */
    var DestinationCidrBlock: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the transit gateway route table.
      */
    var TransitGatewayRouteTableId: String
  }
  
  trait DeleteTransitGatewayRouteResult extends js.Object {
    /**
      * Information about the route.
      */
    var Route: js.UndefOr[TransitGatewayRoute] = js.undefined
  }
  
  trait DeleteTransitGatewayRouteTableRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the transit gateway route table.
      */
    var TransitGatewayRouteTableId: String
  }
  
  trait DeleteTransitGatewayRouteTableResult extends js.Object {
    /**
      * Information about the deleted transit gateway route table.
      */
    var TransitGatewayRouteTable: js.UndefOr[TransitGatewayRouteTable] = js.undefined
  }
  
  trait DeleteTransitGatewayVpcAttachmentRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: String
  }
  
  trait DeleteTransitGatewayVpcAttachmentResult extends js.Object {
    /**
      * Information about the deleted VPC attachment.
      */
    var TransitGatewayVpcAttachment: js.UndefOr[TransitGatewayVpcAttachment] = js.undefined
  }
  
  trait DeleteVolumeRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the volume.
      */
    var VolumeId: String
  }
  
  trait DeleteVpcEndpointConnectionNotificationsRequest extends js.Object {
    /**
      * One or more notification IDs.
      */
    var ConnectionNotificationIds: ValueStringList
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DeleteVpcEndpointConnectionNotificationsResult extends js.Object {
    /**
      * Information about the notifications that could not be deleted successfully.
      */
    var Unsuccessful: js.UndefOr[UnsuccessfulItemSet] = js.undefined
  }
  
  trait DeleteVpcEndpointServiceConfigurationsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The IDs of one or more services.
      */
    var ServiceIds: ValueStringList
  }
  
  trait DeleteVpcEndpointServiceConfigurationsResult extends js.Object {
    /**
      * Information about the service configurations that were not deleted, if applicable.
      */
    var Unsuccessful: js.UndefOr[UnsuccessfulItemSet] = js.undefined
  }
  
  trait DeleteVpcEndpointsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more VPC endpoint IDs.
      */
    var VpcEndpointIds: ValueStringList
  }
  
  trait DeleteVpcEndpointsResult extends js.Object {
    /**
      * Information about the VPC endpoints that were not successfully deleted.
      */
    var Unsuccessful: js.UndefOr[UnsuccessfulItemSet] = js.undefined
  }
  
  trait DeleteVpcPeeringConnectionRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC peering connection.
      */
    var VpcPeeringConnectionId: String
  }
  
  trait DeleteVpcPeeringConnectionResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DeleteVpcRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait DeleteVpnConnectionRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPN connection.
      */
    var VpnConnectionId: String
  }
  
  trait DeleteVpnConnectionRouteRequest extends js.Object {
    /**
      * The CIDR block associated with the local subnet of the customer network.
      */
    var DestinationCidrBlock: String
    /**
      * The ID of the VPN connection.
      */
    var VpnConnectionId: String
  }
  
  trait DeleteVpnGatewayRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the virtual private gateway.
      */
    var VpnGatewayId: String
  }
  
  trait DeprovisionByoipCidrRequest extends js.Object {
    /**
      * The public IPv4 address range, in CIDR notation. The prefix must be the same prefix that you specified when you provisioned the address range.
      */
    var Cidr: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DeprovisionByoipCidrResult extends js.Object {
    /**
      * Information about the address range.
      */
    var ByoipCidr: js.UndefOr[ByoipCidr] = js.undefined
  }
  
  trait DeregisterImageRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the AMI.
      */
    var ImageId: String
  }
  
  trait DescribeAccountAttributesRequest extends js.Object {
    /**
      * One or more account attribute names.
      */
    var AttributeNames: js.UndefOr[AccountAttributeNameStringList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DescribeAccountAttributesResult extends js.Object {
    /**
      * Information about one or more account attributes.
      */
    var AccountAttributes: js.UndefOr[AccountAttributeList] = js.undefined
  }
  
  trait DescribeAddressesRequest extends js.Object {
    /**
      * [EC2-VPC] One or more allocation IDs. Default: Describes all your Elastic IP addresses.
      */
    var AllocationIds: js.UndefOr[AllocationIdList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. Filter names and values are case-sensitive.    allocation-id - [EC2-VPC] The allocation ID for the address.    association-id - [EC2-VPC] The association ID for the address.    domain - Indicates whether the address is for use in EC2-Classic (standard) or in a VPC (vpc).    instance-id - The ID of the instance the address is associated with, if any.    network-interface-id - [EC2-VPC] The ID of the network interface that the address is associated with, if any.    network-interface-owner-id - The AWS account ID of the owner.    private-ip-address - [EC2-VPC] The private IP address associated with the Elastic IP address.    public-ip - The Elastic IP address.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more Elastic IP addresses. Default: Describes all your Elastic IP addresses.
      */
    var PublicIps: js.UndefOr[PublicIpStringList] = js.undefined
  }
  
  trait DescribeAddressesResult extends js.Object {
    /**
      * Information about one or more Elastic IP addresses.
      */
    var Addresses: js.UndefOr[AddressList] = js.undefined
  }
  
  trait DescribeAggregateIdFormatRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DescribeAggregateIdFormatResult extends js.Object {
    /**
      * Information about each resource's ID format.
      */
    var Statuses: js.UndefOr[IdFormatList] = js.undefined
    /**
      * Indicates whether all resource types in the region are configured to use longer IDs. This value is only true if all users are configured to use longer IDs for all resources types in the region.
      */
    var UseLongIdsAggregated: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DescribeAvailabilityZonesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    message - Information about the Availability Zone.    region-name - The name of the region for the Availability Zone (for example, us-east-1).    state - The state of the Availability Zone (available | information | impaired | unavailable).    zone-id - The ID of the Availability Zone (for example, use1-az1).    zone-name - The name of the Availability Zone (for example, us-east-1a).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The IDs of one or more Availability Zones.
      */
    var ZoneIds: js.UndefOr[ZoneIdStringList] = js.undefined
    /**
      * The names of one or more Availability Zones.
      */
    var ZoneNames: js.UndefOr[ZoneNameStringList] = js.undefined
  }
  
  trait DescribeAvailabilityZonesResult extends js.Object {
    /**
      * Information about one or more Availability Zones.
      */
    var AvailabilityZones: js.UndefOr[AvailabilityZoneList] = js.undefined
  }
  
  trait DescribeBundleTasksRequest extends js.Object {
    /**
      * One or more bundle task IDs. Default: Describes all your bundle tasks.
      */
    var BundleIds: js.UndefOr[BundleIdStringList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    bundle-id - The ID of the bundle task.    error-code - If the task failed, the error code returned.    error-message - If the task failed, the error message returned.    instance-id - The ID of the instance.    progress - The level of task completion, as a percentage (for example, 20%).    s3-bucket - The Amazon S3 bucket to store the AMI.    s3-prefix - The beginning of the AMI name.    start-time - The time the task started (for example, 2013-09-15T17:15:20.000Z).    state - The state of the task (pending | waiting-for-shutdown | bundling | storing | cancelling | complete | failed).    update-time - The time of the most recent update for the task.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
  }
  
  trait DescribeBundleTasksResult extends js.Object {
    /**
      * Information about one or more bundle tasks.
      */
    var BundleTasks: js.UndefOr[BundleTaskList] = js.undefined
  }
  
  trait DescribeByoipCidrsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
      */
    var MaxResults: MaxResults
    /**
      * The token for the next page of results.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
  }
  
  trait DescribeByoipCidrsResult extends js.Object {
    /**
      * Information about your address ranges.
      */
    var ByoipCidrs: js.UndefOr[ByoipCidrSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeCapacityReservationsRequest extends js.Object {
    /**
      * The ID of the Capacity Reservation.
      */
    var CapacityReservationIds: js.UndefOr[CapacityReservationIdSet] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeCapacityReservationsResult extends js.Object {
    /**
      * Information about the Capacity Reservations.
      */
    var CapacityReservations: js.UndefOr[CapacityReservationSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeClassicLinkInstancesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    group-id - The ID of a VPC security group that's associated with the instance.    instance-id - The ID of the instance.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC to which the instance is linked.  vpc-id - The ID of the VPC that the instance is linked to.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more instance IDs. Must be instances linked to a VPC through ClassicLink.
      */
    var InstanceIds: js.UndefOr[InstanceIdStringList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000. If MaxResults is given a value larger than 1000, only 1000 results are returned. You cannot specify this parameter and the instance IDs parameter in the same request. Constraint: If the value is greater than 1000, we return only 1000 items.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeClassicLinkInstancesResult extends js.Object {
    /**
      * Information about one or more linked EC2-Classic instances.
      */
    var Instances: js.UndefOr[ClassicLinkInstanceList] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeClientVpnAuthorizationRulesRequest extends js.Object {
    /**
      * The ID of the Client VPN endpoint.
      */
    var ClientVpnEndpointId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. Filter names and values are case-sensitive.
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      */
    var MaxResults: js.UndefOr[MaxResults] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
  }
  
  trait DescribeClientVpnAuthorizationRulesResult extends js.Object {
    /**
      * Information about the authorization rules.
      */
    var AuthorizationRules: js.UndefOr[AuthorizationRuleSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
  }
  
  trait DescribeClientVpnConnectionsRequest extends js.Object {
    /**
      * The ID of the Client VPN endpoint.
      */
    var ClientVpnEndpointId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. Filter names and values are case-sensitive.
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      */
    var MaxResults: js.UndefOr[MaxResults] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
  }
  
  trait DescribeClientVpnConnectionsResult extends js.Object {
    /**
      * Information about the active and terminated client connections.
      */
    var Connections: js.UndefOr[ClientVpnConnectionSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
  }
  
  trait DescribeClientVpnEndpointsRequest extends js.Object {
    /**
      * The ID of the Client VPN endpoint.
      */
    var ClientVpnEndpointIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. Filter names and values are case-sensitive.
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      */
    var MaxResults: js.UndefOr[MaxResults] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
  }
  
  trait DescribeClientVpnEndpointsResult extends js.Object {
    /**
      * Information about the Client VPN endpoints.
      */
    var ClientVpnEndpoints: js.UndefOr[EndpointSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
  }
  
  trait DescribeClientVpnRoutesRequest extends js.Object {
    /**
      * The ID of the Client VPN endpoint.
      */
    var ClientVpnEndpointId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. Filter names and values are case-sensitive.
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      */
    var MaxResults: js.UndefOr[MaxResults] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
  }
  
  trait DescribeClientVpnRoutesResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
    /**
      * Information about the Client VPN endpoint routes.
      */
    var Routes: js.UndefOr[ClientVpnRouteSet] = js.undefined
  }
  
  trait DescribeClientVpnTargetNetworksRequest extends js.Object {
    /**
      * The IDs of the target network associations.
      */
    var AssociationIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The ID of the Client VPN endpoint.
      */
    var ClientVpnEndpointId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. Filter names and values are case-sensitive.
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      */
    var MaxResults: js.UndefOr[MaxResults] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
  }
  
  trait DescribeClientVpnTargetNetworksResult extends js.Object {
    /**
      * Information about the associated target networks.
      */
    var ClientVpnTargetNetworks: js.UndefOr[TargetNetworkSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
  }
  
  trait DescribeConversionTasksRequest extends js.Object {
    /**
      * One or more conversion task IDs.
      */
    var ConversionTaskIds: js.UndefOr[ConversionIdStringList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DescribeConversionTasksResult extends js.Object {
    /**
      * Information about the conversion tasks.
      */
    var ConversionTasks: js.UndefOr[DescribeConversionTaskList] = js.undefined
  }
  
  trait DescribeCustomerGatewaysRequest extends js.Object {
    /**
      * One or more customer gateway IDs. Default: Describes all your customer gateways.
      */
    var CustomerGatewayIds: js.UndefOr[CustomerGatewayIdStringList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    bgp-asn - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).    customer-gateway-id - The ID of the customer gateway.    ip-address - The IP address of the customer gateway's Internet-routable external interface.    state - The state of the customer gateway (pending | available | deleting | deleted).    type - The type of customer gateway. Currently, the only supported type is ipsec.1.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
  }
  
  trait DescribeCustomerGatewaysResult extends js.Object {
    /**
      * Information about one or more customer gateways.
      */
    var CustomerGateways: js.UndefOr[CustomerGatewayList] = js.undefined
  }
  
  trait DescribeDhcpOptionsRequest extends js.Object {
    /**
      * The IDs of one or more DHCP options sets. Default: Describes all your DHCP options sets.
      */
    var DhcpOptionsIds: js.UndefOr[DhcpOptionsIdStringList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    dhcp-options-id - The ID of a DHCP options set.    key - The key for one of the options (for example, domain-name).    value - The value for one of the options.    owner-id - The ID of the AWS account that owns the DHCP options set.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
  }
  
  trait DescribeDhcpOptionsResult extends js.Object {
    /**
      * Information about one or more DHCP options sets.
      */
    var DhcpOptions: js.UndefOr[DhcpOptionsList] = js.undefined
  }
  
  trait DescribeEgressOnlyInternetGatewaysRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more egress-only internet gateway IDs.
      */
    var EgressOnlyInternetGatewayIds: js.UndefOr[EgressOnlyInternetGatewayIdList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000. If MaxResults is given a value larger than 1000, only 1000 results are returned.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeEgressOnlyInternetGatewaysResult extends js.Object {
    /**
      * Information about the egress-only internet gateways.
      */
    var EgressOnlyInternetGateways: js.UndefOr[EgressOnlyInternetGatewayList] = js.undefined
    /**
      * The token to use to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeElasticGpusRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more Elastic Graphics accelerator IDs.
      */
    var ElasticGpuIds: js.UndefOr[ElasticGpuIdSet] = js.undefined
    /**
      * One or more filters.    availability-zone - The Availability Zone in which the Elastic Graphics accelerator resides.    elastic-gpu-health - The status of the Elastic Graphics accelerator (OK | IMPAIRED).    elastic-gpu-state - The state of the Elastic Graphics accelerator (ATTACHED).    elastic-gpu-type - The type of Elastic Graphics accelerator; for example, eg1.medium.    instance-id - The ID of the instance to which the Elastic Graphics accelerator is associated.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to request the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeElasticGpusResult extends js.Object {
    /**
      * Information about the Elastic Graphics accelerators.
      */
    var ElasticGpuSet: js.UndefOr[ElasticGpuSet] = js.undefined
    /**
      * The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeExportTasksRequest extends js.Object {
    /**
      * One or more export task IDs.
      */
    var ExportTaskIds: js.UndefOr[ExportTaskIdStringList] = js.undefined
  }
  
  trait DescribeExportTasksResult extends js.Object {
    /**
      * Information about the export tasks.
      */
    var ExportTasks: js.UndefOr[ExportTaskList] = js.undefined
  }
  
  trait DescribeFleetError extends js.Object {
    /**
      * The error code that indicates why the instance could not be launched. For more information about error codes, see Error Codes.
      */
    var ErrorCode: js.UndefOr[String] = js.undefined
    /**
      * The error message that describes why the instance could not be launched. For more information about error messages, see ee Error Codes.
      */
    var ErrorMessage: js.UndefOr[String] = js.undefined
    /**
      * The launch templates and overrides that were used for launching the instances. Any parameters that you specify in the Overrides override the same parameters in the launch template.
      */
    var LaunchTemplateAndOverrides: js.UndefOr[LaunchTemplateAndOverridesResponse] = js.undefined
    /**
      * Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
      */
    var Lifecycle: js.UndefOr[InstanceLifecycle] = js.undefined
  }
  
  trait DescribeFleetHistoryRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The type of events to describe. By default, all events are described.
      */
    var EventType: js.UndefOr[FleetEventType] = js.undefined
    /**
      * The ID of the EC2 Fleet.
      */
    var FleetId: FleetIdentifier
    /**
      * The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token for the next set of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
      */
    var StartTime: DateTime
  }
  
  trait DescribeFleetHistoryResult extends js.Object {
    /**
      * The ID of the EC Fleet.
      */
    var FleetId: js.UndefOr[FleetIdentifier] = js.undefined
    /**
      * Information about the events in the history of the EC2 Fleet.
      */
    var HistoryRecords: js.UndefOr[HistoryRecordSet] = js.undefined
    /**
      * The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). All records up to this time were retrieved. If nextToken indicates that there are more results, this value is not present.
      */
    var LastEvaluatedTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The token for the next set of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
      */
    var StartTime: js.UndefOr[DateTime] = js.undefined
  }
  
  trait DescribeFleetInstancesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    instance-type - The instance type.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The ID of the EC2 Fleet.
      */
    var FleetId: FleetIdentifier
    /**
      * The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token for the next set of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeFleetInstancesResult extends js.Object {
    /**
      * The running instances. This list is refreshed periodically and might be out of date.
      */
    var ActiveInstances: js.UndefOr[ActiveInstanceSet] = js.undefined
    /**
      * The ID of the EC2 Fleet.
      */
    var FleetId: js.UndefOr[FleetIdentifier] = js.undefined
    /**
      * The token for the next set of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeFleetsInstances extends js.Object {
    /**
      * The IDs of the instances.
      */
    var InstanceIds: js.UndefOr[InstanceIdsSet] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The launch templates and overrides that were used for launching the instances. Any parameters that you specify in the Overrides override the same parameters in the launch template.
      */
    var LaunchTemplateAndOverrides: js.UndefOr[LaunchTemplateAndOverridesResponse] = js.undefined
    /**
      * Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
      */
    var Lifecycle: js.UndefOr[InstanceLifecycle] = js.undefined
    /**
      * The value is Windows for Windows instances; otherwise blank.
      */
    var Platform: js.UndefOr[PlatformValues] = js.undefined
  }
  
  trait DescribeFleetsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    activity-status - The progress of the EC2 Fleet ( error | pending-fulfillment | pending-termination | fulfilled).    excess-capacity-termination-policy - Indicates whether to terminate running instances if the target capacity is decreased below the current EC2 Fleet size (true | false).    fleet-state - The state of the EC2 Fleet (submitted | active | deleted | failed | deleted-running | deleted-terminating | modifying).    replace-unhealthy-instances - Indicates whether EC2 Fleet should replace unhealthy instances (true | false).    type - The type of request (instant | request | maintain).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The ID of the EC2 Fleets.
      */
    var FleetIds: js.UndefOr[FleetIdSet] = js.undefined
    /**
      * The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token for the next set of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeFleetsResult extends js.Object {
    /**
      * Information about the EC2 Fleets.
      */
    var Fleets: js.UndefOr[FleetSet] = js.undefined
    /**
      * The token for the next set of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeFlowLogsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    deliver-log-status - The status of the logs delivery (SUCCESS | FAILED).    log-destination-type - The type of destination to which the flow log publishes data. Possible destination types include cloud-watch-logs and S3.    flow-log-id - The ID of the flow log.    log-group-name - The name of the log group.    resource-id - The ID of the VPC, subnet, or network interface.    traffic-type - The type of traffic (ACCEPT | REJECT | ALL).  
      */
    var Filter: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more flow log IDs.
      */
    var FlowLogIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000. If MaxResults is given a value larger than 1000, only 1000 results are returned. You cannot specify this parameter and the flow log IDs parameter in the same request.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeFlowLogsResult extends js.Object {
    /**
      * Information about the flow logs.
      */
    var FlowLogs: js.UndefOr[FlowLogSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeFpgaImageAttributeRequest extends js.Object {
    /**
      * The AFI attribute.
      */
    var Attribute: FpgaImageAttributeName
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the AFI.
      */
    var FpgaImageId: String
  }
  
  trait DescribeFpgaImageAttributeResult extends js.Object {
    /**
      * Information about the attribute.
      */
    var FpgaImageAttribute: js.UndefOr[FpgaImageAttribute] = js.undefined
  }
  
  trait DescribeFpgaImagesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    create-time - The creation time of the AFI.    fpga-image-id - The FPGA image identifier (AFI ID).    fpga-image-global-id - The global FPGA image identifier (AGFI ID).    name - The name of the AFI.    owner-id - The AWS account ID of the AFI owner.    product-code - The product code.    shell-version - The version of the AWS Shell that was used to create the bitstream.    state - The state of the AFI (pending | failed | available | unavailable).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    update-time - The time of the most recent update.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more AFI IDs.
      */
    var FpgaImageIds: js.UndefOr[FpgaImageIdList] = js.undefined
    /**
      * The maximum number of results to return in a single call.
      */
    var MaxResults: js.UndefOr[MaxResults] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
    /**
      * Filters the AFI by owner. Specify an AWS account ID, self (owner is the sender of the request), or an AWS owner alias (valid values are amazon | aws-marketplace).
      */
    var Owners: js.UndefOr[OwnerStringList] = js.undefined
  }
  
  trait DescribeFpgaImagesResult extends js.Object {
    /**
      * Information about one or more FPGA images.
      */
    var FpgaImages: js.UndefOr[FpgaImageList] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
  }
  
  trait DescribeHostReservationOfferingsRequest extends js.Object {
    /**
      * One or more filters.    instance-family - The instance family of the offering (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).  
      */
    var Filter: js.UndefOr[FilterList] = js.undefined
    /**
      * This is the maximum duration of the reservation to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.
      */
    var MaxDuration: js.UndefOr[Integer] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.
      */
    var MinDuration: js.UndefOr[Integer] = js.undefined
    /**
      * The token to use to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The ID of the reservation offering.
      */
    var OfferingId: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeHostReservationOfferingsResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the offerings.
      */
    var OfferingSet: js.UndefOr[HostOfferingSet] = js.undefined
  }
  
  trait DescribeHostReservationsRequest extends js.Object {
    /**
      * One or more filters.    instance-family - The instance family (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).    state - The state of the reservation (payment-pending | payment-failed | active | retired).  
      */
    var Filter: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more host reservation IDs.
      */
    var HostReservationIdSet: js.UndefOr[HostReservationIdSet] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to use to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeHostReservationsResult extends js.Object {
    /**
      * Details about the reservation's configuration.
      */
    var HostReservationSet: js.UndefOr[HostReservationSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeHostsRequest extends js.Object {
    /**
      * One or more filters.    auto-placement - Whether auto-placement is enabled or disabled (on | off).    availability-zone - The Availability Zone of the host.    client-token - The idempotency token that you provided when you allocated the host.    host-reservation-id - The ID of the reservation assigned to this host.    instance-type - The instance type size that the Dedicated Host is configured to support.    state - The allocation state of the Dedicated Host (available | under-assessment | permanent-failure | released | released-permanent-failure).    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
      */
    var Filter: js.UndefOr[FilterList] = js.undefined
    /**
      * The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.
      */
    var HostIds: js.UndefOr[RequestHostIdList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error. You cannot specify this parameter and the host IDs parameter in the same request.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeHostsResult extends js.Object {
    /**
      * Information about the Dedicated Hosts.
      */
    var Hosts: js.UndefOr[HostList] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeIamInstanceProfileAssociationsRequest extends js.Object {
    /**
      * One or more IAM instance profile associations.
      */
    var AssociationIds: js.UndefOr[AssociationIdList] = js.undefined
    /**
      * One or more filters.    instance-id - The ID of the instance.    state - The state of the association (associating | associated | disassociating | disassociated).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[MaxResults] = js.undefined
    /**
      * The token to request the next page of results.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
  }
  
  trait DescribeIamInstanceProfileAssociationsResult extends js.Object {
    /**
      * Information about one or more IAM instance profile associations.
      */
    var IamInstanceProfileAssociations: js.UndefOr[IamInstanceProfileAssociationSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
  }
  
  trait DescribeIdFormatRequest extends js.Object {
    /**
      * The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway 
      */
    var Resource: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeIdFormatResult extends js.Object {
    /**
      * Information about the ID format for the resource.
      */
    var Statuses: js.UndefOr[IdFormatList] = js.undefined
  }
  
  trait DescribeIdentityIdFormatRequest extends js.Object {
    /**
      * The ARN of the principal, which can be an IAM role, IAM user, or the root user.
      */
    var PrincipalArn: String
    /**
      * The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway 
      */
    var Resource: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeIdentityIdFormatResult extends js.Object {
    /**
      * Information about the ID format for the resources.
      */
    var Statuses: js.UndefOr[IdFormatList] = js.undefined
  }
  
  trait DescribeImageAttributeRequest extends js.Object {
    /**
      * The AMI attribute.  Note: Depending on your account privileges, the blockDeviceMapping attribute may return a Client.AuthFailure error. If this happens, use DescribeImages to get information about the block device mapping for the AMI.
      */
    var Attribute: ImageAttributeName
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the AMI.
      */
    var ImageId: String
  }
  
  trait DescribeImagesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Scopes the images by users with explicit launch permissions. Specify an AWS account ID, self (the sender of the request), or all (public AMIs).
      */
    var ExecutableUsers: js.UndefOr[ExecutableByStringList] = js.undefined
    /**
      * One or more filters.    architecture - The image architecture (i386 | x86_64).    block-device-mapping.delete-on-termination - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.snapshot-id - The ID of the snapshot used for the EBS volume.    block-device-mapping.volume-size - The volume size of the EBS volume, in GiB.    block-device-mapping.volume-type - The volume type of the EBS volume (gp2 | io1 | st1 | sc1 | standard).    block-device-mapping.encrypted - A Boolean that indicates whether the EBS volume is encrypted.    description - The description of the image (provided during image creation).    ena-support - A Boolean that indicates whether enhanced networking with ENA is enabled.    hypervisor - The hypervisor type (ovm | xen).    image-id - The ID of the image.    image-type - The image type (machine | kernel | ramdisk).    is-public - A Boolean that indicates whether the image is public.    kernel-id - The kernel ID.    manifest-location - The location of the image manifest.    name - The name of the AMI (provided during image creation).    owner-alias - String value from an Amazon-maintained list (amazon | aws-marketplace | microsoft) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.    owner-id - The AWS account ID of the image owner.    platform - The platform. To only list Windows-based AMIs, use windows.    product-code - The product code.    product-code.type - The type of the product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    state - The state of the image (available | pending | failed).    state-reason-code - The reason code for the state change.    state-reason-message - The message for the state change.    sriov-net-support - A value of simple indicates that enhanced networking with the Intel 82599 VF interface is enabled.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    virtualization-type - The virtualization type (paravirtual | hvm).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more image IDs. Default: Describes all images available to you.
      */
    var ImageIds: js.UndefOr[ImageIdStringList] = js.undefined
    /**
      * Filters the images by the owner. Specify an AWS account ID, self (owner is the sender of the request), or an AWS owner alias (valid values are amazon | aws-marketplace | microsoft). Omitting this option returns all images for which you have launch permissions, regardless of ownership.
      */
    var Owners: js.UndefOr[OwnerStringList] = js.undefined
  }
  
  trait DescribeImagesResult extends js.Object {
    /**
      * Information about one or more images.
      */
    var Images: js.UndefOr[ImageList] = js.undefined
  }
  
  trait DescribeImportImageTasksRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Filter tasks using the task-state filter and one of the following values: active, completed, deleting, deleted.
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * A list of import image task IDs.
      */
    var ImportTaskIds: js.UndefOr[ImportTaskIdList] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * A token that indicates the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeImportImageTasksResult extends js.Object {
    /**
      * A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days.
      */
    var ImportImageTasks: js.UndefOr[ImportImageTaskList] = js.undefined
    /**
      * The token to use to get the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeImportSnapshotTasksRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * A list of import snapshot task IDs.
      */
    var ImportTaskIds: js.UndefOr[ImportTaskIdList] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * A token that indicates the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeImportSnapshotTasksResult extends js.Object {
    /**
      * A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days.
      */
    var ImportSnapshotTasks: js.UndefOr[ImportSnapshotTaskList] = js.undefined
    /**
      * The token to use to get the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeInstanceAttributeRequest extends js.Object {
    /**
      * The instance attribute. Note: The enaSupport attribute is not supported at this time.
      */
    var Attribute: InstanceAttributeName
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: String
  }
  
  trait DescribeInstanceCreditSpecificationsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    instance-id - The ID of the instance.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more instance IDs. Default: Describes all your instances. Constraints: Maximum 1000 explicitly specified instance IDs.
      */
    var InstanceIds: js.UndefOr[InstanceIdStringList] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeInstanceCreditSpecificationsResult extends js.Object {
    /**
      * Information about the credit option for CPU usage of an instance.
      */
    var InstanceCreditSpecifications: js.UndefOr[InstanceCreditSpecificationList] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeInstanceStatusRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    availability-zone - The Availability Zone of the instance.    event.code - The code for the scheduled event (instance-reboot | system-reboot | system-maintenance | instance-retirement | instance-stop).    event.description - A description of the event.    event.not-after - The latest end time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before - The earliest start time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    instance-state-code - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-status.reachability - Filters on instance status where the name is reachability (passed | failed | initializing | insufficient-data).    instance-status.status - The status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    system-status.reachability - Filters on system status where the name is reachability (passed | failed | initializing | insufficient-data).    system-status.status - The system status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * When true, includes the health status for all instances. When false, includes the health status for running instances only. Default: false 
      */
    var IncludeAllInstances: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs.
      */
    var InstanceIds: js.UndefOr[InstanceIdStringList] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeInstanceStatusResult extends js.Object {
    /**
      * One or more instance status descriptions.
      */
    var InstanceStatuses: js.UndefOr[InstanceStatusList] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeInstancesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    affinity - The affinity setting for an instance running on a Dedicated Host (default | host).    architecture - The instance architecture (i386 | x86_64).    availability-zone - The Availability Zone of the instance.    block-device-mapping.attach-time - The attach time for an EBS volume mapped to the instance, for example, 2010-09-15T17:15:20.000Z.    block-device-mapping.delete-on-termination - A Boolean that indicates whether the EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.status - The status for the EBS volume (attaching | attached | detaching | detached).    block-device-mapping.volume-id - The volume ID of the EBS volume.    client-token - The idempotency token you provided when you launched the instance.    dns-name - The public DNS name of the instance.    group-id - The ID of the security group for the instance. EC2-Classic only.    group-name - The name of the security group for the instance. EC2-Classic only.    hibernation-options.configured - A Boolean that indicates whether the instance is enabled for hibernation. A value of true means that the instance is enabled for hibernation.     host-id - The ID of the Dedicated Host on which the instance is running, if applicable.    hypervisor - The hypervisor type of the instance (ovm | xen).    iam-instance-profile.arn - The instance profile associated with the instance. Specified as an ARN.    image-id - The ID of the image used to launch the instance.    instance-id - The ID of the instance.    instance-lifecycle - Indicates whether this is a Spot Instance or a Scheduled Instance (spot | scheduled).    instance-state-code - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t2.micro).    instance.group-id - The ID of the security group for the instance.     instance.group-name - The name of the security group for the instance.     ip-address - The public IPv4 address of the instance.    kernel-id - The kernel ID.    key-name - The name of the key pair used when the instance was launched.    launch-index - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on).     launch-time - The time when the instance was launched.    monitoring-state - Indicates whether detailed monitoring is enabled (disabled | enabled).    network-interface.addresses.private-ip-address - The private IPv4 address associated with the network interface.    network-interface.addresses.primary - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.    network-interface.addresses.association.public-ip - The ID of the association of an Elastic IP address (IPv4) with a network interface.    network-interface.addresses.association.ip-owner-id - The owner ID of the private IPv4 address associated with the network interface.    network-interface.association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    network-interface.association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    network-interface.association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    network-interface.association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    network-interface.attachment.attachment-id - The ID of the interface attachment.    network-interface.attachment.instance-id - The ID of the instance to which the network interface is attached.    network-interface.attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    network-interface.attachment.device-index - The device index to which the network interface is attached.    network-interface.attachment.status - The status of the attachment (attaching | attached | detaching | detached).    network-interface.attachment.attach-time - The time that the network interface was attached to an instance.    network-interface.attachment.delete-on-termination - Specifies whether the attachment is deleted when an instance is terminated.    network-interface.availability-zone - The Availability Zone for the network interface.    network-interface.description - The description of the network interface.    network-interface.group-id - The ID of a security group associated with the network interface.    network-interface.group-name - The name of a security group associated with the network interface.    network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated with the network interface.    network-interface.mac-address - The MAC address of the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.owner-id - The ID of the owner of the network interface.    network-interface.private-dns-name - The private DNS name of the network interface.    network-interface.requester-id - The requester ID for the network interface.    network-interface.requester-managed - Indicates whether the network interface is being managed by AWS.    network-interface.status - The status of the network interface (available) | in-use).    network-interface.source-dest-check - Whether the network interface performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.    network-interface.subnet-id - The ID of the subnet for the network interface.    network-interface.vpc-id - The ID of the VPC for the network interface.    owner-id - The AWS account ID of the instance owner.    placement-group-name - The name of the placement group for the instance.    placement-partition-number - The partition in which the instance is located.    platform - The platform. Use windows if you have Windows instances; otherwise, leave blank.    private-dns-name - The private IPv4 DNS name of the instance.    private-ip-address - The private IPv4 address of the instance.    product-code - The product code associated with the AMI used to launch the instance.    product-code.type - The type of product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    reason - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.    requester-id - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).    reservation-id - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-dest-check - Indicates whether the instance performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform network address translation (NAT) in your VPC.     spot-instance-request-id - The ID of the Spot Instance request.    state-reason-code - The reason code for the state change.    state-reason-message - A message that describes the state change.    subnet-id - The ID of the subnet for the instance.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    tenancy - The tenancy of an instance (dedicated | default | host).    virtualization-type - The virtualization type of the instance (paravirtual | hvm).    vpc-id - The ID of the VPC that the instance is running in.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more instance IDs. Default: Describes all your instances.
      */
    var InstanceIds: js.UndefOr[InstanceIdStringList] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to request the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeInstancesResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Zero or more reservations.
      */
    var Reservations: js.UndefOr[ReservationList] = js.undefined
  }
  
  trait DescribeInternetGatewaysRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    attachment.state - The current state of the attachment between the gateway and the VPC (available). Present only if a VPC is attached.    attachment.vpc-id - The ID of an attached VPC.    internet-gateway-id - The ID of the Internet gateway.    owner-id - The ID of the AWS account that owns the internet gateway.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more internet gateway IDs. Default: Describes all your internet gateways.
      */
    var InternetGatewayIds: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait DescribeInternetGatewaysResult extends js.Object {
    /**
      * Information about one or more internet gateways.
      */
    var InternetGateways: js.UndefOr[InternetGatewayList] = js.undefined
  }
  
  trait DescribeKeyPairsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    fingerprint - The fingerprint of the key pair.    key-name - The name of the key pair.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more key pair names. Default: Describes all your key pairs.
      */
    var KeyNames: js.UndefOr[KeyNameStringList] = js.undefined
  }
  
  trait DescribeKeyPairsResult extends js.Object {
    /**
      * Information about one or more key pairs.
      */
    var KeyPairs: js.UndefOr[KeyPairList] = js.undefined
  }
  
  trait DescribeLaunchTemplateVersionsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    create-time - The time the launch template version was created.    ebs-optimized - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.    iam-instance-profile - The ARN of the IAM instance profile.    image-id - The ID of the AMI.    instance-type - The instance type.    is-default-version - A boolean that indicates whether the launch template version is the default version.    kernel-id - The kernel ID.    ram-disk-id - The RAM disk ID.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      */
    var LaunchTemplateId: js.UndefOr[String] = js.undefined
    /**
      * The name of the launch template. You must specify either the launch template ID or launch template name in the request.
      */
    var LaunchTemplateName: js.UndefOr[LaunchTemplateName] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The version number up to which to describe launch template versions.
      */
    var MaxVersion: js.UndefOr[String] = js.undefined
    /**
      * The version number after which to describe launch template versions.
      */
    var MinVersion: js.UndefOr[String] = js.undefined
    /**
      * The token to request the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * One or more versions of the launch template.
      */
    var Versions: js.UndefOr[VersionStringList] = js.undefined
  }
  
  trait DescribeLaunchTemplateVersionsResult extends js.Object {
    /**
      * Information about the launch template versions.
      */
    var LaunchTemplateVersions: js.UndefOr[LaunchTemplateVersionSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeLaunchTemplatesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    create-time - The time the launch template was created.    launch-template-name - The name of the launch template.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more launch template IDs.
      */
    var LaunchTemplateIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * One or more launch template names.
      */
    var LaunchTemplateNames: js.UndefOr[LaunchTemplateNameStringList] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to request the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeLaunchTemplatesResult extends js.Object {
    /**
      * Information about the launch templates.
      */
    var LaunchTemplates: js.UndefOr[LaunchTemplateSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeMovingAddressesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    moving-status - The status of the Elastic IP address (MovingToVpc | RestoringToClassic).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value outside of this range, an error is returned. Default: If no value is provided, the default is 1000.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token for the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * One or more Elastic IP addresses.
      */
    var PublicIps: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait DescribeMovingAddressesResult extends js.Object {
    /**
      * The status for each Elastic IP address.
      */
    var MovingAddressStatuses: js.UndefOr[MovingAddressStatusSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeNatGatewaysRequest extends js.Object {
    /**
      * One or more filters.    nat-gateway-id - The ID of the NAT gateway.    state - The state of the NAT gateway (pending | failed | available | deleting | deleted).    subnet-id - The ID of the subnet in which the NAT gateway resides.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC in which the NAT gateway resides.  
      */
    var Filter: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value specified is greater than 1000, we return only 1000 items.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * One or more NAT gateway IDs.
      */
    var NatGatewayIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeNatGatewaysResult extends js.Object {
    /**
      * Information about the NAT gateways.
      */
    var NatGateways: js.UndefOr[NatGatewayList] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeNetworkAclsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    association.association-id - The ID of an association ID for the ACL.    association.network-acl-id - The ID of the network ACL involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    default - Indicates whether the ACL is the default network ACL for the VPC.    entry.cidr - The IPv4 CIDR range specified in the entry.    entry.icmp.code - The ICMP code specified in the entry, if any.    entry.icmp.type - The ICMP type specified in the entry, if any.    entry.ipv6-cidr - The IPv6 CIDR range specified in the entry.    entry.port-range.from - The start of the port range specified in the entry.     entry.port-range.to - The end of the port range specified in the entry.     entry.protocol - The protocol specified in the entry (tcp | udp | icmp or a protocol number).    entry.rule-action - Allows or denies the matching traffic (allow | deny).    entry.rule-number - The number of an entry (in other words, rule) in the set of ACL entries.    network-acl-id - The ID of the network ACL.    owner-id - The ID of the AWS account that owns the network ACL.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the network ACL.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more network ACL IDs. Default: Describes all your network ACLs.
      */
    var NetworkAclIds: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait DescribeNetworkAclsResult extends js.Object {
    /**
      * Information about one or more network ACLs.
      */
    var NetworkAcls: js.UndefOr[NetworkAclList] = js.undefined
  }
  
  trait DescribeNetworkInterfaceAttributeRequest extends js.Object {
    /**
      * The attribute of the network interface. This parameter is required.
      */
    var Attribute: js.UndefOr[NetworkInterfaceAttribute] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: String
  }
  
  trait DescribeNetworkInterfaceAttributeResult extends js.Object {
    /**
      * The attachment (if any) of the network interface.
      */
    var Attachment: js.UndefOr[NetworkInterfaceAttachment] = js.undefined
    /**
      * The description of the network interface.
      */
    var Description: js.UndefOr[AttributeValue] = js.undefined
    /**
      * The security groups associated with the network interface.
      */
    var Groups: js.UndefOr[GroupIdentifierList] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether source/destination checking is enabled.
      */
    var SourceDestCheck: js.UndefOr[AttributeBooleanValue] = js.undefined
  }
  
  trait DescribeNetworkInterfacePermissionsRequest extends js.Object {
    /**
      * One or more filters.    network-interface-permission.network-interface-permission-id - The ID of the permission.    network-interface-permission.network-interface-id - The ID of the network interface.    network-interface-permission.aws-account-id - The AWS account ID.    network-interface-permission.aws-service - The AWS service.    network-interface-permission.permission - The type of permission (INSTANCE-ATTACH | EIP-ASSOCIATE).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. If this parameter is not specified, up to 50 results are returned by default.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * One or more network interface permission IDs.
      */
    var NetworkInterfacePermissionIds: js.UndefOr[NetworkInterfacePermissionIdList] = js.undefined
    /**
      * The token to request the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeNetworkInterfacePermissionsResult extends js.Object {
    /**
      * The network interface permissions.
      */
    var NetworkInterfacePermissions: js.UndefOr[NetworkInterfacePermissionList] = js.undefined
    /**
      * The token to use to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeNetworkInterfacesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    addresses.private-ip-address - The private IPv4 addresses associated with the network interface.    addresses.primary - Whether the private IPv4 address is the primary IP address associated with the network interface.     addresses.association.public-ip - The association ID returned when the network interface was associated with the Elastic IP address (IPv4).    addresses.association.owner-id - The owner ID of the addresses associated with the network interface.    association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    association.public-dns-name - The public DNS name for the network interface (IPv4).    attachment.attachment-id - The ID of the interface attachment.    attachment.attach.time - The time that the network interface was attached to an instance.    attachment.delete-on-termination - Indicates whether the attachment is deleted when an instance is terminated.    attachment.device-index - The device index to which the network interface is attached.    attachment.instance-id - The ID of the instance to which the network interface is attached.    attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    attachment.nat-gateway-id - The ID of the NAT gateway to which the network interface is attached.    attachment.status - The status of the attachment (attaching | attached | detaching | detached).    availability-zone - The Availability Zone of the network interface.    description - The description of the network interface.    group-id - The ID of a security group associated with the network interface.    group-name - The name of a security group associated with the network interface.    ipv6-addresses.ipv6-address - An IPv6 address associated with the network interface.    mac-address - The MAC address of the network interface.    network-interface-id - The ID of the network interface.    owner-id - The AWS account ID of the network interface owner.    private-ip-address - The private IPv4 address or addresses of the network interface.    private-dns-name - The private DNS name of the network interface (IPv4).    requester-id - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).    requester-managed - Indicates whether the network interface is being managed by an AWS service (for example, AWS Management Console, Auto Scaling, and so on).    source-desk-check - Indicates whether the network interface performs source/destination checking. A value of true means checking is enabled, and false means checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.     status - The status of the network interface. If the network interface is not attached to an instance, the status is available; if a network interface is attached to an instance the status is in-use.    subnet-id - The ID of the subnet for the network interface.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the network interface.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * One or more network interface IDs. Default: Describes all your network interfaces.
      */
    var NetworkInterfaceIds: js.UndefOr[NetworkInterfaceIdList] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeNetworkInterfacesResult extends js.Object {
    /**
      * Information about one or more network interfaces.
      */
    var NetworkInterfaces: js.UndefOr[NetworkInterfaceList] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribePlacementGroupsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    group-name - The name of the placement group.    state - The state of the placement group (pending | available | deleting | deleted).    strategy - The strategy of the placement group (cluster | spread | partition).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more placement group names. Default: Describes all your placement groups, or only those otherwise specified.
      */
    var GroupNames: js.UndefOr[PlacementGroupStringList] = js.undefined
  }
  
  trait DescribePlacementGroupsResult extends js.Object {
    /**
      * One or more placement groups.
      */
    var PlacementGroups: js.UndefOr[PlacementGroupList] = js.undefined
  }
  
  trait DescribePrefixListsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    prefix-list-id: The ID of a prefix list.    prefix-list-name: The name of a prefix list.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value specified is greater than 1000, we return only 1000 items.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token for the next set of items to return. (You received this token from a prior call.)
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * One or more prefix list IDs.
      */
    var PrefixListIds: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait DescribePrefixListsResult extends js.Object {
    /**
      * The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * All available prefix lists.
      */
    var PrefixLists: js.UndefOr[PrefixListSet] = js.undefined
  }
  
  trait DescribePrincipalIdFormatRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. 
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to request the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway 
      */
    var Resources: js.UndefOr[ResourceList] = js.undefined
  }
  
  trait DescribePrincipalIdFormatResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the ID format settings for the ARN.
      */
    var Principals: js.UndefOr[PrincipalIdFormatList] = js.undefined
  }
  
  trait DescribePublicIpv4PoolsRequest extends js.Object {
    /**
      * The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
      */
    var MaxResults: js.UndefOr[PoolMaxResults] = js.undefined
    /**
      * The token for the next page of results.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
    /**
      * The IDs of the address pools.
      */
    var PoolIds: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait DescribePublicIpv4PoolsResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the address pools.
      */
    var PublicIpv4Pools: js.UndefOr[PublicIpv4PoolSet] = js.undefined
  }
  
  trait DescribeRegionsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    endpoint - The endpoint of the region (for example, ec2.us-east-1.amazonaws.com).    region-name - The name of the region (for example, us-east-1).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The names of one or more regions.
      */
    var RegionNames: js.UndefOr[RegionNameStringList] = js.undefined
  }
  
  trait DescribeRegionsResult extends js.Object {
    /**
      * Information about one or more regions.
      */
    var Regions: js.UndefOr[RegionList] = js.undefined
  }
  
  trait DescribeReservedInstancesListingsRequest extends js.Object {
    /**
      * One or more filters.    reserved-instances-id - The ID of the Reserved Instances.    reserved-instances-listing-id - The ID of the Reserved Instances listing.    status - The status of the Reserved Instance listing (pending | active | cancelled | closed).    status-message - The reason for the status.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more Reserved Instance IDs.
      */
    var ReservedInstancesId: js.UndefOr[String] = js.undefined
    /**
      * One or more Reserved Instance listing IDs.
      */
    var ReservedInstancesListingId: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeReservedInstancesListingsResult extends js.Object {
    /**
      * Information about the Reserved Instance listing.
      */
    var ReservedInstancesListings: js.UndefOr[ReservedInstancesListingList] = js.undefined
  }
  
  trait DescribeReservedInstancesModificationsRequest extends js.Object {
    /**
      * One or more filters.    client-token - The idempotency token for the modification request.    create-date - The time when the modification request was created.    effective-date - The time when the modification becomes effective.    modification-result.reserved-instances-id - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is fulfilled.    modification-result.target-configuration.availability-zone - The Availability Zone for the new Reserved Instances.    modification-result.target-configuration.instance-count  - The number of new Reserved Instances.    modification-result.target-configuration.instance-type - The instance type of the new Reserved Instances.    modification-result.target-configuration.platform - The network platform of the new Reserved Instances (EC2-Classic | EC2-VPC).    reserved-instances-id - The ID of the Reserved Instances modified.    reserved-instances-modification-id - The ID of the modification request.    status - The status of the Reserved Instances modification request (processing | fulfilled | failed).    status-message - The reason for the status.    update-date - The time when the modification request was last updated.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * IDs for the submitted modification request.
      */
    var ReservedInstancesModificationIds: js.UndefOr[ReservedInstancesModificationIdStringList] = js.undefined
  }
  
  trait DescribeReservedInstancesModificationsResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The Reserved Instance modification information.
      */
    var ReservedInstancesModifications: js.UndefOr[ReservedInstancesModificationList] = js.undefined
  }
  
  trait DescribeReservedInstancesOfferingsRequest extends js.Object {
    /**
      * The Availability Zone in which the Reserved Instance can be used.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (for example, one year or three years), in seconds (31536000 | 94608000).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    marketplace - Set to true to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both AWS and the Reserved Instance Marketplace are listed.    product-description - The Reserved Instance product platform description. Instances that include (Amazon VPC) in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC. (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux | SUSE Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise Linux (Amazon VPC) | Windows | Windows (Amazon VPC) | Windows with SQL Server Standard | Windows with SQL Server Standard (Amazon VPC) | Windows with SQL Server Web |  Windows with SQL Server Web (Amazon VPC) | Windows with SQL Server Enterprise | Windows with SQL Server Enterprise (Amazon VPC))     reserved-instances-offering-id - The Reserved Instances offering ID.    scope - The scope of the Reserved Instance (Availability Zone or Region).    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * Include Reserved Instance Marketplace offerings in the response.
      */
    var IncludeMarketplace: js.UndefOr[Boolean] = js.undefined
    /**
      * The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of dedicated is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).  Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default 
      */
    var InstanceTenancy: js.UndefOr[Tenancy] = js.undefined
    /**
      * The instance type that the reservation will cover (for example, m1.small). For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The maximum duration (in seconds) to filter when searching for offerings. Default: 94608000 (3 years)
      */
    var MaxDuration: js.UndefOr[Long] = js.undefined
    /**
      * The maximum number of instances to filter when searching for offerings. Default: 20
      */
    var MaxInstanceCount: js.UndefOr[Integer] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. The maximum is 100. Default: 100
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The minimum duration (in seconds) to filter when searching for offerings. Default: 2592000 (1 month)
      */
    var MinDuration: js.UndefOr[Long] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The offering class of the Reserved Instance. Can be standard or convertible.
      */
    var OfferingClass: js.UndefOr[OfferingClassType] = js.undefined
    /**
      * The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the Medium Utilization Reserved Instance offering type. 
      */
    var OfferingType: js.UndefOr[OfferingTypeValues] = js.undefined
    /**
      * The Reserved Instance product platform description. Instances that include (Amazon VPC) in the description are for use with Amazon VPC.
      */
    var ProductDescription: js.UndefOr[RIProductDescription] = js.undefined
    /**
      * One or more Reserved Instances offering IDs.
      */
    var ReservedInstancesOfferingIds: js.UndefOr[ReservedInstancesOfferingIdStringList] = js.undefined
  }
  
  trait DescribeReservedInstancesOfferingsResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * A list of Reserved Instances offerings.
      */
    var ReservedInstancesOfferings: js.UndefOr[ReservedInstancesOfferingList] = js.undefined
  }
  
  trait DescribeReservedInstancesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (one year or three years), in seconds (31536000 | 94608000).    end - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    scope - The scope of the Reserved Instance (Region or Availability Zone).    product-description - The Reserved Instance product platform description. Instances that include (Amazon VPC) in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux | SUSE Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise Linux (Amazon VPC) | Windows | Windows (Amazon VPC) | Windows with SQL Server Standard | Windows with SQL Server Standard (Amazon VPC) | Windows with SQL Server Web | Windows with SQL Server Web (Amazon VPC) | Windows with SQL Server Enterprise | Windows with SQL Server Enterprise (Amazon VPC)).    reserved-instances-id - The ID of the Reserved Instance.    start - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).    state - The state of the Reserved Instance (payment-pending | active | payment-failed | retired).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * Describes whether the Reserved Instance is Standard or Convertible.
      */
    var OfferingClass: js.UndefOr[OfferingClassType] = js.undefined
    /**
      * The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the Medium Utilization Reserved Instance offering type.
      */
    var OfferingType: js.UndefOr[OfferingTypeValues] = js.undefined
    /**
      * One or more Reserved Instance IDs. Default: Describes all your Reserved Instances, or only those otherwise specified.
      */
    var ReservedInstancesIds: js.UndefOr[ReservedInstancesIdStringList] = js.undefined
  }
  
  trait DescribeReservedInstancesResult extends js.Object {
    /**
      * A list of Reserved Instances.
      */
    var ReservedInstances: js.UndefOr[ReservedInstancesList] = js.undefined
  }
  
  trait DescribeRouteTablesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    association.route-table-association-id - The ID of an association ID for the route table.    association.route-table-id - The ID of the route table involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    association.main - Indicates whether the route table is the main route table for the VPC (true | false). Route tables that do not have an association ID are not returned in the response.    owner-id - The ID of the AWS account that owns the route table.    route-table-id - The ID of the route table.    route.destination-cidr-block - The IPv4 CIDR range specified in a route in the table.    route.destination-ipv6-cidr-block - The IPv6 CIDR range specified in a route in the route table.    route.destination-prefix-list-id - The ID (prefix) of the AWS service specified in a route in the table.    route.egress-only-internet-gateway-id - The ID of an egress-only Internet gateway specified in a route in the route table.    route.gateway-id - The ID of a gateway specified in a route in the table.    route.instance-id - The ID of an instance specified in a route in the table.    route.nat-gateway-id - The ID of a NAT gateway.    route.transit-gateway-id - The ID of a transit gateway.    route.origin - Describes how the route was created. CreateRouteTable indicates that the route was automatically created when the route table was created; CreateRoute indicates that the route was manually added to the route table; EnableVgwRoutePropagation indicates that the route was propagated by route propagation.    route.state - The state of a route in the route table (active | blackhole). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, the specified NAT instance has been terminated, and so on).    route.vpc-peering-connection-id - The ID of a VPC peering connection specified in a route in the table.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    transit-gateway-id - The ID of a transit gateway.    vpc-id - The ID of the VPC for the route table.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 100.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * One or more route table IDs. Default: Describes all your route tables.
      */
    var RouteTableIds: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait DescribeRouteTablesResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about one or more route tables.
      */
    var RouteTables: js.UndefOr[RouteTableList] = js.undefined
  }
  
  trait DescribeScheduledInstanceAvailabilityRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    network-platform - The network platform (EC2-Classic or EC2-VPC).    platform - The platform (Linux/UNIX or Windows).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The time period for the first schedule to start.
      */
    var FirstSlotStartTimeRange: SlotDateTimeRangeRequest
    /**
      * The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The maximum available duration, in hours. This value must be greater than MinSlotDurationInHours and less than 1,720.
      */
    var MaxSlotDurationInHours: js.UndefOr[Integer] = js.undefined
    /**
      * The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.
      */
    var MinSlotDurationInHours: js.UndefOr[Integer] = js.undefined
    /**
      * The token for the next set of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The schedule recurrence.
      */
    var Recurrence: ScheduledInstanceRecurrenceRequest
  }
  
  trait DescribeScheduledInstanceAvailabilityResult extends js.Object {
    /**
      * The token required to retrieve the next set of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the available Scheduled Instances.
      */
    var ScheduledInstanceAvailabilitySet: js.UndefOr[ScheduledInstanceAvailabilitySet] = js.undefined
  }
  
  trait DescribeScheduledInstancesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    network-platform - The network platform (EC2-Classic or EC2-VPC).    platform - The platform (Linux/UNIX or Windows).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token for the next set of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * One or more Scheduled Instance IDs.
      */
    var ScheduledInstanceIds: js.UndefOr[ScheduledInstanceIdRequestSet] = js.undefined
    /**
      * The time period for the first schedule to start.
      */
    var SlotStartTimeRange: js.UndefOr[SlotStartTimeRangeRequest] = js.undefined
  }
  
  trait DescribeScheduledInstancesResult extends js.Object {
    /**
      * The token required to retrieve the next set of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the Scheduled Instances.
      */
    var ScheduledInstanceSet: js.UndefOr[ScheduledInstanceSet] = js.undefined
  }
  
  trait DescribeSecurityGroupReferencesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more security group IDs in your account.
      */
    var GroupId: GroupIds
  }
  
  trait DescribeSecurityGroupReferencesResult extends js.Object {
    /**
      * Information about the VPCs with the referencing security groups.
      */
    var SecurityGroupReferenceSet: js.UndefOr[SecurityGroupReferences] = js.undefined
  }
  
  trait DescribeSecurityGroupsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.    description - The description of the security group.    egress.ip-permission.cidr - An IPv4 CIDR block for an outbound security group rule.    egress.ip-permission.from-port - For an outbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    egress.ip-permission.group-id - The ID of a security group that has been referenced in an outbound security group rule.    egress.ip-permission.group-name - The name of a security group that has been referenced in an outbound security group rule.    egress.ip-permission.ipv6-cidr - An IPv6 CIDR block for an outbound security group rule.    egress.ip-permission.prefix-list-id - The ID (prefix) of the AWS service to which a security group rule allows outbound access.    egress.ip-permission.protocol - The IP protocol for an outbound security group rule (tcp | udp | icmp or a protocol number).    egress.ip-permission.to-port - For an outbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    egress.ip-permission.user-id - The ID of an AWS account that has been referenced in an outbound security group rule.    group-id - The ID of the security group.     group-name - The name of the security group.    ip-permission.cidr - An IPv4 CIDR block for an inbound security group rule.    ip-permission.from-port - For an inbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    ip-permission.group-id - The ID of a security group that has been referenced in an inbound security group rule.    ip-permission.group-name - The name of a security group that has been referenced in an inbound security group rule.    ip-permission.ipv6-cidr - An IPv6 CIDR block for an inbound security group rule.    ip-permission.prefix-list-id - The ID (prefix) of the AWS service from which a security group rule allows inbound access.    ip-permission.protocol - The IP protocol for an inbound security group rule (tcp | udp | icmp or a protocol number).    ip-permission.to-port - For an inbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    ip-permission.user-id - The ID of an AWS account that has been referenced in an inbound security group rule.    owner-id - The AWS account ID of the owner of the security group.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC specified when the security group was created.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more security group IDs. Required for security groups in a nondefault VPC. Default: Describes all your security groups.
      */
    var GroupIds: js.UndefOr[GroupIdStringList] = js.undefined
    /**
      * [EC2-Classic and default VPC only] One or more security group names. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, use the group-name filter to describe security groups by name. Default: Describes all your security groups.
      */
    var GroupNames: js.UndefOr[GroupNameStringList] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value. This value can be between 5 and 1000. If this parameter is not specified, then all results are returned.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to request the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeSecurityGroupsResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about one or more security groups.
      */
    var SecurityGroups: js.UndefOr[SecurityGroupList] = js.undefined
  }
  
  trait DescribeSnapshotAttributeRequest extends js.Object {
    /**
      * The snapshot attribute you would like to view.
      */
    var Attribute: SnapshotAttributeName
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the EBS snapshot.
      */
    var SnapshotId: String
  }
  
  trait DescribeSnapshotAttributeResult extends js.Object {
    /**
      * A list of permissions for creating volumes from the snapshot.
      */
    var CreateVolumePermissions: js.UndefOr[CreateVolumePermissionList] = js.undefined
    /**
      * A list of product codes.
      */
    var ProductCodes: js.UndefOr[ProductCodeList] = js.undefined
    /**
      * The ID of the EBS snapshot.
      */
    var SnapshotId: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeSnapshotsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    description - A description of the snapshot.    owner-alias - Value from an Amazon-maintained list (amazon | aws-marketplace | microsoft) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.    owner-id - The ID of the AWS account that owns the snapshot.    progress - The progress of the snapshot, as a percentage (for example, 80%).    snapshot-id - The snapshot ID.    start-time - The time stamp when the snapshot was initiated.    status - The status of the snapshot (pending | completed | error).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The ID of the volume the snapshot is for.    volume-size - The size of the volume, in GiB.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of snapshot results returned by DescribeSnapshots in paginated output. When this parameter is used, DescribeSnapshots only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another DescribeSnapshots request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then DescribeSnapshots returns all results. You cannot specify this parameter and the snapshot IDs parameter in the same request.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The NextToken value returned from a previous paginated DescribeSnapshots request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Returns the snapshots owned by the specified owner. Multiple owners can be specified.
      */
    var OwnerIds: js.UndefOr[OwnerStringList] = js.undefined
    /**
      * One or more AWS accounts IDs that can create volumes from the snapshot.
      */
    var RestorableByUserIds: js.UndefOr[RestorableByStringList] = js.undefined
    /**
      * One or more snapshot IDs. Default: Describes snapshots for which you have launch permissions.
      */
    var SnapshotIds: js.UndefOr[SnapshotIdStringList] = js.undefined
  }
  
  trait DescribeSnapshotsResult extends js.Object {
    /**
      * The NextToken value to include in a future DescribeSnapshots request. When the results of a DescribeSnapshots request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the snapshots.
      */
    var Snapshots: js.UndefOr[SnapshotList] = js.undefined
  }
  
  trait DescribeSpotDatafeedSubscriptionRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DescribeSpotDatafeedSubscriptionResult extends js.Object {
    /**
      * The Spot Instance data feed subscription.
      */
    var SpotDatafeedSubscription: js.UndefOr[SpotDatafeedSubscription] = js.undefined
  }
  
  trait DescribeSpotFleetInstancesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token for the next set of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Spot Fleet request.
      */
    var SpotFleetRequestId: String
  }
  
  trait DescribeSpotFleetInstancesResponse extends js.Object {
    /**
      * The running instances. This list is refreshed periodically and might be out of date.
      */
    var ActiveInstances: js.UndefOr[ActiveInstanceSet] = js.undefined
    /**
      * The token required to retrieve the next set of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Spot Fleet request.
      */
    var SpotFleetRequestId: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeSpotFleetRequestHistoryRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The type of events to describe. By default, all events are described.
      */
    var EventType: js.UndefOr[EventType] = js.undefined
    /**
      * The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token for the next set of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Spot Fleet request.
      */
    var SpotFleetRequestId: String
    /**
      * The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
      */
    var StartTime: DateTime
  }
  
  trait DescribeSpotFleetRequestHistoryResponse extends js.Object {
    /**
      * Information about the events in the history of the Spot Fleet request.
      */
    var HistoryRecords: js.UndefOr[HistoryRecords] = js.undefined
    /**
      * The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). All records up to this time were retrieved. If nextToken indicates that there are more results, this value is not present.
      */
    var LastEvaluatedTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The token required to retrieve the next set of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Spot Fleet request.
      */
    var SpotFleetRequestId: js.UndefOr[String] = js.undefined
    /**
      * The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
      */
    var StartTime: js.UndefOr[DateTime] = js.undefined
  }
  
  trait DescribeSpotFleetRequestsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token for the next set of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The IDs of the Spot Fleet requests.
      */
    var SpotFleetRequestIds: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait DescribeSpotFleetRequestsResponse extends js.Object {
    /**
      * The token required to retrieve the next set of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the configuration of your Spot Fleet.
      */
    var SpotFleetRequestConfigs: js.UndefOr[SpotFleetRequestConfigSet] = js.undefined
  }
  
  trait DescribeSpotInstanceRequestsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    availability-zone-group - The Availability Zone group.    create-time - The time stamp when the Spot Instance request was created.    fault-code - The fault code related to the request.    fault-message - The fault message related to the request.    instance-id - The ID of the instance that fulfilled the request.    launch-group - The Spot Instance launch group.    launch.block-device-mapping.delete-on-termination - Indicates whether the EBS volume is deleted on instance termination.    launch.block-device-mapping.device-name - The device name for the volume in the block device mapping (for example, /dev/sdh or xvdh).    launch.block-device-mapping.snapshot-id - The ID of the snapshot for the EBS volume.    launch.block-device-mapping.volume-size - The size of the EBS volume, in GiB.    launch.block-device-mapping.volume-type - The type of EBS volume: gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1for Cold HDD, or standard for Magnetic.    launch.group-id - The ID of the security group for the instance.    launch.group-name - The name of the security group for the instance.    launch.image-id - The ID of the AMI.    launch.instance-type - The type of instance (for example, m3.medium).    launch.kernel-id - The kernel ID.    launch.key-name - The name of the key pair the instance launched with.    launch.monitoring-enabled - Whether detailed monitoring is enabled for the Spot Instance.    launch.ramdisk-id - The RAM disk ID.    launched-availability-zone - The Availability Zone in which the request is launched.    network-interface.addresses.primary - Indicates whether the IP address is the primary private IP address.    network-interface.delete-on-termination - Indicates whether the network interface is deleted when the instance is terminated.    network-interface.description - A description of the network interface.    network-interface.device-index - The index of the device for the network interface attachment on the instance.    network-interface.group-id - The ID of the security group associated with the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.private-ip-address - The primary private IP address of the network interface.    network-interface.subnet-id - The ID of the subnet for the instance.    product-description - The product description associated with the instance (Linux/UNIX | Windows).    spot-instance-request-id - The Spot Instance request ID.    spot-price - The maximum hourly price for any Spot Instance launched to fulfill the request.    state - The state of the Spot Instance request (open | active | closed | cancelled | failed). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see Spot Request Status in the Amazon EC2 User Guide for Linux Instances.    status-code - The short code describing the most recent evaluation of your Spot Instance request.    status-message - The message explaining the status of the Spot Instance request.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of Spot Instance request (one-time | persistent).    valid-from - The start date of the request.    valid-until - The end date of the request.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return in a single call. Specify a value between 5 and 1000. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to request the next set of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * One or more Spot Instance request IDs.
      */
    var SpotInstanceRequestIds: js.UndefOr[SpotInstanceRequestIdList] = js.undefined
  }
  
  trait DescribeSpotInstanceRequestsResult extends js.Object {
    /**
      * The token to use to retrieve the next set of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * One or more Spot Instance requests.
      */
    var SpotInstanceRequests: js.UndefOr[SpotInstanceRequestList] = js.undefined
  }
  
  trait DescribeSpotPriceHistoryRequest extends js.Object {
    /**
      * Filters the results by the specified Availability Zone.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
      */
    var EndTime: js.UndefOr[DateTime] = js.undefined
    /**
      * One or more filters.    availability-zone - The Availability Zone for which prices should be returned.    instance-type - The type of instance (for example, m3.medium).    product-description - The product description for the Spot price (Linux/UNIX | SUSE Linux | Windows | Linux/UNIX (Amazon VPC) | SUSE Linux (Amazon VPC) | Windows (Amazon VPC)).    spot-price - The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).    timestamp - The time stamp of the Spot price history, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). You can use wildcards (* and ?). Greater than or less than comparison is not supported.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * Filters the results by the specified instance types.
      */
    var InstanceTypes: js.UndefOr[InstanceTypeList] = js.undefined
    /**
      * The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token for the next set of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Filters the results by the specified basic product descriptions.
      */
    var ProductDescriptions: js.UndefOr[ProductDescriptionList] = js.undefined
    /**
      * The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
      */
    var StartTime: js.UndefOr[DateTime] = js.undefined
  }
  
  trait DescribeSpotPriceHistoryResult extends js.Object {
    /**
      * The token required to retrieve the next set of results. This value is null or an empty string when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The historical Spot prices.
      */
    var SpotPriceHistory: js.UndefOr[SpotPriceHistoryList] = js.undefined
  }
  
  trait DescribeStaleSecurityGroupsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.
      */
    var MaxResults: js.UndefOr[MaxResults] = js.undefined
    /**
      * The token for the next set of items to return. (You received this token from a prior call.)
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait DescribeStaleSecurityGroupsResult extends js.Object {
    /**
      * The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the stale security groups.
      */
    var StaleSecurityGroupSet: js.UndefOr[StaleSecurityGroupSet] = js.undefined
  }
  
  trait DescribeSubnetsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    availability-zone - The Availability Zone for the subnet. You can also use availabilityZone as the filter name.    availability-zone-id - The ID of the Availability Zone for the subnet. You can also use availabilityZoneId as the filter name.    available-ip-address-count - The number of IPv4 addresses in the subnet that are available.    cidr-block - The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use cidr or cidrBlock as the filter names.    default-for-az - Indicates whether this is the default subnet for the Availability Zone. You can also use defaultForAz as the filter name.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.association-id - An association ID for an IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the subnet.    owner-id - The ID of the AWS account that owns the subnet.    state - The state of the subnet (pending | available).    subnet-arn - The Amazon Resource Name (ARN) of the subnet.    subnet-id - The ID of the subnet.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the subnet.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more subnet IDs. Default: Describes all your subnets.
      */
    var SubnetIds: js.UndefOr[SubnetIdStringList] = js.undefined
  }
  
  trait DescribeSubnetsResult extends js.Object {
    /**
      * Information about one or more subnets.
      */
    var Subnets: js.UndefOr[SubnetList] = js.undefined
  }
  
  trait DescribeTagsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    key - The tag key.    resource-id - The ID of the resource.    resource-type - The resource type (customer-gateway | dedicated-host | dhcp-options | elastic-ip | fleet | fpga-image | image | instance | internet-gateway | launch-template | natgateway | network-acl | network-interface | reserved-instances | route-table | security-group | snapshot | spot-instances-request | subnet | volume | vpc | vpc-peering-connection | vpn-connection | vpn-gateway).    tag:&lt;key&gt; - The key/value combination of the tag. For example, specify "tag:Owner" for the filter name and "TeamA" for the filter value to find resources with the tag "Owner=TeamA".    value - The tag value.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return in a single call. This value can be between 5 and 1000. To retrieve the remaining results, make another call with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeTagsResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The tags.
      */
    var Tags: js.UndefOr[TagDescriptionList] = js.undefined
  }
  
  trait DescribeTransitGatewayAttachmentsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. The possible values are:    association.state - The state of the association (associating | associated | disassociating).    association.transit-gateway-route-table-id - The ID of the route table for the transit gateway.    resource-id - The ID of the resource.    resource-owner-id - The ID of the AWS account that owns the resource.    resource-type - The resource type (vpc | vpn).    state - The state of the attachment (available | deleted | deleting | failed | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting).    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-id - The ID of the transit gateway.    transit-gateway-owner-id - The ID of the AWS account that owns the transit gateway.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
      */
    var MaxResults: js.UndefOr[TransitGatewayMaxResults] = js.undefined
    /**
      * The token for the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The IDs of the attachments.
      */
    var TransitGatewayAttachmentIds: js.UndefOr[TransitGatewayAttachmentIdStringList] = js.undefined
  }
  
  trait DescribeTransitGatewayAttachmentsResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the attachments.
      */
    var TransitGatewayAttachments: js.UndefOr[TransitGatewayAttachmentList] = js.undefined
  }
  
  trait DescribeTransitGatewayRouteTablesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. The possible values are:    default-association-route-table - Indicates whether this is the default association route table for the transit gateway (true | false).    default-propagation-route-table - Indicates whether this is the default propagation route table for the transit gateway (true | false).    state - The state of the attachment (available | deleted | deleting | failed | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting).    transit-gateway-id - The ID of the transit gateway.    transit-gateway-route-table-id - The ID of the transit gateway route table.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
      */
    var MaxResults: js.UndefOr[TransitGatewayMaxResults] = js.undefined
    /**
      * The token for the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The IDs of the transit gateway route tables.
      */
    var TransitGatewayRouteTableIds: js.UndefOr[TransitGatewayRouteTableIdStringList] = js.undefined
  }
  
  trait DescribeTransitGatewayRouteTablesResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the transit gateway route tables.
      */
    var TransitGatewayRouteTables: js.UndefOr[TransitGatewayRouteTableList] = js.undefined
  }
  
  trait DescribeTransitGatewayVpcAttachmentsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. The possible values are:    state - The state of the attachment (available | deleted | deleting | failed | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting).    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-id - The ID of the transit gateway.    vpc-id - The ID of the VPC.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
      */
    var MaxResults: js.UndefOr[TransitGatewayMaxResults] = js.undefined
    /**
      * The token for the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The IDs of the attachments.
      */
    var TransitGatewayAttachmentIds: js.UndefOr[TransitGatewayAttachmentIdStringList] = js.undefined
  }
  
  trait DescribeTransitGatewayVpcAttachmentsResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the VPC attachments.
      */
    var TransitGatewayVpcAttachments: js.UndefOr[TransitGatewayVpcAttachmentList] = js.undefined
  }
  
  trait DescribeTransitGatewaysRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. The possible values are:    options.propagation-default-route-table-id - The ID of the default propagation route table.    options.amazon-side-asn - The private ASN for the Amazon side of a BGP session.    options.association-default-route-table-id - The ID of the default association route table.    options.auto-accept-shared-attachments - Indicates whether there is automatic acceptance of attachment requests (enable | disable).    options.default-route-table-association - Indicates whether resource attachments are automatically associated with the default association route table (enable | disable).    options.default-route-table-propagation - Indicates whether resource attachments automatically propagate routes to the default propagation route table (enable | disable).    options.dns-support - Indicates whether DNS support is enabled (enable | disable).    options.vpn-ecmp-support - Indicates whether Equal Cost Multipath Protocol support is enabled (enable | disable).    owner-id - The ID of the AWS account that owns the transit gateway.    state - The state of the attachment (available | deleted | deleting | failed | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting).    transit-gateway-id - The ID of the transit gateway.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
      */
    var MaxResults: js.UndefOr[TransitGatewayMaxResults] = js.undefined
    /**
      * The token for the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The IDs of the transit gateways.
      */
    var TransitGatewayIds: js.UndefOr[TransitGatewayIdStringList] = js.undefined
  }
  
  trait DescribeTransitGatewaysResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the transit gateways.
      */
    var TransitGateways: js.UndefOr[TransitGatewayList] = js.undefined
  }
  
  trait DescribeVolumeAttributeRequest extends js.Object {
    /**
      * The attribute of the volume. This parameter is required.
      */
    var Attribute: VolumeAttributeName
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the volume.
      */
    var VolumeId: String
  }
  
  trait DescribeVolumeAttributeResult extends js.Object {
    /**
      * The state of autoEnableIO attribute.
      */
    var AutoEnableIO: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * A list of product codes.
      */
    var ProductCodes: js.UndefOr[ProductCodeList] = js.undefined
    /**
      * The ID of the volume.
      */
    var VolumeId: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeVolumeStatusRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    action.code - The action code for the event (for example, enable-volume-io).    action.description - A description of the action.    action.event-id - The event ID associated with the action.    availability-zone - The Availability Zone of the instance.    event.description - A description of the event.    event.event-id - The event ID.    event.event-type - The event type (for io-enabled: passed | failed; for io-performance: io-performance:degraded | io-performance:severely-degraded | io-performance:stalled).    event.not-after - The latest end time for the event.    event.not-before - The earliest start time for the event.    volume-status.details-name - The cause for volume-status.status (io-enabled | io-performance).    volume-status.details-status - The status of volume-status.details-name (for io-enabled: passed | failed; for io-performance: normal | degraded | severely-degraded | stalled).    volume-status.status - The status of the volume (ok | impaired | warning | insufficient-data).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of volume results returned by DescribeVolumeStatus in paginated output. When this parameter is used, the request only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then DescribeVolumeStatus returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The NextToken value to include in a future DescribeVolumeStatus request. When the results of the request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * One or more volume IDs. Default: Describes all your volumes.
      */
    var VolumeIds: js.UndefOr[VolumeIdStringList] = js.undefined
  }
  
  trait DescribeVolumeStatusResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * A list of volumes.
      */
    var VolumeStatuses: js.UndefOr[VolumeStatusList] = js.undefined
  }
  
  trait DescribeVolumesModificationsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. Supported filters: volume-id, modification-state, target-size, target-iops, target-volume-type, original-size, original-iops, original-volume-type, start-time. 
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results (up to a limit of 500) to be returned in a paginated request.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The nextToken value returned by a previous paginated request.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * One or more volume IDs for which in-progress modifications will be described.
      */
    var VolumeIds: js.UndefOr[VolumeIdStringList] = js.undefined
  }
  
  trait DescribeVolumesModificationsResult extends js.Object {
    /**
      * Token for pagination, null if there are no more results 
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * A list of returned VolumeModification objects.
      */
    var VolumesModifications: js.UndefOr[VolumeModificationList] = js.undefined
  }
  
  trait DescribeVolumesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    attachment.attach-time - The time stamp when the attachment initiated.    attachment.delete-on-termination - Whether the volume is deleted on instance termination.    attachment.device - The device name specified in the block device mapping (for example, /dev/sda1).    attachment.instance-id - The ID of the instance the volume is attached to.    attachment.status - The attachment state (attaching | attached | detaching).    availability-zone - The Availability Zone in which the volume was created.    create-time - The time stamp when the volume was created.    encrypted - The encryption status of the volume.    size - The size of the volume, in GiB.    snapshot-id - The snapshot from which the volume was created.    status - The status of the volume (creating | available | in-use | deleting | deleted | error).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The volume ID.    volume-type - The Amazon EBS volume type. This can be gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of volume results returned by DescribeVolumes in paginated output. When this parameter is used, DescribeVolumes only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another DescribeVolumes request with the returned NextToken value. This value can be between 5 and 500; if MaxResults is given a value larger than 500, only 500 results are returned. If this parameter is not used, then DescribeVolumes returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The NextToken value returned from a previous paginated DescribeVolumes request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * One or more volume IDs.
      */
    var VolumeIds: js.UndefOr[VolumeIdStringList] = js.undefined
  }
  
  trait DescribeVolumesResult extends js.Object {
    /**
      * The NextToken value to include in a future DescribeVolumes request. When the results of a DescribeVolumes request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the volumes.
      */
    var Volumes: js.UndefOr[VolumeList] = js.undefined
  }
  
  trait DescribeVpcAttributeRequest extends js.Object {
    /**
      * The VPC attribute.
      */
    var Attribute: VpcAttributeName
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait DescribeVpcAttributeResult extends js.Object {
    /**
      * Indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not.
      */
    var EnableDnsHostnames: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * Indicates whether DNS resolution is enabled for the VPC. If this attribute is true, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.
      */
    var EnableDnsSupport: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeVpcClassicLinkDnsSupportRequest extends js.Object {
    /**
      * The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.
      */
    var MaxResults: js.UndefOr[MaxResults] = js.undefined
    /**
      * The token for the next set of items to return. (You received this token from a prior call.)
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
    /**
      * One or more VPC IDs.
      */
    var VpcIds: js.UndefOr[VpcClassicLinkIdList] = js.undefined
  }
  
  trait DescribeVpcClassicLinkDnsSupportResult extends js.Object {
    /**
      * The token to use when requesting the next set of items.
      */
    var NextToken: js.UndefOr[NextToken] = js.undefined
    /**
      * Information about the ClassicLink DNS support status of the VPCs.
      */
    var Vpcs: js.UndefOr[ClassicLinkDnsSupportList] = js.undefined
  }
  
  trait DescribeVpcClassicLinkRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    is-classic-link-enabled - Whether the VPC is enabled for ClassicLink (true | false).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more VPCs for which you want to describe the ClassicLink status.
      */
    var VpcIds: js.UndefOr[VpcClassicLinkIdList] = js.undefined
  }
  
  trait DescribeVpcClassicLinkResult extends js.Object {
    /**
      * The ClassicLink status of one or more VPCs.
      */
    var Vpcs: js.UndefOr[VpcClassicLinkList] = js.undefined
  }
  
  trait DescribeVpcEndpointConnectionNotificationsRequest extends js.Object {
    /**
      * The ID of the notification.
      */
    var ConnectionNotificationId: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    connection-notification-arn - The ARN of SNS topic for the notification.    connection-notification-id - The ID of the notification.    connection-notification-state - The state of the notification (Enabled | Disabled).    connection-notification-type - The type of notification (Topic).    service-id - The ID of the endpoint service.    vpc-endpoint-id - The ID of the VPC endpoint.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to request the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeVpcEndpointConnectionNotificationsResult extends js.Object {
    /**
      * One or more notifications.
      */
    var ConnectionNotificationSet: js.UndefOr[ConnectionNotificationSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeVpcEndpointConnectionsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    service-id - The ID of the service.    vpc-endpoint-owner - The AWS account number of the owner of the endpoint.    vpc-endpoint-state - The state of the endpoint (pendingAcceptance | pending | available | deleting | deleted | rejected | failed).    vpc-endpoint-id - The ID of the endpoint.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeVpcEndpointConnectionsResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about one or more VPC endpoint connections.
      */
    var VpcEndpointConnections: js.UndefOr[VpcEndpointConnectionSet] = js.undefined
  }
  
  trait DescribeVpcEndpointServiceConfigurationsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    service-name - The name of the service.    service-id - The ID of the service.    service-state - The state of the service (Pending | Available | Deleting | Deleted | Failed).   
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The IDs of one or more services.
      */
    var ServiceIds: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait DescribeVpcEndpointServiceConfigurationsResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about one or more services.
      */
    var ServiceConfigurations: js.UndefOr[ServiceConfigurationSet] = js.undefined
  }
  
  trait DescribeVpcEndpointServicePermissionsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    principal - The ARN of the principal.    principal-type - The principal type (All | Service | OrganizationUnit | Account | User | Role).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token to retrieve the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The ID of the service.
      */
    var ServiceId: String
  }
  
  trait DescribeVpcEndpointServicePermissionsResult extends js.Object {
    /**
      * Information about one or more allowed principals.
      */
    var AllowedPrincipals: js.UndefOr[AllowedPrincipalSet] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait DescribeVpcEndpointServicesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    service-name: The name of the service.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1000, we return only 1000 items.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token for the next set of items to return. (You received this token from a prior call.)
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * One or more service names.
      */
    var ServiceNames: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait DescribeVpcEndpointServicesResult extends js.Object {
    /**
      * The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the service.
      */
    var ServiceDetails: js.UndefOr[ServiceDetailSet] = js.undefined
    /**
      * A list of supported services.
      */
    var ServiceNames: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait DescribeVpcEndpointsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    service-name: The name of the service.    vpc-id: The ID of the VPC in which the endpoint resides.    vpc-endpoint-id: The ID of the endpoint.    vpc-endpoint-state: The state of the endpoint. (pending | available | deleting | deleted)  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1000, we return only 1000 items.
      */
    var MaxResults: js.UndefOr[Integer] = js.undefined
    /**
      * The token for the next set of items to return. (You received this token from a prior call.)
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * One or more endpoint IDs.
      */
    var VpcEndpointIds: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait DescribeVpcEndpointsResult extends js.Object {
    /**
      * The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the endpoints.
      */
    var VpcEndpoints: js.UndefOr[VpcEndpointSet] = js.undefined
  }
  
  trait DescribeVpcPeeringConnectionsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    accepter-vpc-info.cidr-block - The IPv4 CIDR block of the accepter VPC.    accepter-vpc-info.owner-id - The AWS account ID of the owner of the accepter VPC.    accepter-vpc-info.vpc-id - The ID of the accepter VPC.    expiration-time - The expiration date and time for the VPC peering connection.    requester-vpc-info.cidr-block - The IPv4 CIDR block of the requester's VPC.    requester-vpc-info.owner-id - The AWS account ID of the owner of the requester VPC.    requester-vpc-info.vpc-id - The ID of the requester VPC.    status-code - The status of the VPC peering connection (pending-acceptance | failed | expired | provisioning | active | deleting | deleted | rejected).    status-message - A message that provides more information about the status of the VPC peering connection, if applicable.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-peering-connection-id - The ID of the VPC peering connection.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.
      */
    var MaxResults: js.UndefOr[DescribeVpcPeeringConnectionsMaxResults] = js.undefined
    /**
      * The token to request the next page of results. (You received this token from a prior call.)
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * One or more VPC peering connection IDs. Default: Describes all your VPC peering connections.
      */
    var VpcPeeringConnectionIds: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait DescribeVpcPeeringConnectionsResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the VPC peering connections.
      */
    var VpcPeeringConnections: js.UndefOr[VpcPeeringConnectionList] = js.undefined
  }
  
  trait DescribeVpcsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    cidr - The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, /28).    cidr-block-association.cidr-block - An IPv4 CIDR block associated with the VPC.    cidr-block-association.association-id - The association ID for an IPv4 CIDR block associated with the VPC.    cidr-block-association.state - The state of an IPv4 CIDR block associated with the VPC.    dhcp-options-id - The ID of a set of DHCP options.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.association-id - The association ID for an IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the VPC.    isDefault - Indicates whether the VPC is the default VPC.    owner-id - The ID of the AWS account that owns the VPC.    state - The state of the VPC (pending | available).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more VPC IDs. Default: Describes all your VPCs.
      */
    var VpcIds: js.UndefOr[VpcIdStringList] = js.undefined
  }
  
  trait DescribeVpcsResult extends js.Object {
    /**
      * Information about one or more VPCs.
      */
    var Vpcs: js.UndefOr[VpcList] = js.undefined
  }
  
  trait DescribeVpnConnectionsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    customer-gateway-configuration - The configuration information for the customer gateway.    customer-gateway-id - The ID of a customer gateway associated with the VPN connection.    state - The state of the VPN connection (pending | available | deleting | deleted).    option.static-routes-only - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).    route.destination-cidr-block - The destination CIDR block. This corresponds to the subnet used in a customer data center.    bgp-asn - The BGP Autonomous System Number (ASN) associated with a BGP device.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of VPN connection. Currently the only supported type is ipsec.1.    vpn-connection-id - The ID of the VPN connection.    vpn-gateway-id - The ID of a virtual private gateway associated with the VPN connection.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more VPN connection IDs. Default: Describes your VPN connections.
      */
    var VpnConnectionIds: js.UndefOr[VpnConnectionIdStringList] = js.undefined
  }
  
  trait DescribeVpnConnectionsResult extends js.Object {
    /**
      * Information about one or more VPN connections.
      */
    var VpnConnections: js.UndefOr[VpnConnectionList] = js.undefined
  }
  
  trait DescribeVpnGatewaysRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters.    amazon-side-asn - The Autonomous System Number (ASN) for the Amazon side of the gateway.    attachment.state - The current state of the attachment between the gateway and the VPC (attaching | attached | detaching | detached).    attachment.vpc-id - The ID of an attached VPC.    availability-zone - The Availability Zone for the virtual private gateway (if applicable).    state - The state of the virtual private gateway (pending | available | deleting | deleted).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of virtual private gateway. Currently the only supported type is ipsec.1.    vpn-gateway-id - The ID of the virtual private gateway.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * One or more virtual private gateway IDs. Default: Describes all your virtual private gateways.
      */
    var VpnGatewayIds: js.UndefOr[VpnGatewayIdStringList] = js.undefined
  }
  
  trait DescribeVpnGatewaysResult extends js.Object {
    /**
      * Information about one or more virtual private gateways.
      */
    var VpnGateways: js.UndefOr[VpnGatewayList] = js.undefined
  }
  
  trait DetachClassicLinkVpcRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance to unlink from the VPC.
      */
    var InstanceId: String
    /**
      * The ID of the VPC to which the instance is linked.
      */
    var VpcId: String
  }
  
  trait DetachClassicLinkVpcResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DetachInternetGatewayRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the internet gateway.
      */
    var InternetGatewayId: String
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait DetachNetworkInterfaceRequest extends js.Object {
    /**
      * The ID of the attachment.
      */
    var AttachmentId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Specifies whether to force a detachment.
      */
    var Force: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DetachVolumeRequest extends js.Object {
    /**
      * The device name.
      */
    var Device: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.
      */
    var Force: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the volume.
      */
    var VolumeId: String
  }
  
  trait DetachVpnGatewayRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: String
    /**
      * The ID of the virtual private gateway.
      */
    var VpnGatewayId: String
  }
  
  trait DhcpConfiguration extends js.Object {
    /**
      * The name of a DHCP option.
      */
    var Key: js.UndefOr[String] = js.undefined
    /**
      * One or more values for the DHCP option.
      */
    var Values: js.UndefOr[DhcpConfigurationValueList] = js.undefined
  }
  
  trait DhcpOptions extends js.Object {
    /**
      * One or more DHCP options in the set.
      */
    var DhcpConfigurations: js.UndefOr[DhcpConfigurationList] = js.undefined
    /**
      * The ID of the set of DHCP options.
      */
    var DhcpOptionsId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the AWS account that owns the DHCP options set.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * Any tags assigned to the DHCP options set.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
  }
  
  trait DirectoryServiceAuthentication extends js.Object {
    /**
      * The ID of the Active Directory used for authentication.
      */
    var DirectoryId: js.UndefOr[String] = js.undefined
  }
  
  trait DirectoryServiceAuthenticationRequest extends js.Object {
    /**
      * The ID of the Active Directory to be used for authentication.
      */
    var DirectoryId: js.UndefOr[String] = js.undefined
  }
  
  trait DisableTransitGatewayRouteTablePropagationRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: String
    /**
      * The ID of the propagation route table.
      */
    var TransitGatewayRouteTableId: String
  }
  
  trait DisableTransitGatewayRouteTablePropagationResult extends js.Object {
    /**
      * Information about route propagation.
      */
    var Propagation: js.UndefOr[TransitGatewayPropagation] = js.undefined
  }
  
  trait DisableVgwRoutePropagationRequest extends js.Object {
    /**
      * The ID of the virtual private gateway.
      */
    var GatewayId: String
    /**
      * The ID of the route table.
      */
    var RouteTableId: String
  }
  
  trait DisableVpcClassicLinkDnsSupportRequest extends js.Object {
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait DisableVpcClassicLinkDnsSupportResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DisableVpcClassicLinkRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait DisableVpcClassicLinkResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DisassociateAddressRequest extends js.Object {
    /**
      * [EC2-VPC] The association ID. Required for EC2-VPC.
      */
    var AssociationId: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
      */
    var PublicIp: js.UndefOr[String] = js.undefined
  }
  
  trait DisassociateClientVpnTargetNetworkRequest extends js.Object {
    /**
      * The ID of the target network association.
      */
    var AssociationId: String
    /**
      * The ID of the Client VPN endpoint from which to disassociate the target network.
      */
    var ClientVpnEndpointId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DisassociateClientVpnTargetNetworkResult extends js.Object {
    /**
      * The ID of the target network association.
      */
    var AssociationId: js.UndefOr[String] = js.undefined
    /**
      * The current state of the target network association.
      */
    var Status: js.UndefOr[AssociationStatus] = js.undefined
  }
  
  trait DisassociateIamInstanceProfileRequest extends js.Object {
    /**
      * The ID of the IAM instance profile association.
      */
    var AssociationId: String
  }
  
  trait DisassociateIamInstanceProfileResult extends js.Object {
    /**
      * Information about the IAM instance profile association.
      */
    var IamInstanceProfileAssociation: js.UndefOr[IamInstanceProfileAssociation] = js.undefined
  }
  
  trait DisassociateRouteTableRequest extends js.Object {
    /**
      * The association ID representing the current association between the route table and subnet.
      */
    var AssociationId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait DisassociateSubnetCidrBlockRequest extends js.Object {
    /**
      * The association ID for the CIDR block.
      */
    var AssociationId: String
  }
  
  trait DisassociateSubnetCidrBlockResult extends js.Object {
    /**
      * Information about the IPv6 CIDR block association.
      */
    var Ipv6CidrBlockAssociation: js.UndefOr[SubnetIpv6CidrBlockAssociation] = js.undefined
    /**
      * The ID of the subnet.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
  }
  
  trait DisassociateTransitGatewayRouteTableRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: String
    /**
      * The ID of the transit gateway route table.
      */
    var TransitGatewayRouteTableId: String
  }
  
  trait DisassociateTransitGatewayRouteTableResult extends js.Object {
    /**
      * Information about the association.
      */
    var Association: js.UndefOr[TransitGatewayAssociation] = js.undefined
  }
  
  trait DisassociateVpcCidrBlockRequest extends js.Object {
    /**
      * The association ID for the CIDR block.
      */
    var AssociationId: String
  }
  
  trait DisassociateVpcCidrBlockResult extends js.Object {
    /**
      * Information about the IPv4 CIDR block association.
      */
    var CidrBlockAssociation: js.UndefOr[VpcCidrBlockAssociation] = js.undefined
    /**
      * Information about the IPv6 CIDR block association.
      */
    var Ipv6CidrBlockAssociation: js.UndefOr[VpcIpv6CidrBlockAssociation] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait DiskImage extends js.Object {
    /**
      * A description of the disk image.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Information about the disk image.
      */
    var Image: js.UndefOr[DiskImageDetail] = js.undefined
    /**
      * Information about the volume.
      */
    var Volume: js.UndefOr[VolumeDetail] = js.undefined
  }
  
  trait DiskImageDescription extends js.Object {
    /**
      * The checksum computed for the disk image.
      */
    var Checksum: js.UndefOr[String] = js.undefined
    /**
      * The disk image format.
      */
    var Format: js.UndefOr[DiskImageFormat] = js.undefined
    /**
      * A presigned URL for the import manifest stored in Amazon S3. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the Authenticating REST Requests topic in the Amazon Simple Storage Service Developer Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
      */
    var ImportManifestUrl: js.UndefOr[String] = js.undefined
    /**
      * The size of the disk image, in GiB.
      */
    var Size: js.UndefOr[Long] = js.undefined
  }
  
  trait DiskImageDetail extends js.Object {
    /**
      * The size of the disk image, in GiB.
      */
    var Bytes: Long
    /**
      * The disk image format.
      */
    var Format: DiskImageFormat
    /**
      * A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the Authenticating REST Requests topic in the Amazon Simple Storage Service Developer Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
      */
    var ImportManifestUrl: String
  }
  
  trait DiskImageVolumeDescription extends js.Object {
    /**
      * The volume identifier.
      */
    var Id: js.UndefOr[String] = js.undefined
    /**
      * The size of the volume, in GiB.
      */
    var Size: js.UndefOr[Long] = js.undefined
  }
  
  trait DnsEntry extends js.Object {
    /**
      * The DNS name.
      */
    var DnsName: js.UndefOr[String] = js.undefined
    /**
      * The ID of the private hosted zone.
      */
    var HostedZoneId: js.UndefOr[String] = js.undefined
  }
  
  trait DnsServersOptionsModifyStructure extends js.Object {
    /**
      * The IPv4 address range, in CIDR notation, of the DNS servers to be used. You can specify up to two DNS servers. Ensure that the DNS servers can be reached by the clients. The specified values overwrite the existing values.
      */
    var CustomDnsServers: js.UndefOr[ValueStringList] = js.undefined
    /**
      * Indicates whether DNS servers should be used. Specify False to delete the existing DNS servers.
      */
    var Enabled: js.UndefOr[Boolean] = js.undefined
  }
  
  trait EbsBlockDevice extends js.Object {
    /**
      * Indicates whether the EBS volume is deleted on instance termination.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption.  If you are creating a volume from a snapshot, you cannot specify an encryption value. This is because only blank volumes can be encrypted on creation. If you are creating a snapshot from an existing EBS volume, you cannot specify an encryption value that differs from that of the EBS volume. We recommend that you omit the encryption value from the block device mappings when creating an image from an instance.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * The number of I/O operations per second (IOPS) that the volume supports. For io1, this represents the number of IOPS that are provisioned for the volume. For gp2, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about General Purpose SSD baseline performance, I/O credits, and bursting, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Constraints: Range is 100-16,000 IOPS for gp2 volumes and 100 to 64,000IOPS for io1 volumes in most Regions. Maximum io1IOPS of 64,000 is guaranteed only on Nitro-based instances. Other instance families guarantee performance up to 32,000 IOPS. For more information, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Condition: This parameter is required for requests to create io1 volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.
      */
    var Iops: js.UndefOr[Integer] = js.undefined
    /**
      * Identifier (key ID, key alias, ID ARN, or alias ARN) for a user-managed CMK under which the EBS volume is encrypted. This parameter is only supported on BlockDeviceMapping objects called by RunInstances, RequestSpotFleet, and RequestSpotInstances.
      */
    var KmsKeyId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the snapshot.
      */
    var SnapshotId: js.UndefOr[String] = js.undefined
    /**
      * The size of the volume, in GiB. Constraints: 1-16384 for General Purpose SSD (gp2), 4-16384 for Provisioned IOPS SSD (io1), 500-16384 for Throughput Optimized HDD (st1), 500-16384 for Cold HDD (sc1), and 1-1024 for Magnetic (standard) volumes. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
      */
    var VolumeSize: js.UndefOr[Integer] = js.undefined
    /**
      * The volume type: gp2, io1, st1, sc1, or standard. Default: standard 
      */
    var VolumeType: js.UndefOr[VolumeType] = js.undefined
  }
  
  trait EbsInstanceBlockDevice extends js.Object {
    /**
      * The time stamp when the attachment initiated.
      */
    var AttachTime: js.UndefOr[DateTime] = js.undefined
    /**
      * Indicates whether the volume is deleted on instance termination.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * The attachment state.
      */
    var Status: js.UndefOr[AttachmentStatus] = js.undefined
    /**
      * The ID of the EBS volume.
      */
    var VolumeId: js.UndefOr[String] = js.undefined
  }
  
  trait EbsInstanceBlockDeviceSpecification extends js.Object {
    /**
      * Indicates whether the volume is deleted on instance termination.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the EBS volume.
      */
    var VolumeId: js.UndefOr[String] = js.undefined
  }
  
  trait EgressOnlyInternetGateway extends js.Object {
    /**
      * Information about the attachment of the egress-only internet gateway.
      */
    var Attachments: js.UndefOr[InternetGatewayAttachmentList] = js.undefined
    /**
      * The ID of the egress-only internet gateway.
      */
    var EgressOnlyInternetGatewayId: js.UndefOr[EgressOnlyInternetGatewayId] = js.undefined
  }
  
  trait ElasticGpuAssociation extends js.Object {
    /**
      * The ID of the association.
      */
    var ElasticGpuAssociationId: js.UndefOr[String] = js.undefined
    /**
      * The state of the association between the instance and the Elastic Graphics accelerator.
      */
    var ElasticGpuAssociationState: js.UndefOr[String] = js.undefined
    /**
      * The time the Elastic Graphics accelerator was associated with the instance.
      */
    var ElasticGpuAssociationTime: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Elastic Graphics accelerator.
      */
    var ElasticGpuId: js.UndefOr[String] = js.undefined
  }
  
  trait ElasticGpuHealth extends js.Object {
    /**
      * The health status.
      */
    var Status: js.UndefOr[ElasticGpuStatus] = js.undefined
  }
  
  trait ElasticGpuSpecification extends js.Object {
    /**
      * The type of Elastic Graphics accelerator.
      */
    var Type: String
  }
  
  trait ElasticGpuSpecificationResponse extends js.Object {
    /**
      * The elastic GPU type.
      */
    var Type: js.UndefOr[String] = js.undefined
  }
  
  trait ElasticGpus extends js.Object {
    /**
      * The Availability Zone in the which the Elastic Graphics accelerator resides.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The status of the Elastic Graphics accelerator.
      */
    var ElasticGpuHealth: js.UndefOr[ElasticGpuHealth] = js.undefined
    /**
      * The ID of the Elastic Graphics accelerator.
      */
    var ElasticGpuId: js.UndefOr[String] = js.undefined
    /**
      * The state of the Elastic Graphics accelerator.
      */
    var ElasticGpuState: js.UndefOr[ElasticGpuState] = js.undefined
    /**
      * The type of Elastic Graphics accelerator.
      */
    var ElasticGpuType: js.UndefOr[String] = js.undefined
    /**
      * The ID of the instance to which the Elastic Graphics accelerator is attached.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
  }
  
  trait ElasticInferenceAccelerator extends js.Object {
    /**
      *  The type of elastic inference accelerator. The possible values are eia1.small, eia1.medium, and eia1.large. 
      */
    var Type: String
  }
  
  trait ElasticInferenceAcceleratorAssociation extends js.Object {
    /**
      *  The Amazon Resource Name (ARN) of the elastic inference accelerator. 
      */
    var ElasticInferenceAcceleratorArn: js.UndefOr[String] = js.undefined
    /**
      *  The ID of the association. 
      */
    var ElasticInferenceAcceleratorAssociationId: js.UndefOr[String] = js.undefined
    /**
      *  The state of the elastic inference accelerator. 
      */
    var ElasticInferenceAcceleratorAssociationState: js.UndefOr[String] = js.undefined
    /**
      *  The time at which the elastic inference accelerator is associated with an instance. 
      */
    var ElasticInferenceAcceleratorAssociationTime: js.UndefOr[DateTime] = js.undefined
  }
  
  trait EnableTransitGatewayRouteTablePropagationRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: String
    /**
      * The ID of the propagation route table.
      */
    var TransitGatewayRouteTableId: String
  }
  
  trait EnableTransitGatewayRouteTablePropagationResult extends js.Object {
    /**
      * Information about route propagation.
      */
    var Propagation: js.UndefOr[TransitGatewayPropagation] = js.undefined
  }
  
  trait EnableVgwRoutePropagationRequest extends js.Object {
    /**
      * The ID of the virtual private gateway.
      */
    var GatewayId: String
    /**
      * The ID of the route table.
      */
    var RouteTableId: String
  }
  
  trait EnableVolumeIORequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the volume.
      */
    var VolumeId: String
  }
  
  trait EnableVpcClassicLinkDnsSupportRequest extends js.Object {
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait EnableVpcClassicLinkDnsSupportResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait EnableVpcClassicLinkRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait EnableVpcClassicLinkResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait EventInformation extends js.Object {
    /**
      * The description of the event.
      */
    var EventDescription: js.UndefOr[String] = js.undefined
    /**
      * The event. The following are the error events:    iamFleetRoleInvalid - The Spot Fleet did not have the required permissions either to launch or terminate an instance.    launchSpecTemporarilyBlacklisted - The configuration is not valid and several attempts to launch instances have failed. For more information, see the description of the event.    spotFleetRequestConfigurationInvalid - The configuration is not valid. For more information, see the description of the event.    spotInstanceCountLimitExceeded - You've reached the limit on the number of Spot Instances that you can launch.   The following are the fleetRequestChange events:    active - The Spot Fleet has been validated and Amazon EC2 is attempting to maintain the target number of running Spot Instances.    cancelled - The Spot Fleet is canceled and has no running Spot Instances. The Spot Fleet will be deleted two days after its instances were terminated.    cancelled_running - The Spot Fleet is canceled and does not launch additional Spot Instances. Existing Spot Instances continue to run until they are interrupted or terminated.    cancelled_terminating - The Spot Fleet is canceled and its Spot Instances are terminating.    expired - The Spot Fleet request has expired. A subsequent event indicates that the instances were terminated, if the request was created with TerminateInstancesWithExpiration set.    modify_in_progress - A request to modify the Spot Fleet request was accepted and is in progress.    modify_successful - The Spot Fleet request was modified.    price_update - The price for a launch configuration was adjusted because it was too high. This change is permanent.    submitted - The Spot Fleet request is being evaluated and Amazon EC2 is preparing to launch the target number of Spot Instances.   The following are the instanceChange events:    launched - A request was fulfilled and a new instance was launched.    terminated - An instance was terminated by the user.   The following are the Information events:    launchSpecUnusable - The price in a launch specification is not valid because it is below the Spot price or the Spot price is above the On-Demand price.    fleetProgressHalted - The price in every launch specification is not valid. A launch specification might become valid if the Spot price changes.  
      */
    var EventSubType: js.UndefOr[String] = js.undefined
    /**
      * The ID of the instance. This information is available only for instanceChange events.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
  }
  
  trait ExportClientVpnClientCertificateRevocationListRequest extends js.Object {
    /**
      * The ID of the Client VPN endpoint.
      */
    var ClientVpnEndpointId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ExportClientVpnClientCertificateRevocationListResult extends js.Object {
    /**
      * Information about the client certificate revocation list.
      */
    var CertificateRevocationList: js.UndefOr[String] = js.undefined
    /**
      * The current state of the client certificate revocation list.
      */
    var Status: js.UndefOr[ClientCertificateRevocationListStatus] = js.undefined
  }
  
  trait ExportClientVpnClientConfigurationRequest extends js.Object {
    /**
      * The ID of the Client VPN endpoint.
      */
    var ClientVpnEndpointId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ExportClientVpnClientConfigurationResult extends js.Object {
    /**
      * The contents of the Client VPN endpoint configuration file.
      */
    var ClientConfiguration: js.UndefOr[String] = js.undefined
  }
  
  trait ExportTask extends js.Object {
    /**
      * A description of the resource being exported.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The ID of the export task.
      */
    var ExportTaskId: js.UndefOr[String] = js.undefined
    /**
      * Information about the export task.
      */
    var ExportToS3Task: js.UndefOr[ExportToS3Task] = js.undefined
    /**
      * Information about the instance to export.
      */
    var InstanceExportDetails: js.UndefOr[InstanceExportDetails] = js.undefined
    /**
      * The state of the export task.
      */
    var State: js.UndefOr[ExportTaskState] = js.undefined
    /**
      * The status message related to the export task.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
  }
  
  trait ExportToS3Task extends js.Object {
    /**
      * The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
      */
    var ContainerFormat: js.UndefOr[ContainerFormat] = js.undefined
    /**
      * The format for the exported image.
      */
    var DiskImageFormat: js.UndefOr[DiskImageFormat] = js.undefined
    /**
      * The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
      */
    var S3Bucket: js.UndefOr[String] = js.undefined
    /**
      * The encryption key for your S3 bucket.
      */
    var S3Key: js.UndefOr[String] = js.undefined
  }
  
  trait ExportToS3TaskSpecification extends js.Object {
    /**
      * The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
      */
    var ContainerFormat: js.UndefOr[ContainerFormat] = js.undefined
    /**
      * The format for the exported image.
      */
    var DiskImageFormat: js.UndefOr[DiskImageFormat] = js.undefined
    /**
      * The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
      */
    var S3Bucket: js.UndefOr[String] = js.undefined
    /**
      * The image is written to a single object in the S3 bucket at the S3 key s3prefix + exportTaskId + '.' + diskImageFormat.
      */
    var S3Prefix: js.UndefOr[String] = js.undefined
  }
  
  trait ExportTransitGatewayRoutesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. The possible values are:    attachment.transit-gateway-attachment-id- The id of the transit gateway attachment.    attachment.resource-id - The resource id of the transit gateway attachment.    route-search.exact-match - The exact match of the specified filter.    route-search.longest-prefix-match - The longest prefix that matches the route.    route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.    route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.    state - The state of the attachment (available | deleted | deleting | failed | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting).    transit-gateway-route-destination-cidr-block - The CIDR range.    type - The type of roue (active | blackhole).  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The name of the S3 bucket.
      */
    var S3Bucket: String
    /**
      * The ID of the route table.
      */
    var TransitGatewayRouteTableId: String
  }
  
  trait ExportTransitGatewayRoutesResult extends js.Object {
    /**
      * The URL of the exported file in Amazon S3. For example, s3://bucket_name/VPCTransitGateway/TransitGatewayRouteTables/file_name.
      */
    var S3Location: js.UndefOr[String] = js.undefined
  }
  
  trait Filter extends js.Object {
    /**
      * The name of the filter. Filter names are case-sensitive.
      */
    var Name: js.UndefOr[String] = js.undefined
    /**
      * One or more filter values. Filter values are case-sensitive.
      */
    var Values: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait FleetData extends js.Object {
    /**
      * The progress of the EC2 Fleet. If there is an error, the status is error. After all requests are placed, the status is pending_fulfillment. If the size of the EC2 Fleet is equal to or greater than its target capacity, the status is fulfilled. If the size of the EC2 Fleet is decreased, the status is pending_termination while instances are terminating.
      */
    var ActivityStatus: js.UndefOr[FleetActivityStatus] = js.undefined
    /**
      * Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraints: Maximum 64 ASCII characters
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The creation date and time of the EC2 Fleet.
      */
    var CreateTime: js.UndefOr[DateTime] = js.undefined
    /**
      * Information about the instances that could not be launched by the fleet. Valid only when Type is set to instant.
      */
    var Errors: js.UndefOr[DescribeFleetsErrorSet] = js.undefined
    /**
      * Indicates whether running instances should be terminated if the target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
      */
    var ExcessCapacityTerminationPolicy: js.UndefOr[FleetExcessCapacityTerminationPolicy] = js.undefined
    /**
      * The ID of the EC2 Fleet.
      */
    var FleetId: js.UndefOr[FleetIdentifier] = js.undefined
    /**
      * The state of the EC2 Fleet.
      */
    var FleetState: js.UndefOr[FleetStateCode] = js.undefined
    /**
      * The number of units fulfilled by this request compared to the set target capacity.
      */
    var FulfilledCapacity: js.UndefOr[Double] = js.undefined
    /**
      * The number of units fulfilled by this request compared to the set target On-Demand capacity.
      */
    var FulfilledOnDemandCapacity: js.UndefOr[Double] = js.undefined
    /**
      * Information about the instances that were launched by the fleet. Valid only when Type is set to instant.
      */
    var Instances: js.UndefOr[DescribeFleetsInstancesSet] = js.undefined
    /**
      * The launch template and overrides.
      */
    var LaunchTemplateConfigs: js.UndefOr[FleetLaunchTemplateConfigList] = js.undefined
    /**
      * The allocation strategy of On-Demand Instances in an EC2 Fleet.
      */
    var OnDemandOptions: js.UndefOr[OnDemandOptions] = js.undefined
    /**
      * Indicates whether EC2 Fleet should replace unhealthy instances.
      */
    var ReplaceUnhealthyInstances: js.UndefOr[Boolean] = js.undefined
    /**
      * The configuration of Spot Instances in an EC2 Fleet.
      */
    var SpotOptions: js.UndefOr[SpotOptions] = js.undefined
    /**
      * The tags for an EC2 Fleet resource.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
      */
    var TargetCapacitySpecification: js.UndefOr[TargetCapacitySpecification] = js.undefined
    /**
      * Indicates whether running instances should be terminated when the EC2 Fleet expires. 
      */
    var TerminateInstancesWithExpiration: js.UndefOr[Boolean] = js.undefined
    /**
      * The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. If you request a certain target capacity, EC2 Fleet only places the required requests; it does not attempt to replenish instances if capacity is diminished, and does not submit requests in alternative capacity pools if capacity is unavailable. To maintain a certain target capacity, EC2 Fleet places the required requests to meet this target capacity. It also automatically replenishes any interrupted Spot Instances. Default: maintain.
      */
    var Type: js.UndefOr[FleetType] = js.undefined
    /**
      * The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately. 
      */
    var ValidFrom: js.UndefOr[DateTime] = js.undefined
    /**
      * The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new instance requests are placed or able to fulfill the request. The default end date is 7 days from the current date. 
      */
    var ValidUntil: js.UndefOr[DateTime] = js.undefined
  }
  
  trait FleetLaunchTemplateConfig extends js.Object {
    /**
      * The launch template.
      */
    var LaunchTemplateSpecification: js.UndefOr[FleetLaunchTemplateSpecification] = js.undefined
    /**
      * Any parameters that you specify override the same parameters in the launch template.
      */
    var Overrides: js.UndefOr[FleetLaunchTemplateOverridesList] = js.undefined
  }
  
  trait FleetLaunchTemplateConfigRequest extends js.Object {
    /**
      * The launch template to use. You must specify either the launch template ID or launch template name in the request. 
      */
    var LaunchTemplateSpecification: js.UndefOr[FleetLaunchTemplateSpecificationRequest] = js.undefined
    /**
      * Any parameters that you specify override the same parameters in the launch template.
      */
    var Overrides: js.UndefOr[FleetLaunchTemplateOverridesListRequest] = js.undefined
  }
  
  trait FleetLaunchTemplateOverrides extends js.Object {
    /**
      * The Availability Zone in which to launch the instances.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The maximum price per unit hour that you are willing to pay for a Spot Instance.
      */
    var MaxPrice: js.UndefOr[String] = js.undefined
    /**
      * The location where the instance launched, if applicable.
      */
    var Placement: js.UndefOr[PlacementResponse] = js.undefined
    /**
      * The priority for the launch template override. If AllocationStrategy is set to prioritized, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the override has the lowest priority.
      */
    var Priority: js.UndefOr[Double] = js.undefined
    /**
      * The ID of the subnet in which to launch the instances.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * The number of units provided by the specified instance type.
      */
    var WeightedCapacity: js.UndefOr[Double] = js.undefined
  }
  
  trait FleetLaunchTemplateOverridesRequest extends js.Object {
    /**
      * The Availability Zone in which to launch the instances.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The maximum price per unit hour that you are willing to pay for a Spot Instance.
      */
    var MaxPrice: js.UndefOr[String] = js.undefined
    /**
      * The location where the instance launched, if applicable.
      */
    var Placement: js.UndefOr[Placement] = js.undefined
    /**
      * The priority for the launch template override. If AllocationStrategy is set to prioritized, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.
      */
    var Priority: js.UndefOr[Double] = js.undefined
    /**
      * The ID of the subnet in which to launch the instances.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * The number of units provided by the specified instance type.
      */
    var WeightedCapacity: js.UndefOr[Double] = js.undefined
  }
  
  trait FleetLaunchTemplateSpecification extends js.Object {
    /**
      * The ID of the launch template. You must specify either a template ID or a template name.
      */
    var LaunchTemplateId: js.UndefOr[String] = js.undefined
    /**
      * The name of the launch template. You must specify either a template name or a template ID.
      */
    var LaunchTemplateName: js.UndefOr[LaunchTemplateName] = js.undefined
    /**
      * The version number of the launch template. You must specify a version number.
      */
    var Version: js.UndefOr[String] = js.undefined
  }
  
  trait FleetLaunchTemplateSpecificationRequest extends js.Object {
    /**
      * The ID of the launch template.
      */
    var LaunchTemplateId: js.UndefOr[String] = js.undefined
    /**
      * The name of the launch template.
      */
    var LaunchTemplateName: js.UndefOr[LaunchTemplateName] = js.undefined
    /**
      * The version number of the launch template. 
      */
    var Version: js.UndefOr[String] = js.undefined
  }
  
  trait FlowLog extends js.Object {
    /**
      * The date and time the flow log was created.
      */
    var CreationTime: js.UndefOr[DateTime] = js.undefined
    /**
      * Information about the error that occurred. Rate limited indicates that CloudWatch Logs throttling has been applied for one or more network interfaces, or that you've reached the limit on the number of log groups that you can create. Access error indicates that the IAM role associated with the flow log does not have sufficient permissions to publish to CloudWatch Logs. Unknown error indicates an internal error.
      */
    var DeliverLogsErrorMessage: js.UndefOr[String] = js.undefined
    /**
      * The ARN of the IAM role that posts logs to CloudWatch Logs.
      */
    var DeliverLogsPermissionArn: js.UndefOr[String] = js.undefined
    /**
      * The status of the logs delivery (SUCCESS | FAILED).
      */
    var DeliverLogsStatus: js.UndefOr[String] = js.undefined
    /**
      * The flow log ID.
      */
    var FlowLogId: js.UndefOr[String] = js.undefined
    /**
      * The status of the flow log (ACTIVE).
      */
    var FlowLogStatus: js.UndefOr[String] = js.undefined
    /**
      * Specifies the destination to which the flow log data is published. Flow log data can be published to an CloudWatch Logs log group or an Amazon S3 bucket. If the flow log publishes to CloudWatch Logs, this element indicates the Amazon Resource Name (ARN) of the CloudWatch Logs log group to which the data is published. If the flow log publishes to Amazon S3, this element indicates the ARN of the Amazon S3 bucket to which the data is published.
      */
    var LogDestination: js.UndefOr[String] = js.undefined
    /**
      * Specifies the type of destination to which the flow log data is published. Flow log data can be published to CloudWatch Logs or Amazon S3.
      */
    var LogDestinationType: js.UndefOr[LogDestinationType] = js.undefined
    /**
      * The name of the flow log group.
      */
    var LogGroupName: js.UndefOr[String] = js.undefined
    /**
      * The ID of the resource on which the flow log was created.
      */
    var ResourceId: js.UndefOr[String] = js.undefined
    /**
      * The type of traffic captured for the flow log.
      */
    var TrafficType: js.UndefOr[TrafficType] = js.undefined
  }
  
  trait FpgaImage extends js.Object {
    /**
      * The date and time the AFI was created.
      */
    var CreateTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The description of the AFI.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The global FPGA image identifier (AGFI ID).
      */
    var FpgaImageGlobalId: js.UndefOr[String] = js.undefined
    /**
      * The FPGA image identifier (AFI ID).
      */
    var FpgaImageId: js.UndefOr[String] = js.undefined
    /**
      * The name of the AFI.
      */
    var Name: js.UndefOr[String] = js.undefined
    /**
      * The alias of the AFI owner. Possible values include self, amazon, and aws-marketplace.
      */
    var OwnerAlias: js.UndefOr[String] = js.undefined
    /**
      * The AWS account ID of the AFI owner.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * Information about the PCI bus.
      */
    var PciId: js.UndefOr[PciId] = js.undefined
    /**
      * The product codes for the AFI.
      */
    var ProductCodes: js.UndefOr[ProductCodeList] = js.undefined
    /**
      * Indicates whether the AFI is public.
      */
    var Public: js.UndefOr[Boolean] = js.undefined
    /**
      * The version of the AWS Shell that was used to create the bitstream.
      */
    var ShellVersion: js.UndefOr[String] = js.undefined
    /**
      * Information about the state of the AFI.
      */
    var State: js.UndefOr[FpgaImageState] = js.undefined
    /**
      * Any tags assigned to the AFI.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The time of the most recent update to the AFI.
      */
    var UpdateTime: js.UndefOr[DateTime] = js.undefined
  }
  
  trait FpgaImageAttribute extends js.Object {
    /**
      * The description of the AFI.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The ID of the AFI.
      */
    var FpgaImageId: js.UndefOr[String] = js.undefined
    /**
      * One or more load permissions.
      */
    var LoadPermissions: js.UndefOr[LoadPermissionList] = js.undefined
    /**
      * The name of the AFI.
      */
    var Name: js.UndefOr[String] = js.undefined
    /**
      * One or more product codes.
      */
    var ProductCodes: js.UndefOr[ProductCodeList] = js.undefined
  }
  
  trait FpgaImageState extends js.Object {
    /**
      * The state. The following are the possible values:    pending - AFI bitstream generation is in progress.    available - The AFI is available for use.    failed - AFI bitstream generation failed.    unavailable - The AFI is no longer available for use.  
      */
    var Code: js.UndefOr[FpgaImageStateCode] = js.undefined
    /**
      * If the state is failed, this is the error message.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait GetConsoleOutputRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: String
    /**
      * When enabled, retrieves the latest console output for the instance. Default: disabled (false)
      */
    var Latest: js.UndefOr[Boolean] = js.undefined
  }
  
  trait GetConsoleOutputResult extends js.Object {
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The console output, base64-encoded. If you are using a command line tool, the tool decodes the output for you.
      */
    var Output: js.UndefOr[String] = js.undefined
    /**
      * The time at which the output was last updated.
      */
    var Timestamp: js.UndefOr[DateTime] = js.undefined
  }
  
  trait GetConsoleScreenshotRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: String
    /**
      * When set to true, acts as keystroke input and wakes up an instance that's in standby or "sleep" mode.
      */
    var WakeUp: js.UndefOr[Boolean] = js.undefined
  }
  
  trait GetConsoleScreenshotResult extends js.Object {
    /**
      * The data that comprises the image.
      */
    var ImageData: js.UndefOr[String] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
  }
  
  trait GetHostReservationPurchasePreviewRequest extends js.Object {
    /**
      * The IDs of the Dedicated Hosts with which the reservation is associated.
      */
    var HostIdSet: RequestHostIdSet
    /**
      * The offering ID of the reservation.
      */
    var OfferingId: String
  }
  
  trait GetHostReservationPurchasePreviewResult extends js.Object {
    /**
      * The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
      */
    var CurrencyCode: js.UndefOr[CurrencyCodeValues] = js.undefined
    /**
      * The purchase information of the Dedicated Host reservation and the Dedicated Hosts associated with it.
      */
    var Purchase: js.UndefOr[PurchaseSet] = js.undefined
    /**
      * The potential total hourly price of the reservation per hour.
      */
    var TotalHourlyPrice: js.UndefOr[String] = js.undefined
    /**
      * The potential total upfront price. This is billed immediately.
      */
    var TotalUpfrontPrice: js.UndefOr[String] = js.undefined
  }
  
  trait GetLaunchTemplateDataRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: String
  }
  
  trait GetLaunchTemplateDataResult extends js.Object {
    /**
      * The instance data.
      */
    var LaunchTemplateData: js.UndefOr[ResponseLaunchTemplateData] = js.undefined
  }
  
  trait GetPasswordDataRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the Windows instance.
      */
    var InstanceId: String
  }
  
  trait GetPasswordDataResult extends js.Object {
    /**
      * The ID of the Windows instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The password of the instance. Returns an empty string if the password is not available.
      */
    var PasswordData: js.UndefOr[String] = js.undefined
    /**
      * The time the data was last updated.
      */
    var Timestamp: js.UndefOr[DateTime] = js.undefined
  }
  
  trait GetReservedInstancesExchangeQuoteRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The IDs of the Convertible Reserved Instances to exchange.
      */
    var ReservedInstanceIds: ReservedInstanceIdSet
    /**
      * The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
      */
    var TargetConfigurations: js.UndefOr[TargetConfigurationRequestSet] = js.undefined
  }
  
  trait GetReservedInstancesExchangeQuoteResult extends js.Object {
    /**
      * The currency of the transaction.
      */
    var CurrencyCode: js.UndefOr[String] = js.undefined
    /**
      * If true, the exchange is valid. If false, the exchange cannot be completed.
      */
    var IsValidExchange: js.UndefOr[Boolean] = js.undefined
    /**
      * The new end date of the reservation term.
      */
    var OutputReservedInstancesWillExpireAt: js.UndefOr[DateTime] = js.undefined
    /**
      * The total true upfront charge for the exchange.
      */
    var PaymentDue: js.UndefOr[String] = js.undefined
    /**
      * The cost associated with the Reserved Instance.
      */
    var ReservedInstanceValueRollup: js.UndefOr[ReservationValue] = js.undefined
    /**
      * The configuration of your Convertible Reserved Instances.
      */
    var ReservedInstanceValueSet: js.UndefOr[ReservedInstanceReservationValueSet] = js.undefined
    /**
      * The cost associated with the Reserved Instance.
      */
    var TargetConfigurationValueRollup: js.UndefOr[ReservationValue] = js.undefined
    /**
      * The values of the target Convertible Reserved Instances.
      */
    var TargetConfigurationValueSet: js.UndefOr[TargetReservationValueSet] = js.undefined
    /**
      * Describes the reason why the exchange cannot be completed.
      */
    var ValidationFailureReason: js.UndefOr[String] = js.undefined
  }
  
  trait GetTransitGatewayAttachmentPropagationsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. The possible values are:    transit-gateway-route-table-id - The ID of the transit gateway route table.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
      */
    var MaxResults: js.UndefOr[TransitGatewayMaxResults] = js.undefined
    /**
      * The token for the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: String
  }
  
  trait GetTransitGatewayAttachmentPropagationsResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the propagation route tables.
      */
    var TransitGatewayAttachmentPropagations: js.UndefOr[TransitGatewayAttachmentPropagationList] = js.undefined
  }
  
  trait GetTransitGatewayRouteTableAssociationsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The resource type (vpc | vpn).    transit-gateway-attachment-id - The ID of the attachment.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
      */
    var MaxResults: js.UndefOr[TransitGatewayMaxResults] = js.undefined
    /**
      * The token for the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The ID of the transit gateway route table.
      */
    var TransitGatewayRouteTableId: String
  }
  
  trait GetTransitGatewayRouteTableAssociationsResult extends js.Object {
    /**
      * Information about the associations.
      */
    var Associations: js.UndefOr[TransitGatewayRouteTableAssociationList] = js.undefined
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
  }
  
  trait GetTransitGatewayRouteTablePropagationsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The resource type (vpc | vpn).    transit-gateway-attachment-id - The ID of the attachment.  
      */
    var Filters: js.UndefOr[FilterList] = js.undefined
    /**
      * The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
      */
    var MaxResults: js.UndefOr[TransitGatewayMaxResults] = js.undefined
    /**
      * The token for the next page of results.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * The ID of the transit gateway route table.
      */
    var TransitGatewayRouteTableId: String
  }
  
  trait GetTransitGatewayRouteTablePropagationsResult extends js.Object {
    /**
      * The token to use to retrieve the next page of results. This value is null when there are no more results to return.
      */
    var NextToken: js.UndefOr[String] = js.undefined
    /**
      * Information about the route table propagations.
      */
    var TransitGatewayRouteTablePropagations: js.UndefOr[TransitGatewayRouteTablePropagationList] = js.undefined
  }
  
  trait GroupIdentifier extends js.Object {
    /**
      * The ID of the security group.
      */
    var GroupId: js.UndefOr[String] = js.undefined
    /**
      * The name of the security group.
      */
    var GroupName: js.UndefOr[String] = js.undefined
  }
  
  trait HibernationOptions extends js.Object {
    /**
      * If this parameter is set to true, your instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
      */
    var Configured: js.UndefOr[Boolean] = js.undefined
  }
  
  trait HibernationOptionsRequest extends js.Object {
    /**
      * If you set this parameter to true, your instance is enabled for hibernation. Default: false 
      */
    var Configured: js.UndefOr[Boolean] = js.undefined
  }
  
  trait HistoryRecord extends js.Object {
    /**
      * Information about the event.
      */
    var EventInformation: js.UndefOr[EventInformation] = js.undefined
    /**
      * The event type.    error - An error with the Spot Fleet request.    fleetRequestChange - A change in the status or configuration of the Spot Fleet request.    instanceChange - An instance was launched or terminated.    Information - An informational event.  
      */
    var EventType: js.UndefOr[EventType] = js.undefined
    /**
      * The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
      */
    var Timestamp: js.UndefOr[DateTime] = js.undefined
  }
  
  trait HistoryRecordEntry extends js.Object {
    /**
      * Information about the event.
      */
    var EventInformation: js.UndefOr[EventInformation] = js.undefined
    /**
      * The event type.
      */
    var EventType: js.UndefOr[FleetEventType] = js.undefined
    /**
      * The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
      */
    var Timestamp: js.UndefOr[DateTime] = js.undefined
  }
  
  trait Host extends js.Object {
    /**
      * The time that the Dedicated Host was allocated.
      */
    var AllocationTime: js.UndefOr[DateTime] = js.undefined
    /**
      * Whether auto-placement is on or off.
      */
    var AutoPlacement: js.UndefOr[AutoPlacement] = js.undefined
    /**
      * The Availability Zone of the Dedicated Host.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The number of new instances that can be launched onto the Dedicated Host.
      */
    var AvailableCapacity: js.UndefOr[AvailableCapacity] = js.undefined
    /**
      * Unique, case-sensitive identifier that you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide. 
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Dedicated Host.
      */
    var HostId: js.UndefOr[String] = js.undefined
    /**
      * The hardware specifications of the Dedicated Host.
      */
    var HostProperties: js.UndefOr[HostProperties] = js.undefined
    /**
      * The reservation ID of the Dedicated Host. This returns a null response if the Dedicated Host doesn't have an associated reservation.
      */
    var HostReservationId: js.UndefOr[String] = js.undefined
    /**
      * The IDs and instance type that are currently running on the Dedicated Host.
      */
    var Instances: js.UndefOr[HostInstanceList] = js.undefined
    /**
      * The time that the Dedicated Host was released.
      */
    var ReleaseTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The Dedicated Host's state.
      */
    var State: js.UndefOr[AllocationState] = js.undefined
    /**
      * Any tags assigned to the Dedicated Host.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
  }
  
  trait HostInstance extends js.Object {
    /**
      * the IDs of instances that are running on the Dedicated Host.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The instance type size (for example, m3.medium) of the running instance.
      */
    var InstanceType: js.UndefOr[String] = js.undefined
  }
  
  trait HostOffering extends js.Object {
    /**
      * The currency of the offering.
      */
    var CurrencyCode: js.UndefOr[CurrencyCodeValues] = js.undefined
    /**
      * The duration of the offering (in seconds).
      */
    var Duration: js.UndefOr[Integer] = js.undefined
    /**
      * The hourly price of the offering.
      */
    var HourlyPrice: js.UndefOr[String] = js.undefined
    /**
      * The instance family of the offering.
      */
    var InstanceFamily: js.UndefOr[String] = js.undefined
    /**
      * The ID of the offering.
      */
    var OfferingId: js.UndefOr[String] = js.undefined
    /**
      * The available payment option.
      */
    var PaymentOption: js.UndefOr[PaymentOption] = js.undefined
    /**
      * The upfront price of the offering. Does not apply to No Upfront offerings.
      */
    var UpfrontPrice: js.UndefOr[String] = js.undefined
  }
  
  trait HostProperties extends js.Object {
    /**
      * The number of cores on the Dedicated Host.
      */
    var Cores: js.UndefOr[Integer] = js.undefined
    /**
      * The instance type size that the Dedicated Host supports (for example, m3.medium).
      */
    var InstanceType: js.UndefOr[String] = js.undefined
    /**
      * The number of sockets on the Dedicated Host.
      */
    var Sockets: js.UndefOr[Integer] = js.undefined
    /**
      * The number of vCPUs on the Dedicated Host.
      */
    var TotalVCpus: js.UndefOr[Integer] = js.undefined
  }
  
  trait HostReservation extends js.Object {
    /**
      * The number of Dedicated Hosts the reservation is associated with.
      */
    var Count: js.UndefOr[Integer] = js.undefined
    /**
      * The currency in which the upfrontPrice and hourlyPrice amounts are specified. At this time, the only supported currency is USD.
      */
    var CurrencyCode: js.UndefOr[CurrencyCodeValues] = js.undefined
    /**
      * The length of the reservation's term, specified in seconds. Can be 31536000 (1 year) | 94608000 (3 years).
      */
    var Duration: js.UndefOr[Integer] = js.undefined
    /**
      * The date and time that the reservation ends.
      */
    var End: js.UndefOr[DateTime] = js.undefined
    /**
      * The IDs of the Dedicated Hosts associated with the reservation.
      */
    var HostIdSet: js.UndefOr[ResponseHostIdSet] = js.undefined
    /**
      * The ID of the reservation that specifies the associated Dedicated Hosts.
      */
    var HostReservationId: js.UndefOr[String] = js.undefined
    /**
      * The hourly price of the reservation.
      */
    var HourlyPrice: js.UndefOr[String] = js.undefined
    /**
      * The instance family of the Dedicated Host Reservation. The instance family on the Dedicated Host must be the same in order for it to benefit from the reservation.
      */
    var InstanceFamily: js.UndefOr[String] = js.undefined
    /**
      * The ID of the reservation. This remains the same regardless of which Dedicated Hosts are associated with it.
      */
    var OfferingId: js.UndefOr[String] = js.undefined
    /**
      * The payment option selected for this reservation.
      */
    var PaymentOption: js.UndefOr[PaymentOption] = js.undefined
    /**
      * The date and time that the reservation started.
      */
    var Start: js.UndefOr[DateTime] = js.undefined
    /**
      * The state of the reservation.
      */
    var State: js.UndefOr[ReservationState] = js.undefined
    /**
      * The upfront price of the reservation.
      */
    var UpfrontPrice: js.UndefOr[String] = js.undefined
  }
  
  trait IamInstanceProfile extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the instance profile.
      */
    var Arn: js.UndefOr[String] = js.undefined
    /**
      * The ID of the instance profile.
      */
    var Id: js.UndefOr[String] = js.undefined
  }
  
  trait IamInstanceProfileAssociation extends js.Object {
    /**
      * The ID of the association.
      */
    var AssociationId: js.UndefOr[String] = js.undefined
    /**
      * The IAM instance profile.
      */
    var IamInstanceProfile: js.UndefOr[IamInstanceProfile] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The state of the association.
      */
    var State: js.UndefOr[IamInstanceProfileAssociationState] = js.undefined
    /**
      * The time the IAM instance profile was associated with the instance.
      */
    var Timestamp: js.UndefOr[DateTime] = js.undefined
  }
  
  trait IamInstanceProfileSpecification extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the instance profile.
      */
    var Arn: js.UndefOr[String] = js.undefined
    /**
      * The name of the instance profile.
      */
    var Name: js.UndefOr[String] = js.undefined
  }
  
  trait IcmpTypeCode extends js.Object {
    /**
      * The ICMP code. A value of -1 means all codes for the specified ICMP type.
      */
    var Code: js.UndefOr[Integer] = js.undefined
    /**
      * The ICMP type. A value of -1 means all types.
      */
    var Type: js.UndefOr[Integer] = js.undefined
  }
  
  trait IdFormat extends js.Object {
    /**
      * The date in UTC at which you are permanently switched over to using longer IDs. If a deadline is not yet available for this resource type, this field is not returned.
      */
    var Deadline: js.UndefOr[DateTime] = js.undefined
    /**
      * The type of resource.
      */
    var Resource: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether longer IDs (17-character IDs) are enabled for the resource.
      */
    var UseLongIds: js.UndefOr[Boolean] = js.undefined
  }
  
  trait Image extends js.Object {
    /**
      * The architecture of the image.
      */
    var Architecture: js.UndefOr[ArchitectureValues] = js.undefined
    /**
      * Any block device mapping entries.
      */
    var BlockDeviceMappings: js.UndefOr[BlockDeviceMappingList] = js.undefined
    /**
      * The date and time the image was created.
      */
    var CreationDate: js.UndefOr[String] = js.undefined
    /**
      * The description of the AMI that was provided during image creation.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Specifies whether enhanced networking with ENA is enabled.
      */
    var EnaSupport: js.UndefOr[Boolean] = js.undefined
    /**
      * The hypervisor type of the image.
      */
    var Hypervisor: js.UndefOr[HypervisorType] = js.undefined
    /**
      * The ID of the AMI.
      */
    var ImageId: js.UndefOr[String] = js.undefined
    /**
      * The location of the AMI.
      */
    var ImageLocation: js.UndefOr[String] = js.undefined
    /**
      * The AWS account alias (for example, amazon, self) or the AWS account ID of the AMI owner.
      */
    var ImageOwnerAlias: js.UndefOr[String] = js.undefined
    /**
      * The type of image.
      */
    var ImageType: js.UndefOr[ImageTypeValues] = js.undefined
    /**
      * The kernel associated with the image, if any. Only applicable for machine images.
      */
    var KernelId: js.UndefOr[String] = js.undefined
    /**
      * The name of the AMI that was provided during image creation.
      */
    var Name: js.UndefOr[String] = js.undefined
    /**
      * The AWS account ID of the image owner.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * The value is Windows for Windows AMIs; otherwise blank.
      */
    var Platform: js.UndefOr[PlatformValues] = js.undefined
    /**
      * Any product codes associated with the AMI.
      */
    var ProductCodes: js.UndefOr[ProductCodeList] = js.undefined
    /**
      * Indicates whether the image has public launch permissions. The value is true if this image has public launch permissions or false if it has only implicit and explicit launch permissions.
      */
    var Public: js.UndefOr[Boolean] = js.undefined
    /**
      * The RAM disk associated with the image, if any. Only applicable for machine images.
      */
    var RamdiskId: js.UndefOr[String] = js.undefined
    /**
      * The device name of the root device volume (for example, /dev/sda1).
      */
    var RootDeviceName: js.UndefOr[String] = js.undefined
    /**
      * The type of root device used by the AMI. The AMI can use an EBS volume or an instance store volume.
      */
    var RootDeviceType: js.UndefOr[DeviceType] = js.undefined
    /**
      * Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
      */
    var SriovNetSupport: js.UndefOr[String] = js.undefined
    /**
      * The current state of the AMI. If the state is available, the image is successfully registered and can be used to launch an instance.
      */
    var State: js.UndefOr[ImageState] = js.undefined
    /**
      * The reason for the state change.
      */
    var StateReason: js.UndefOr[StateReason] = js.undefined
    /**
      * Any tags assigned to the image.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The type of virtualization of the AMI.
      */
    var VirtualizationType: js.UndefOr[VirtualizationType] = js.undefined
  }
  
  trait ImageAttribute extends js.Object {
    /**
      * One or more block device mapping entries.
      */
    var BlockDeviceMappings: js.UndefOr[BlockDeviceMappingList] = js.undefined
    /**
      * A description for the AMI.
      */
    var Description: js.UndefOr[AttributeValue] = js.undefined
    /**
      * The ID of the AMI.
      */
    var ImageId: js.UndefOr[String] = js.undefined
    /**
      * The kernel ID.
      */
    var KernelId: js.UndefOr[AttributeValue] = js.undefined
    /**
      * One or more launch permissions.
      */
    var LaunchPermissions: js.UndefOr[LaunchPermissionList] = js.undefined
    /**
      * One or more product codes.
      */
    var ProductCodes: js.UndefOr[ProductCodeList] = js.undefined
    /**
      * The RAM disk ID.
      */
    var RamdiskId: js.UndefOr[AttributeValue] = js.undefined
    /**
      * Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
      */
    var SriovNetSupport: js.UndefOr[AttributeValue] = js.undefined
  }
  
  trait ImageDiskContainer extends js.Object {
    /**
      * The description of the disk image.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The block device mapping for the disk.
      */
    var DeviceName: js.UndefOr[String] = js.undefined
    /**
      * The format of the disk image being imported. Valid values: VHD | VMDK | OVA 
      */
    var Format: js.UndefOr[String] = js.undefined
    /**
      * The ID of the EBS snapshot to be used for importing the snapshot.
      */
    var SnapshotId: js.UndefOr[String] = js.undefined
    /**
      * The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)
      */
    var Url: js.UndefOr[String] = js.undefined
    /**
      * The S3 bucket for the disk image.
      */
    var UserBucket: js.UndefOr[UserBucket] = js.undefined
  }
  
  trait ImportClientVpnClientCertificateRevocationListRequest extends js.Object {
    /**
      * The client certificate revocation list file. For more information, see Generate a Client Certificate Revocation List in the AWS Client VPN Admin Guide.
      */
    var CertificateRevocationList: String
    /**
      * The ID of the Client VPN endpoint to which the client certificate revocation list applies.
      */
    var ClientVpnEndpointId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ImportClientVpnClientCertificateRevocationListResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ImportImageRequest extends js.Object {
    /**
      * The architecture of the virtual machine. Valid values: i386 | x86_64 
      */
    var Architecture: js.UndefOr[String] = js.undefined
    /**
      * The client-specific data.
      */
    var ClientData: js.UndefOr[ClientData] = js.undefined
    /**
      * The token to enable idempotency for VM import requests.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * A description string for the import image task.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Information about the disk containers.
      */
    var DiskContainers: js.UndefOr[ImageDiskContainerList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Specifies whether the destination AMI of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * The target hypervisor platform. Valid values: xen 
      */
    var Hypervisor: js.UndefOr[String] = js.undefined
    /**
      * An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias, in the form alias/ExampleAlias     ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified CMK must exist in the region that the AMI is being copied to. 
      */
    var KmsKeyId: js.UndefOr[String] = js.undefined
    /**
      * The license type to be used for the Amazon Machine Image (AMI) after importing.  Note: You may only use BYOL if you have existing licenses with rights to use these licenses in a third party cloud like AWS. For more information, see Prerequisites in the VM Import/Export User Guide. Valid values include:    Auto - Detects the source-system operating system (OS) and applies the appropriate license.    AWS - Replaces the source-system license with an AWS license, if appropriate.    BYOL - Retains the source-system license, if appropriate.   Default value: Auto 
      */
    var LicenseType: js.UndefOr[String] = js.undefined
    /**
      * The operating system of the virtual machine. Valid values: Windows | Linux 
      */
    var Platform: js.UndefOr[String] = js.undefined
    /**
      * The name of the role to use when not using the default role, 'vmimport'.
      */
    var RoleName: js.UndefOr[String] = js.undefined
  }
  
  trait ImportImageResult extends js.Object {
    /**
      * The architecture of the virtual machine.
      */
    var Architecture: js.UndefOr[String] = js.undefined
    /**
      * A description of the import task.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether the AMI is encypted.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * The target hypervisor of the import task.
      */
    var Hypervisor: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Amazon Machine Image (AMI) created by the import task.
      */
    var ImageId: js.UndefOr[String] = js.undefined
    /**
      * The task ID of the import image task.
      */
    var ImportTaskId: js.UndefOr[String] = js.undefined
    /**
      * The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted AMI.
      */
    var KmsKeyId: js.UndefOr[String] = js.undefined
    /**
      * The license type of the virtual machine.
      */
    var LicenseType: js.UndefOr[String] = js.undefined
    /**
      * The operating system of the virtual machine.
      */
    var Platform: js.UndefOr[String] = js.undefined
    /**
      * The progress of the task.
      */
    var Progress: js.UndefOr[String] = js.undefined
    /**
      * Information about the snapshots.
      */
    var SnapshotDetails: js.UndefOr[SnapshotDetailList] = js.undefined
    /**
      * A brief status of the task.
      */
    var Status: js.UndefOr[String] = js.undefined
    /**
      * A detailed status message of the import task.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
  }
  
  trait ImportImageTask extends js.Object {
    /**
      * The architecture of the virtual machine. Valid values: i386 | x86_64 
      */
    var Architecture: js.UndefOr[String] = js.undefined
    /**
      * A description of the import task.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether the image is encrypted.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * The target hypervisor for the import task. Valid values: xen 
      */
    var Hypervisor: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
      */
    var ImageId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the import image task.
      */
    var ImportTaskId: js.UndefOr[String] = js.undefined
    /**
      * The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted image.
      */
    var KmsKeyId: js.UndefOr[String] = js.undefined
    /**
      * The license type of the virtual machine.
      */
    var LicenseType: js.UndefOr[String] = js.undefined
    /**
      * The description string for the import image task.
      */
    var Platform: js.UndefOr[String] = js.undefined
    /**
      * The percentage of progress of the import image task.
      */
    var Progress: js.UndefOr[String] = js.undefined
    /**
      * Information about the snapshots.
      */
    var SnapshotDetails: js.UndefOr[SnapshotDetailList] = js.undefined
    /**
      * A brief status for the import image task.
      */
    var Status: js.UndefOr[String] = js.undefined
    /**
      * A descriptive status message for the import image task.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
  }
  
  trait ImportInstanceLaunchSpecification extends js.Object {
    /**
      * Reserved.
      */
    var AdditionalInfo: js.UndefOr[String] = js.undefined
    /**
      * The architecture of the instance.
      */
    var Architecture: js.UndefOr[ArchitectureValues] = js.undefined
    /**
      * One or more security group IDs.
      */
    var GroupIds: js.UndefOr[SecurityGroupIdStringList] = js.undefined
    /**
      * One or more security group names.
      */
    var GroupNames: js.UndefOr[SecurityGroupStringList] = js.undefined
    /**
      * Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
      */
    var InstanceInitiatedShutdownBehavior: js.UndefOr[ShutdownBehavior] = js.undefined
    /**
      * The instance type. For more information about the instance types that you can import, see Instance Types in the VM Import/Export User Guide.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * Indicates whether monitoring is enabled.
      */
    var Monitoring: js.UndefOr[Boolean] = js.undefined
    /**
      * The placement information for the instance.
      */
    var Placement: js.UndefOr[Placement] = js.undefined
    /**
      * [EC2-VPC] An available IP address from the IP address range of the subnet.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
    /**
      * [EC2-VPC] The ID of the subnet in which to launch the instance.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * The Base64-encoded user data to make available to the instance.
      */
    var UserData: js.UndefOr[UserData] = js.undefined
  }
  
  trait ImportInstanceRequest extends js.Object {
    /**
      * A description for the instance being imported.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The disk image.
      */
    var DiskImages: js.UndefOr[DiskImageList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The launch specification.
      */
    var LaunchSpecification: js.UndefOr[ImportInstanceLaunchSpecification] = js.undefined
    /**
      * The instance operating system.
      */
    var Platform: PlatformValues
  }
  
  trait ImportInstanceResult extends js.Object {
    /**
      * Information about the conversion task.
      */
    var ConversionTask: js.UndefOr[ConversionTask] = js.undefined
  }
  
  trait ImportInstanceTaskDetails extends js.Object {
    /**
      * A description of the task.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The instance operating system.
      */
    var Platform: js.UndefOr[PlatformValues] = js.undefined
    /**
      * One or more volumes.
      */
    var Volumes: js.UndefOr[ImportInstanceVolumeDetailSet] = js.undefined
  }
  
  trait ImportInstanceVolumeDetailItem extends js.Object {
    /**
      * The Availability Zone where the resulting instance will reside.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The number of bytes converted so far.
      */
    var BytesConverted: js.UndefOr[Long] = js.undefined
    /**
      * A description of the task.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The image.
      */
    var Image: js.UndefOr[DiskImageDescription] = js.undefined
    /**
      * The status of the import of this particular disk image.
      */
    var Status: js.UndefOr[String] = js.undefined
    /**
      * The status information or errors related to the disk image.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
    /**
      * The volume.
      */
    var Volume: js.UndefOr[DiskImageVolumeDescription] = js.undefined
  }
  
  trait ImportKeyPairRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * A unique name for the key pair.
      */
    var KeyName: String
    /**
      * The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.
      */
    var PublicKeyMaterial: _Blob
  }
  
  trait ImportKeyPairResult extends js.Object {
    /**
      * The MD5 public key fingerprint as specified in section 4 of RFC 4716.
      */
    var KeyFingerprint: js.UndefOr[String] = js.undefined
    /**
      * The key pair name you provided.
      */
    var KeyName: js.UndefOr[String] = js.undefined
  }
  
  trait ImportSnapshotRequest extends js.Object {
    /**
      * The client-specific data.
      */
    var ClientData: js.UndefOr[ClientData] = js.undefined
    /**
      * Token to enable idempotency for VM import requests.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The description string for the import snapshot task.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Information about the disk container.
      */
    var DiskContainer: js.UndefOr[SnapshotDiskContainer] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Specifies whether the destination snapshot of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias, in the form alias/ExampleAlias     ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified CMK must exist in the region that the snapshot is being copied to. 
      */
    var KmsKeyId: js.UndefOr[String] = js.undefined
    /**
      * The name of the role to use when not using the default role, 'vmimport'.
      */
    var RoleName: js.UndefOr[String] = js.undefined
  }
  
  trait ImportSnapshotResult extends js.Object {
    /**
      * A description of the import snapshot task.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The ID of the import snapshot task.
      */
    var ImportTaskId: js.UndefOr[String] = js.undefined
    /**
      * Information about the import snapshot task.
      */
    var SnapshotTaskDetail: js.UndefOr[SnapshotTaskDetail] = js.undefined
  }
  
  trait ImportSnapshotTask extends js.Object {
    /**
      * A description of the import snapshot task.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The ID of the import snapshot task.
      */
    var ImportTaskId: js.UndefOr[String] = js.undefined
    /**
      * Describes an import snapshot task.
      */
    var SnapshotTaskDetail: js.UndefOr[SnapshotTaskDetail] = js.undefined
  }
  
  trait ImportVolumeRequest extends js.Object {
    /**
      * The Availability Zone for the resulting EBS volume.
      */
    var AvailabilityZone: String
    /**
      * A description of the volume.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The disk image.
      */
    var Image: DiskImageDetail
    /**
      * The volume size.
      */
    var Volume: VolumeDetail
  }
  
  trait ImportVolumeResult extends js.Object {
    /**
      * Information about the conversion task.
      */
    var ConversionTask: js.UndefOr[ConversionTask] = js.undefined
  }
  
  trait ImportVolumeTaskDetails extends js.Object {
    /**
      * The Availability Zone where the resulting volume will reside.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The number of bytes converted so far.
      */
    var BytesConverted: js.UndefOr[Long] = js.undefined
    /**
      * The description you provided when starting the import volume task.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The image.
      */
    var Image: js.UndefOr[DiskImageDescription] = js.undefined
    /**
      * The volume.
      */
    var Volume: js.UndefOr[DiskImageVolumeDescription] = js.undefined
  }
  
  trait Instance extends js.Object {
    /**
      * The AMI launch index, which can be used to find this instance in the launch group.
      */
    var AmiLaunchIndex: js.UndefOr[Integer] = js.undefined
    /**
      * The architecture of the image.
      */
    var Architecture: js.UndefOr[ArchitectureValues] = js.undefined
    /**
      * Any block device mapping entries for the instance.
      */
    var BlockDeviceMappings: js.UndefOr[InstanceBlockDeviceMappingList] = js.undefined
    /**
      * The ID of the Capacity Reservation.
      */
    var CapacityReservationId: js.UndefOr[String] = js.undefined
    /**
      * Information about the Capacity Reservation targeting option.
      */
    var CapacityReservationSpecification: js.UndefOr[CapacityReservationSpecificationResponse] = js.undefined
    /**
      * The idempotency token you provided when you launched the instance, if applicable.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The CPU options for the instance.
      */
    var CpuOptions: js.UndefOr[CpuOptions] = js.undefined
    /**
      * Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
      */
    var EbsOptimized: js.UndefOr[Boolean] = js.undefined
    /**
      * The Elastic GPU associated with the instance.
      */
    var ElasticGpuAssociations: js.UndefOr[ElasticGpuAssociationList] = js.undefined
    /**
      *  The elastic inference accelerator associated with the instance. 
      */
    var ElasticInferenceAcceleratorAssociations: js.UndefOr[ElasticInferenceAcceleratorAssociationList] = js.undefined
    /**
      * Specifies whether enhanced networking with ENA is enabled.
      */
    var EnaSupport: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether the instance is enabled for hibernation.
      */
    var HibernationOptions: js.UndefOr[HibernationOptions] = js.undefined
    /**
      * The hypervisor type of the instance.
      */
    var Hypervisor: js.UndefOr[HypervisorType] = js.undefined
    /**
      * The IAM instance profile associated with the instance, if applicable.
      */
    var IamInstanceProfile: js.UndefOr[IamInstanceProfile] = js.undefined
    /**
      * The ID of the AMI used to launch the instance.
      */
    var ImageId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether this is a Spot Instance or a Scheduled Instance.
      */
    var InstanceLifecycle: js.UndefOr[InstanceLifecycleType] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The kernel associated with this instance, if applicable.
      */
    var KernelId: js.UndefOr[String] = js.undefined
    /**
      * The name of the key pair, if this instance was launched with an associated key pair.
      */
    var KeyName: js.UndefOr[String] = js.undefined
    /**
      * The time the instance was launched.
      */
    var LaunchTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The license configurations.
      */
    var Licenses: js.UndefOr[LicenseList] = js.undefined
    /**
      * The monitoring for the instance.
      */
    var Monitoring: js.UndefOr[Monitoring] = js.undefined
    /**
      * [EC2-VPC] One or more network interfaces for the instance.
      */
    var NetworkInterfaces: js.UndefOr[InstanceNetworkInterfaceList] = js.undefined
    /**
      * The location where the instance launched, if applicable.
      */
    var Placement: js.UndefOr[Placement] = js.undefined
    /**
      * The value is Windows for Windows instances; otherwise blank.
      */
    var Platform: js.UndefOr[PlatformValues] = js.undefined
    /**
      * (IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the running state.  [EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname as appropriate.
      */
    var PrivateDnsName: js.UndefOr[String] = js.undefined
    /**
      * The private IPv4 address assigned to the instance.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
    /**
      * The product codes attached to this instance, if applicable.
      */
    var ProductCodes: js.UndefOr[ProductCodeList] = js.undefined
    /**
      * (IPv4 only) The public DNS name assigned to the instance. This name is not available until the instance enters the running state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.
      */
    var PublicDnsName: js.UndefOr[String] = js.undefined
    /**
      * The public IPv4 address assigned to the instance, if applicable.
      */
    var PublicIpAddress: js.UndefOr[String] = js.undefined
    /**
      * The RAM disk associated with this instance, if applicable.
      */
    var RamdiskId: js.UndefOr[String] = js.undefined
    /**
      * The device name of the root device volume (for example, /dev/sda1).
      */
    var RootDeviceName: js.UndefOr[String] = js.undefined
    /**
      * The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
      */
    var RootDeviceType: js.UndefOr[DeviceType] = js.undefined
    /**
      * One or more security groups for the instance.
      */
    var SecurityGroups: js.UndefOr[GroupIdentifierList] = js.undefined
    /**
      * Specifies whether to enable an instance launched in a VPC to perform NAT. This controls whether source/destination checking is enabled on the instance. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform NAT. For more information, see NAT Instances in the Amazon Virtual Private Cloud User Guide.
      */
    var SourceDestCheck: js.UndefOr[Boolean] = js.undefined
    /**
      * If the request is a Spot Instance request, the ID of the request.
      */
    var SpotInstanceRequestId: js.UndefOr[String] = js.undefined
    /**
      * Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
      */
    var SriovNetSupport: js.UndefOr[String] = js.undefined
    /**
      * The current state of the instance.
      */
    var State: js.UndefOr[InstanceState] = js.undefined
    /**
      * The reason for the most recent state transition.
      */
    var StateReason: js.UndefOr[StateReason] = js.undefined
    /**
      * The reason for the most recent state transition. This might be an empty string.
      */
    var StateTransitionReason: js.UndefOr[String] = js.undefined
    /**
      * [EC2-VPC] The ID of the subnet in which the instance is running.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * Any tags assigned to the instance.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The virtualization type of the instance.
      */
    var VirtualizationType: js.UndefOr[VirtualizationType] = js.undefined
    /**
      * [EC2-VPC] The ID of the VPC in which the instance is running.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait InstanceAttribute extends js.Object {
    /**
      * The block device mapping of the instance.
      */
    var BlockDeviceMappings: js.UndefOr[InstanceBlockDeviceMappingList] = js.undefined
    /**
      * If the value is true, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can.
      */
    var DisableApiTermination: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * Indicates whether the instance is optimized for Amazon EBS I/O.
      */
    var EbsOptimized: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * Indicates whether enhanced networking with ENA is enabled.
      */
    var EnaSupport: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * The security groups associated with the instance.
      */
    var Groups: js.UndefOr[GroupIdentifierList] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
      */
    var InstanceInitiatedShutdownBehavior: js.UndefOr[AttributeValue] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[AttributeValue] = js.undefined
    /**
      * The kernel ID.
      */
    var KernelId: js.UndefOr[AttributeValue] = js.undefined
    /**
      * A list of product codes.
      */
    var ProductCodes: js.UndefOr[ProductCodeList] = js.undefined
    /**
      * The RAM disk ID.
      */
    var RamdiskId: js.UndefOr[AttributeValue] = js.undefined
    /**
      * The device name of the root device volume (for example, /dev/sda1).
      */
    var RootDeviceName: js.UndefOr[AttributeValue] = js.undefined
    /**
      * Indicates whether source/destination checking is enabled. A value of true means that checking is enabled, and false means that checking is disabled. This value must be false for a NAT instance to perform NAT.
      */
    var SourceDestCheck: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
      */
    var SriovNetSupport: js.UndefOr[AttributeValue] = js.undefined
    /**
      * The user data.
      */
    var UserData: js.UndefOr[AttributeValue] = js.undefined
  }
  
  trait InstanceBlockDeviceMapping extends js.Object {
    /**
      * The device name (for example, /dev/sdh or xvdh).
      */
    var DeviceName: js.UndefOr[String] = js.undefined
    /**
      * Parameters used to automatically set up EBS volumes when the instance is launched.
      */
    var Ebs: js.UndefOr[EbsInstanceBlockDevice] = js.undefined
  }
  
  trait InstanceBlockDeviceMappingSpecification extends js.Object {
    /**
      * The device name (for example, /dev/sdh or xvdh).
      */
    var DeviceName: js.UndefOr[String] = js.undefined
    /**
      * Parameters used to automatically set up EBS volumes when the instance is launched.
      */
    var Ebs: js.UndefOr[EbsInstanceBlockDeviceSpecification] = js.undefined
    /**
      * suppress the specified device included in the block device mapping.
      */
    var NoDevice: js.UndefOr[String] = js.undefined
    /**
      * The virtual device name.
      */
    var VirtualName: js.UndefOr[String] = js.undefined
  }
  
  trait InstanceCapacity extends js.Object {
    /**
      * The number of instances that can still be launched onto the Dedicated Host.
      */
    var AvailableCapacity: js.UndefOr[Integer] = js.undefined
    /**
      * The instance type size supported by the Dedicated Host.
      */
    var InstanceType: js.UndefOr[String] = js.undefined
    /**
      * The total number of instances that can be launched onto the Dedicated Host.
      */
    var TotalCapacity: js.UndefOr[Integer] = js.undefined
  }
  
  trait InstanceCount extends js.Object {
    /**
      * The number of listed Reserved Instances in the state specified by the state.
      */
    var InstanceCount: js.UndefOr[Integer] = js.undefined
    /**
      * The states of the listed Reserved Instances.
      */
    var State: js.UndefOr[ListingState] = js.undefined
  }
  
  trait InstanceCreditSpecification extends js.Object {
    /**
      * The credit option for CPU usage of the instance. Valid values are standard and unlimited.
      */
    var CpuCredits: js.UndefOr[String] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
  }
  
  trait InstanceCreditSpecificationRequest extends js.Object {
    /**
      * The credit option for CPU usage of the instance. Valid values are standard and unlimited.
      */
    var CpuCredits: js.UndefOr[String] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
  }
  
  trait InstanceExportDetails extends js.Object {
    /**
      * The ID of the resource being exported.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The target virtualization environment.
      */
    var TargetEnvironment: js.UndefOr[ExportEnvironment] = js.undefined
  }
  
  trait InstanceIpv6Address extends js.Object {
    /**
      * The IPv6 address.
      */
    var Ipv6Address: js.UndefOr[String] = js.undefined
  }
  
  trait InstanceIpv6AddressRequest extends js.Object {
    /**
      * The IPv6 address.
      */
    var Ipv6Address: js.UndefOr[String] = js.undefined
  }
  
  trait InstanceMarketOptionsRequest extends js.Object {
    /**
      * The market type.
      */
    var MarketType: js.UndefOr[MarketType] = js.undefined
    /**
      * The options for Spot Instances.
      */
    var SpotOptions: js.UndefOr[SpotMarketOptions] = js.undefined
  }
  
  trait InstanceMonitoring extends js.Object {
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The monitoring for the instance.
      */
    var Monitoring: js.UndefOr[Monitoring] = js.undefined
  }
  
  trait InstanceNetworkInterface extends js.Object {
    /**
      * The association information for an Elastic IPv4 associated with the network interface.
      */
    var Association: js.UndefOr[InstanceNetworkInterfaceAssociation] = js.undefined
    /**
      * The network interface attachment.
      */
    var Attachment: js.UndefOr[InstanceNetworkInterfaceAttachment] = js.undefined
    /**
      * The description.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * One or more security groups.
      */
    var Groups: js.UndefOr[GroupIdentifierList] = js.undefined
    /**
      * One or more IPv6 addresses associated with the network interface.
      */
    var Ipv6Addresses: js.UndefOr[InstanceIpv6AddressList] = js.undefined
    /**
      * The MAC address.
      */
    var MacAddress: js.UndefOr[String] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the AWS account that created the network interface.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * The private DNS name.
      */
    var PrivateDnsName: js.UndefOr[String] = js.undefined
    /**
      * The IPv4 address of the network interface within the subnet.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
    /**
      * One or more private IPv4 addresses associated with the network interface.
      */
    var PrivateIpAddresses: js.UndefOr[InstancePrivateIpAddressList] = js.undefined
    /**
      * Indicates whether to validate network traffic to or from this network interface.
      */
    var SourceDestCheck: js.UndefOr[Boolean] = js.undefined
    /**
      * The status of the network interface.
      */
    var Status: js.UndefOr[NetworkInterfaceStatus] = js.undefined
    /**
      * The ID of the subnet.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait InstanceNetworkInterfaceAssociation extends js.Object {
    /**
      * The ID of the owner of the Elastic IP address.
      */
    var IpOwnerId: js.UndefOr[String] = js.undefined
    /**
      * The public DNS name.
      */
    var PublicDnsName: js.UndefOr[String] = js.undefined
    /**
      * The public IP address or Elastic IP address bound to the network interface.
      */
    var PublicIp: js.UndefOr[String] = js.undefined
  }
  
  trait InstanceNetworkInterfaceAttachment extends js.Object {
    /**
      * The time stamp when the attachment initiated.
      */
    var AttachTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The ID of the network interface attachment.
      */
    var AttachmentId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether the network interface is deleted when the instance is terminated.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * The index of the device on the instance for the network interface attachment.
      */
    var DeviceIndex: js.UndefOr[Integer] = js.undefined
    /**
      * The attachment state.
      */
    var Status: js.UndefOr[AttachmentStatus] = js.undefined
  }
  
  trait InstanceNetworkInterfaceSpecification extends js.Object {
    /**
      * Indicates whether to assign a public IPv4 address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true.
      */
    var AssociatePublicIpAddress: js.UndefOr[Boolean] = js.undefined
    /**
      * If set to true, the interface is deleted when the instance is terminated. You can specify true only if creating a new network interface when launching an instance.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * The description of the network interface. Applies only if creating a network interface when launching an instance.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The index of the device on the instance for the network interface attachment. If you are specifying a network interface in a RunInstances request, you must provide the device index.
      */
    var DeviceIndex: js.UndefOr[Integer] = js.undefined
    /**
      * The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.
      */
    var Groups: js.UndefOr[SecurityGroupIdStringList] = js.undefined
    /**
      * A number of IPv6 addresses to assign to the network interface. Amazon EC2 chooses the IPv6 addresses from the range of the subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.
      */
    var Ipv6AddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * One or more IPv6 addresses to assign to the network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.
      */
    var Ipv6Addresses: js.UndefOr[InstanceIpv6AddressList] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * The private IPv4 address of the network interface. Applies only if creating a network interface when launching an instance. You cannot specify this option if you're launching more than one instance in a RunInstances request.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
    /**
      * One or more private IPv4 addresses to assign to the network interface. Only one private IPv4 address can be designated as primary. You cannot specify this option if you're launching more than one instance in a RunInstances request.
      */
    var PrivateIpAddresses: js.UndefOr[PrivateIpAddressSpecificationList] = js.undefined
    /**
      * The number of secondary private IPv4 addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're launching more than one instance in a RunInstances request.
      */
    var SecondaryPrivateIpAddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the subnet associated with the network string. Applies only if creating a network interface when launching an instance.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
  }
  
  trait InstancePrivateIpAddress extends js.Object {
    /**
      * The association information for an Elastic IP address for the network interface.
      */
    var Association: js.UndefOr[InstanceNetworkInterfaceAssociation] = js.undefined
    /**
      * Indicates whether this IPv4 address is the primary private IP address of the network interface.
      */
    var Primary: js.UndefOr[Boolean] = js.undefined
    /**
      * The private IPv4 DNS name.
      */
    var PrivateDnsName: js.UndefOr[String] = js.undefined
    /**
      * The private IPv4 address of the network interface.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
  }
  
  trait InstanceState extends js.Object {
    /**
      * The low byte represents the state. The high byte is used for internal purposes and should be ignored.    0 : pending     16 : running     32 : shutting-down     48 : terminated     64 : stopping     80 : stopped   
      */
    var Code: js.UndefOr[Integer] = js.undefined
    /**
      * The current state of the instance.
      */
    var Name: js.UndefOr[InstanceStateName] = js.undefined
  }
  
  trait InstanceStateChange extends js.Object {
    /**
      * The current state of the instance.
      */
    var CurrentState: js.UndefOr[InstanceState] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The previous state of the instance.
      */
    var PreviousState: js.UndefOr[InstanceState] = js.undefined
  }
  
  trait InstanceStatus extends js.Object {
    /**
      * The Availability Zone of the instance.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * Any scheduled events associated with the instance.
      */
    var Events: js.UndefOr[InstanceStatusEventList] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The intended state of the instance. DescribeInstanceStatus requires that an instance be in the running state.
      */
    var InstanceState: js.UndefOr[InstanceState] = js.undefined
    /**
      * Reports impaired functionality that stems from issues internal to the instance, such as impaired reachability.
      */
    var InstanceStatus: js.UndefOr[InstanceStatusSummary] = js.undefined
    /**
      * Reports impaired functionality that stems from issues related to the systems that support an instance, such as hardware failures and network connectivity problems.
      */
    var SystemStatus: js.UndefOr[InstanceStatusSummary] = js.undefined
  }
  
  trait InstanceStatusDetails extends js.Object {
    /**
      * The time when a status check failed. For an instance that was launched and impaired, this is the time when the instance was launched.
      */
    var ImpairedSince: js.UndefOr[DateTime] = js.undefined
    /**
      * The type of instance status.
      */
    var Name: js.UndefOr[StatusName] = js.undefined
    /**
      * The status.
      */
    var Status: js.UndefOr[StatusType] = js.undefined
  }
  
  trait InstanceStatusEvent extends js.Object {
    /**
      * The event code.
      */
    var Code: js.UndefOr[EventCode] = js.undefined
    /**
      * A description of the event. After a scheduled event is completed, it can still be described for up to a week. If the event has been completed, this description starts with the following text: [Completed].
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The latest scheduled end time for the event.
      */
    var NotAfter: js.UndefOr[DateTime] = js.undefined
    /**
      * The earliest scheduled start time for the event.
      */
    var NotBefore: js.UndefOr[DateTime] = js.undefined
  }
  
  trait InstanceStatusSummary extends js.Object {
    /**
      * The system instance health or application instance health.
      */
    var Details: js.UndefOr[InstanceStatusDetailsList] = js.undefined
    /**
      * The status.
      */
    var Status: js.UndefOr[SummaryStatus] = js.undefined
  }
  
  trait InternetGateway extends js.Object {
    /**
      * Any VPCs attached to the internet gateway.
      */
    var Attachments: js.UndefOr[InternetGatewayAttachmentList] = js.undefined
    /**
      * The ID of the internet gateway.
      */
    var InternetGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the AWS account that owns the internet gateway.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * Any tags assigned to the internet gateway.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
  }
  
  trait InternetGatewayAttachment extends js.Object {
    /**
      * The current state of the attachment. For an internet gateway, the state is available when attached to a VPC; otherwise, this value is not returned.
      */
    var State: js.UndefOr[AttachmentStatus] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait IpPermission extends js.Object {
    /**
      * The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
      */
    var FromPort: js.UndefOr[Integer] = js.undefined
    /**
      * The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers).  [EC2-VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6) allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For 58 (ICMPv6), you can optionally specify a port range; if you don't, traffic for all types and codes is allowed when authorizing rules. 
      */
    var IpProtocol: js.UndefOr[String] = js.undefined
    /**
      * One or more IPv4 ranges.
      */
    var IpRanges: js.UndefOr[IpRangeList] = js.undefined
    /**
      * [EC2-VPC only] One or more IPv6 ranges.
      */
    var Ipv6Ranges: js.UndefOr[Ipv6RangeList] = js.undefined
    /**
      * [EC2-VPC only] One or more prefix list IDs for an AWS service. With AuthorizeSecurityGroupEgress, this is the AWS service that you want to access through a VPC endpoint from instances associated with the security group.
      */
    var PrefixListIds: js.UndefOr[PrefixListIdList] = js.undefined
    /**
      * The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes for the specified ICMP type. If you specify all ICMP/ICMPv6 types, you must specify all codes.
      */
    var ToPort: js.UndefOr[Integer] = js.undefined
    /**
      * One or more security group and AWS account ID pairs.
      */
    var UserIdGroupPairs: js.UndefOr[UserIdGroupPairList] = js.undefined
  }
  
  trait IpRange extends js.Object {
    /**
      * The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv4 address, use the /32 prefix length.
      */
    var CidrIp: js.UndefOr[String] = js.undefined
    /**
      * A description for the security group rule that references this IPv4 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
      */
    var Description: js.UndefOr[String] = js.undefined
  }
  
  trait Ipv6CidrBlock extends js.Object {
    /**
      * The IPv6 CIDR block.
      */
    var Ipv6CidrBlock: js.UndefOr[String] = js.undefined
  }
  
  trait Ipv6Range extends js.Object {
    /**
      * The IPv6 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv6 address, use the /128 prefix length.
      */
    var CidrIpv6: js.UndefOr[String] = js.undefined
    /**
      * A description for the security group rule that references this IPv6 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
      */
    var Description: js.UndefOr[String] = js.undefined
  }
  
  trait KeyPair extends js.Object {
    /**
      * The SHA-1 digest of the DER encoded private key.
      */
    var KeyFingerprint: js.UndefOr[String] = js.undefined
    /**
      * An unencrypted PEM encoded RSA private key.
      */
    var KeyMaterial: js.UndefOr[String] = js.undefined
    /**
      * The name of the key pair.
      */
    var KeyName: js.UndefOr[String] = js.undefined
  }
  
  trait KeyPairInfo extends js.Object {
    /**
      * If you used CreateKeyPair to create the key pair, this is the SHA-1 digest of the DER encoded private key. If you used ImportKeyPair to provide AWS the public key, this is the MD5 public key fingerprint as specified in section 4 of RFC4716.
      */
    var KeyFingerprint: js.UndefOr[String] = js.undefined
    /**
      * The name of the key pair.
      */
    var KeyName: js.UndefOr[String] = js.undefined
  }
  
  trait LaunchPermission extends js.Object {
    /**
      * The name of the group.
      */
    var Group: js.UndefOr[PermissionGroup] = js.undefined
    /**
      * The AWS account ID.
      */
    var UserId: js.UndefOr[String] = js.undefined
  }
  
  trait LaunchPermissionModifications extends js.Object {
    /**
      * The AWS account ID to add to the list of launch permissions for the AMI.
      */
    var Add: js.UndefOr[LaunchPermissionList] = js.undefined
    /**
      * The AWS account ID to remove from the list of launch permissions for the AMI.
      */
    var Remove: js.UndefOr[LaunchPermissionList] = js.undefined
  }
  
  trait LaunchSpecification extends js.Object {
    /**
      * Deprecated.
      */
    var AddressingType: js.UndefOr[String] = js.undefined
    /**
      * One or more block device mapping entries.
      */
    var BlockDeviceMappings: js.UndefOr[BlockDeviceMappingList] = js.undefined
    /**
      * Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false 
      */
    var EbsOptimized: js.UndefOr[Boolean] = js.undefined
    /**
      * The IAM instance profile.
      */
    var IamInstanceProfile: js.UndefOr[IamInstanceProfileSpecification] = js.undefined
    /**
      * The ID of the AMI.
      */
    var ImageId: js.UndefOr[String] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The ID of the kernel.
      */
    var KernelId: js.UndefOr[String] = js.undefined
    /**
      * The name of the key pair.
      */
    var KeyName: js.UndefOr[String] = js.undefined
    var Monitoring: js.UndefOr[RunInstancesMonitoringEnabled] = js.undefined
    /**
      * One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
      */
    var NetworkInterfaces: js.UndefOr[InstanceNetworkInterfaceSpecificationList] = js.undefined
    /**
      * The placement information for the instance.
      */
    var Placement: js.UndefOr[SpotPlacement] = js.undefined
    /**
      * The ID of the RAM disk.
      */
    var RamdiskId: js.UndefOr[String] = js.undefined
    /**
      * One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
      */
    var SecurityGroups: js.UndefOr[GroupIdentifierList] = js.undefined
    /**
      * The ID of the subnet in which to launch the instance.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * The Base64-encoded user data for the instance.
      */
    var UserData: js.UndefOr[String] = js.undefined
  }
  
  trait LaunchTemplate extends js.Object {
    /**
      * The time launch template was created.
      */
    var CreateTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The principal that created the launch template. 
      */
    var CreatedBy: js.UndefOr[String] = js.undefined
    /**
      * The version number of the default version of the launch template.
      */
    var DefaultVersionNumber: js.UndefOr[Long] = js.undefined
    /**
      * The version number of the latest version of the launch template.
      */
    var LatestVersionNumber: js.UndefOr[Long] = js.undefined
    /**
      * The ID of the launch template.
      */
    var LaunchTemplateId: js.UndefOr[String] = js.undefined
    /**
      * The name of the launch template.
      */
    var LaunchTemplateName: js.UndefOr[LaunchTemplateName] = js.undefined
    /**
      * The tags for the launch template.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
  }
  
  trait LaunchTemplateAndOverridesResponse extends js.Object {
    /**
      * The launch template.
      */
    var LaunchTemplateSpecification: js.UndefOr[FleetLaunchTemplateSpecification] = js.undefined
    /**
      * Any parameters that you specify override the same parameters in the launch template.
      */
    var Overrides: js.UndefOr[FleetLaunchTemplateOverrides] = js.undefined
  }
  
  trait LaunchTemplateBlockDeviceMapping extends js.Object {
    /**
      * The device name.
      */
    var DeviceName: js.UndefOr[String] = js.undefined
    /**
      * Information about the block device for an EBS volume.
      */
    var Ebs: js.UndefOr[LaunchTemplateEbsBlockDevice] = js.undefined
    /**
      * Suppresses the specified device included in the block device mapping of the AMI.
      */
    var NoDevice: js.UndefOr[String] = js.undefined
    /**
      * The virtual device name (ephemeralN).
      */
    var VirtualName: js.UndefOr[String] = js.undefined
  }
  
  trait LaunchTemplateBlockDeviceMappingRequest extends js.Object {
    /**
      * The device name (for example, /dev/sdh or xvdh).
      */
    var DeviceName: js.UndefOr[String] = js.undefined
    /**
      * Parameters used to automatically set up EBS volumes when the instance is launched.
      */
    var Ebs: js.UndefOr[LaunchTemplateEbsBlockDeviceRequest] = js.undefined
    /**
      * Suppresses the specified device included in the block device mapping of the AMI.
      */
    var NoDevice: js.UndefOr[String] = js.undefined
    /**
      * The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.
      */
    var VirtualName: js.UndefOr[String] = js.undefined
  }
  
  trait LaunchTemplateCapacityReservationSpecificationRequest extends js.Object {
    /**
      * Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.  
      */
    var CapacityReservationPreference: js.UndefOr[CapacityReservationPreference] = js.undefined
    /**
      * Information about the target Capacity Reservation.
      */
    var CapacityReservationTarget: js.UndefOr[CapacityReservationTarget] = js.undefined
  }
  
  trait LaunchTemplateCapacityReservationSpecificationResponse extends js.Object {
    /**
      * Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.  
      */
    var CapacityReservationPreference: js.UndefOr[CapacityReservationPreference] = js.undefined
    /**
      * Information about the target Capacity Reservation.
      */
    var CapacityReservationTarget: js.UndefOr[CapacityReservationTargetResponse] = js.undefined
  }
  
  trait LaunchTemplateConfig extends js.Object {
    /**
      * The launch template.
      */
    var LaunchTemplateSpecification: js.UndefOr[FleetLaunchTemplateSpecification] = js.undefined
    /**
      * Any parameters that you specify override the same parameters in the launch template.
      */
    var Overrides: js.UndefOr[LaunchTemplateOverridesList] = js.undefined
  }
  
  trait LaunchTemplateCpuOptions extends js.Object {
    /**
      * The number of CPU cores for the instance.
      */
    var CoreCount: js.UndefOr[Integer] = js.undefined
    /**
      * The number of threads per CPU core.
      */
    var ThreadsPerCore: js.UndefOr[Integer] = js.undefined
  }
  
  trait LaunchTemplateCpuOptionsRequest extends js.Object {
    /**
      * The number of CPU cores for the instance.
      */
    var CoreCount: js.UndefOr[Integer] = js.undefined
    /**
      * The number of threads per CPU core. To disable Intel Hyper-Threading Technology for the instance, specify a value of 1. Otherwise, specify the default value of 2.
      */
    var ThreadsPerCore: js.UndefOr[Integer] = js.undefined
  }
  
  trait LaunchTemplateEbsBlockDevice extends js.Object {
    /**
      * Indicates whether the EBS volume is deleted on instance termination.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether the EBS volume is encrypted.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * The number of I/O operations per second (IOPS) that the volume supports. 
      */
    var Iops: js.UndefOr[Integer] = js.undefined
    /**
      * The ARN of the AWS Key Management Service (AWS KMS) CMK used for encryption.
      */
    var KmsKeyId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the snapshot.
      */
    var SnapshotId: js.UndefOr[String] = js.undefined
    /**
      * The size of the volume, in GiB.
      */
    var VolumeSize: js.UndefOr[Integer] = js.undefined
    /**
      * The volume type.
      */
    var VolumeType: js.UndefOr[VolumeType] = js.undefined
  }
  
  trait LaunchTemplateEbsBlockDeviceRequest extends js.Object {
    /**
      * Indicates whether the EBS volume is deleted on instance termination.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * The number of I/O operations per second (IOPS) that the volume supports. For io1, this represents the number of IOPS that are provisioned for the volume. For gp2, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about General Purpose SSD baseline performance, I/O credits, and bursting, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Condition: This parameter is required for requests to create io1 volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.
      */
    var Iops: js.UndefOr[Integer] = js.undefined
    /**
      * The ARN of the AWS Key Management Service (AWS KMS) CMK used for encryption.
      */
    var KmsKeyId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the snapshot.
      */
    var SnapshotId: js.UndefOr[String] = js.undefined
    /**
      * The size of the volume, in GiB. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
      */
    var VolumeSize: js.UndefOr[Integer] = js.undefined
    /**
      * The volume type.
      */
    var VolumeType: js.UndefOr[VolumeType] = js.undefined
  }
  
  trait LaunchTemplateElasticInferenceAccelerator extends js.Object {
    /**
      *  The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge. 
      */
    var Type: String
  }
  
  trait LaunchTemplateElasticInferenceAcceleratorResponse extends js.Object {
    /**
      *  The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge. 
      */
    var Type: js.UndefOr[String] = js.undefined
  }
  
  trait LaunchTemplateHibernationOptions extends js.Object {
    /**
      * If this parameter is set to true, the instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
      */
    var Configured: js.UndefOr[Boolean] = js.undefined
  }
  
  trait LaunchTemplateHibernationOptionsRequest extends js.Object {
    /**
      * If you set this parameter to true, the instance is enabled for hibernation. Default: false 
      */
    var Configured: js.UndefOr[Boolean] = js.undefined
  }
  
  trait LaunchTemplateIamInstanceProfileSpecification extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the instance profile.
      */
    var Arn: js.UndefOr[String] = js.undefined
    /**
      * The name of the instance profile.
      */
    var Name: js.UndefOr[String] = js.undefined
  }
  
  trait LaunchTemplateIamInstanceProfileSpecificationRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the instance profile.
      */
    var Arn: js.UndefOr[String] = js.undefined
    /**
      * The name of the instance profile.
      */
    var Name: js.UndefOr[String] = js.undefined
  }
  
  trait LaunchTemplateInstanceMarketOptions extends js.Object {
    /**
      * The market type.
      */
    var MarketType: js.UndefOr[MarketType] = js.undefined
    /**
      * The options for Spot Instances.
      */
    var SpotOptions: js.UndefOr[LaunchTemplateSpotMarketOptions] = js.undefined
  }
  
  trait LaunchTemplateInstanceMarketOptionsRequest extends js.Object {
    /**
      * The market type.
      */
    var MarketType: js.UndefOr[MarketType] = js.undefined
    /**
      * The options for Spot Instances.
      */
    var SpotOptions: js.UndefOr[LaunchTemplateSpotMarketOptionsRequest] = js.undefined
  }
  
  trait LaunchTemplateInstanceNetworkInterfaceSpecification extends js.Object {
    /**
      * Indicates whether to associate a public IPv4 address with eth0 for a new network interface.
      */
    var AssociatePublicIpAddress: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether the network interface is deleted when the instance is terminated.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * A description for the network interface.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The device index for the network interface attachment.
      */
    var DeviceIndex: js.UndefOr[Integer] = js.undefined
    /**
      * The IDs of one or more security groups.
      */
    var Groups: js.UndefOr[GroupIdStringList] = js.undefined
    /**
      * The number of IPv6 addresses for the network interface.
      */
    var Ipv6AddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * The IPv6 addresses for the network interface.
      */
    var Ipv6Addresses: js.UndefOr[InstanceIpv6AddressList] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * The primary private IPv4 address of the network interface.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
    /**
      * One or more private IPv4 addresses.
      */
    var PrivateIpAddresses: js.UndefOr[PrivateIpAddressSpecificationList] = js.undefined
    /**
      * The number of secondary private IPv4 addresses for the network interface.
      */
    var SecondaryPrivateIpAddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the subnet for the network interface.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
  }
  
  trait LaunchTemplateInstanceNetworkInterfaceSpecificationRequest extends js.Object {
    /**
      * Associates a public IPv4 address with eth0 for a new network interface.
      */
    var AssociatePublicIpAddress: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether the network interface is deleted when the instance is terminated.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * A description for the network interface.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The device index for the network interface attachment.
      */
    var DeviceIndex: js.UndefOr[Integer] = js.undefined
    /**
      * The IDs of one or more security groups.
      */
    var Groups: js.UndefOr[SecurityGroupIdStringList] = js.undefined
    /**
      * The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
      */
    var Ipv6AddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
      */
    var Ipv6Addresses: js.UndefOr[InstanceIpv6AddressListRequest] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * The primary private IPv4 address of the network interface.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
    /**
      * One or more private IPv4 addresses.
      */
    var PrivateIpAddresses: js.UndefOr[PrivateIpAddressSpecificationList] = js.undefined
    /**
      * The number of secondary private IPv4 addresses to assign to a network interface.
      */
    var SecondaryPrivateIpAddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the subnet for the network interface.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
  }
  
  trait LaunchTemplateLicenseConfiguration extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the license configuration.
      */
    var LicenseConfigurationArn: js.UndefOr[String] = js.undefined
  }
  
  trait LaunchTemplateLicenseConfigurationRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the license configuration.
      */
    var LicenseConfigurationArn: js.UndefOr[String] = js.undefined
  }
  
  trait LaunchTemplateOverrides extends js.Object {
    /**
      * The Availability Zone in which to launch the instances.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The priority for the launch template override. If OnDemandAllocationStrategy is set to prioritized, Spot Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.
      */
    var Priority: js.UndefOr[Double] = js.undefined
    /**
      * The maximum price per unit hour that you are willing to pay for a Spot Instance.
      */
    var SpotPrice: js.UndefOr[String] = js.undefined
    /**
      * The ID of the subnet in which to launch the instances.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * The number of units provided by the specified instance type.
      */
    var WeightedCapacity: js.UndefOr[Double] = js.undefined
  }
  
  trait LaunchTemplatePlacement extends js.Object {
    /**
      * The affinity setting for the instance on the Dedicated Host.
      */
    var Affinity: js.UndefOr[String] = js.undefined
    /**
      * The Availability Zone of the instance.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The name of the placement group for the instance.
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Dedicated Host for the instance.
      */
    var HostId: js.UndefOr[String] = js.undefined
    /**
      * Reserved for future use.
      */
    var SpreadDomain: js.UndefOr[String] = js.undefined
    /**
      * The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. 
      */
    var Tenancy: js.UndefOr[Tenancy] = js.undefined
  }
  
  trait LaunchTemplatePlacementRequest extends js.Object {
    /**
      * The affinity setting for an instance on a Dedicated Host.
      */
    var Affinity: js.UndefOr[String] = js.undefined
    /**
      * The Availability Zone for the instance.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The name of the placement group for the instance.
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Dedicated Host for the instance.
      */
    var HostId: js.UndefOr[String] = js.undefined
    /**
      * Reserved for future use.
      */
    var SpreadDomain: js.UndefOr[String] = js.undefined
    /**
      * The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
      */
    var Tenancy: js.UndefOr[Tenancy] = js.undefined
  }
  
  trait LaunchTemplateSpecification extends js.Object {
    /**
      * The ID of the launch template.
      */
    var LaunchTemplateId: js.UndefOr[String] = js.undefined
    /**
      * The name of the launch template.
      */
    var LaunchTemplateName: js.UndefOr[String] = js.undefined
    /**
      * The version number of the launch template. Default: The default version for the launch template.
      */
    var Version: js.UndefOr[String] = js.undefined
  }
  
  trait LaunchTemplateSpotMarketOptions extends js.Object {
    /**
      * The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
      */
    var BlockDurationMinutes: js.UndefOr[Integer] = js.undefined
    /**
      * The behavior when a Spot Instance is interrupted.
      */
    var InstanceInterruptionBehavior: js.UndefOr[InstanceInterruptionBehavior] = js.undefined
    /**
      * The maximum hourly price you're willing to pay for the Spot Instances.
      */
    var MaxPrice: js.UndefOr[String] = js.undefined
    /**
      * The Spot Instance request type.
      */
    var SpotInstanceType: js.UndefOr[SpotInstanceType] = js.undefined
    /**
      * The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.
      */
    var ValidUntil: js.UndefOr[DateTime] = js.undefined
  }
  
  trait LaunchTemplateSpotMarketOptionsRequest extends js.Object {
    /**
      * The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
      */
    var BlockDurationMinutes: js.UndefOr[Integer] = js.undefined
    /**
      * The behavior when a Spot Instance is interrupted. The default is terminate.
      */
    var InstanceInterruptionBehavior: js.UndefOr[InstanceInterruptionBehavior] = js.undefined
    /**
      * The maximum hourly price you're willing to pay for the Spot Instances.
      */
    var MaxPrice: js.UndefOr[String] = js.undefined
    /**
      * The Spot Instance request type.
      */
    var SpotInstanceType: js.UndefOr[SpotInstanceType] = js.undefined
    /**
      * The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached. The default end date is 7 days from the current date.
      */
    var ValidUntil: js.UndefOr[DateTime] = js.undefined
  }
  
  trait LaunchTemplateTagSpecification extends js.Object {
    /**
      * The type of resource.
      */
    var ResourceType: js.UndefOr[ResourceType] = js.undefined
    /**
      * The tags for the resource.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
  }
  
  trait LaunchTemplateTagSpecificationRequest extends js.Object {
    /**
      * The type of resource to tag. Currently, the resource types that support tagging on creation are instance and volume. To tag a resource after it has been created, see CreateTags.
      */
    var ResourceType: js.UndefOr[ResourceType] = js.undefined
    /**
      * The tags to apply to the resource.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
  }
  
  trait LaunchTemplateVersion extends js.Object {
    /**
      * The time the version was created.
      */
    var CreateTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The principal that created the version.
      */
    var CreatedBy: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether the version is the default version.
      */
    var DefaultVersion: js.UndefOr[Boolean] = js.undefined
    /**
      * Information about the launch template.
      */
    var LaunchTemplateData: js.UndefOr[ResponseLaunchTemplateData] = js.undefined
    /**
      * The ID of the launch template.
      */
    var LaunchTemplateId: js.UndefOr[String] = js.undefined
    /**
      * The name of the launch template.
      */
    var LaunchTemplateName: js.UndefOr[LaunchTemplateName] = js.undefined
    /**
      * The description for the version.
      */
    var VersionDescription: js.UndefOr[VersionDescription] = js.undefined
    /**
      * The version number.
      */
    var VersionNumber: js.UndefOr[Long] = js.undefined
  }
  
  trait LaunchTemplatesMonitoring extends js.Object {
    /**
      * Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
      */
    var Enabled: js.UndefOr[Boolean] = js.undefined
  }
  
  trait LaunchTemplatesMonitoringRequest extends js.Object {
    /**
      * Specify true to enable detailed monitoring. Otherwise, basic monitoring is enabled.
      */
    var Enabled: js.UndefOr[Boolean] = js.undefined
  }
  
  trait LicenseConfiguration extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the license configuration.
      */
    var LicenseConfigurationArn: js.UndefOr[String] = js.undefined
  }
  
  trait LicenseConfigurationRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the license configuration.
      */
    var LicenseConfigurationArn: js.UndefOr[String] = js.undefined
  }
  
  trait LoadBalancersConfig extends js.Object {
    /**
      * The Classic Load Balancers.
      */
    var ClassicLoadBalancersConfig: js.UndefOr[ClassicLoadBalancersConfig] = js.undefined
    /**
      * The target groups.
      */
    var TargetGroupsConfig: js.UndefOr[TargetGroupsConfig] = js.undefined
  }
  
  trait LoadPermission extends js.Object {
    /**
      * The name of the group.
      */
    var Group: js.UndefOr[PermissionGroup] = js.undefined
    /**
      * The AWS account ID.
      */
    var UserId: js.UndefOr[String] = js.undefined
  }
  
  trait LoadPermissionModifications extends js.Object {
    /**
      * The load permissions to add.
      */
    var Add: js.UndefOr[LoadPermissionListRequest] = js.undefined
    /**
      * The load permissions to remove.
      */
    var Remove: js.UndefOr[LoadPermissionListRequest] = js.undefined
  }
  
  trait LoadPermissionRequest extends js.Object {
    /**
      * The name of the group.
      */
    var Group: js.UndefOr[PermissionGroup] = js.undefined
    /**
      * The AWS account ID.
      */
    var UserId: js.UndefOr[String] = js.undefined
  }
  
  trait ModifyCapacityReservationRequest extends js.Object {
    /**
      * The ID of the Capacity Reservation.
      */
    var CapacityReservationId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time. The Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019. You must provide an EndDate value if EndDateType is limited. Omit EndDate if EndDateType is unlimited.
      */
    var EndDate: js.UndefOr[DateTime] = js.undefined
    /**
      * Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an EndDate value if EndDateType is unlimited.    limited - The Capacity Reservation expires automatically at a specified date and time. You must provide an EndDate value if EndDateType is limited.  
      */
    var EndDateType: js.UndefOr[EndDateType] = js.undefined
    /**
      * The number of instances for which to reserve capacity.
      */
    var InstanceCount: js.UndefOr[Integer] = js.undefined
  }
  
  trait ModifyCapacityReservationResult extends js.Object {
    /**
      * Information about the Capacity Reservation.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ModifyClientVpnEndpointRequest extends js.Object {
    /**
      * The ID of the Client VPN endpoint to modify.
      */
    var ClientVpnEndpointId: String
    /**
      * Information about the client connection logging options. If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:   Client connection requests   Client connection results (successful and unsuccessful)   Reasons for unsuccessful client connection requests   Client connection termination time  
      */
    var ConnectionLogOptions: js.UndefOr[ConnectionLogOptions] = js.undefined
    /**
      * A brief description of the Client VPN endpoint.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have up to two DNS servers.
      */
    var DnsServers: js.UndefOr[DnsServersOptionsModifyStructure] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ARN of the server certificate to be used. The server certificate must be provisioned in AWS Certificate Manager (ACM).
      */
    var ServerCertificateArn: js.UndefOr[String] = js.undefined
  }
  
  trait ModifyClientVpnEndpointResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ModifyFleetRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
      */
    var ExcessCapacityTerminationPolicy: js.UndefOr[FleetExcessCapacityTerminationPolicy] = js.undefined
    /**
      * The ID of the EC2 Fleet.
      */
    var FleetId: FleetIdentifier
    /**
      * The size of the EC2 Fleet.
      */
    var TargetCapacitySpecification: TargetCapacitySpecificationRequest
  }
  
  trait ModifyFleetResult extends js.Object {
    /**
      * Is true if the request succeeds, and an error otherwise.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ModifyFpgaImageAttributeRequest extends js.Object {
    /**
      * The name of the attribute.
      */
    var Attribute: js.UndefOr[FpgaImageAttributeName] = js.undefined
    /**
      * A description for the AFI.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the AFI.
      */
    var FpgaImageId: String
    /**
      * The load permission for the AFI.
      */
    var LoadPermission: js.UndefOr[LoadPermissionModifications] = js.undefined
    /**
      * A name for the AFI.
      */
    var Name: js.UndefOr[String] = js.undefined
    /**
      * The operation type.
      */
    var OperationType: js.UndefOr[OperationType] = js.undefined
    /**
      * One or more product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the productCodes attribute.
      */
    var ProductCodes: js.UndefOr[ProductCodeStringList] = js.undefined
    /**
      * One or more user groups. This parameter is valid only when modifying the loadPermission attribute.
      */
    var UserGroups: js.UndefOr[UserGroupStringList] = js.undefined
    /**
      * One or more AWS account IDs. This parameter is valid only when modifying the loadPermission attribute.
      */
    var UserIds: js.UndefOr[UserIdStringList] = js.undefined
  }
  
  trait ModifyFpgaImageAttributeResult extends js.Object {
    /**
      * Information about the attribute.
      */
    var FpgaImageAttribute: js.UndefOr[FpgaImageAttribute] = js.undefined
  }
  
  trait ModifyHostsRequest extends js.Object {
    /**
      * Specify whether to enable or disable auto-placement.
      */
    var AutoPlacement: AutoPlacement
    /**
      * The IDs of the Dedicated Hosts to modify.
      */
    var HostIds: RequestHostIdList
  }
  
  trait ModifyHostsResult extends js.Object {
    /**
      * The IDs of the Dedicated Hosts that were successfully modified.
      */
    var Successful: js.UndefOr[ResponseHostIdList] = js.undefined
    /**
      * The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used.
      */
    var Unsuccessful: js.UndefOr[UnsuccessfulItemList] = js.undefined
  }
  
  trait ModifyIdFormatRequest extends js.Object {
    /**
      * The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs.
      */
    var Resource: String
    /**
      * Indicate whether the resource should use longer IDs (17-character IDs).
      */
    var UseLongIds: Boolean
  }
  
  trait ModifyIdentityIdFormatRequest extends js.Object {
    /**
      * The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify all to modify the ID format for all IAM users, IAM roles, and the root user of the account.
      */
    var PrincipalArn: String
    /**
      * The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs.
      */
    var Resource: String
    /**
      * Indicates whether the resource should use longer IDs (17-character IDs)
      */
    var UseLongIds: Boolean
  }
  
  trait ModifyImageAttributeRequest extends js.Object {
    /**
      * The name of the attribute to modify. The valid values are description, launchPermission, and productCodes.
      */
    var Attribute: js.UndefOr[String] = js.undefined
    /**
      * A new description for the AMI.
      */
    var Description: js.UndefOr[AttributeValue] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the AMI.
      */
    var ImageId: String
    /**
      * A new launch permission for the AMI.
      */
    var LaunchPermission: js.UndefOr[LaunchPermissionModifications] = js.undefined
    /**
      * The operation type. This parameter can be used only when the Attribute parameter is launchPermission.
      */
    var OperationType: js.UndefOr[OperationType] = js.undefined
    /**
      * One or more DevPay product codes. After you add a product code to an AMI, it can't be removed.
      */
    var ProductCodes: js.UndefOr[ProductCodeStringList] = js.undefined
    /**
      * One or more user groups. This parameter can be used only when the Attribute parameter is launchPermission.
      */
    var UserGroups: js.UndefOr[UserGroupStringList] = js.undefined
    /**
      * One or more AWS account IDs. This parameter can be used only when the Attribute parameter is launchPermission.
      */
    var UserIds: js.UndefOr[UserIdStringList] = js.undefined
    /**
      * The value of the attribute being modified. This parameter can be used only when the Attribute parameter is description or productCodes.
      */
    var Value: js.UndefOr[String] = js.undefined
  }
  
  trait ModifyInstanceAttributeRequest extends js.Object {
    /**
      * The name of the attribute.
      */
    var Attribute: js.UndefOr[InstanceAttributeName] = js.undefined
    /**
      * Modifies the DeleteOnTermination attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for DeleteOnTermination, the default is true and the volume is deleted when the instance is terminated. To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see Updating the Block Device Mapping when Launching an Instance in the Amazon Elastic Compute Cloud User Guide.
      */
    var BlockDeviceMappings: js.UndefOr[InstanceBlockDeviceMappingSpecificationList] = js.undefined
    /**
      * If the value is true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use this parameter for Spot Instances.
      */
    var DisableApiTermination: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Specifies whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
      */
    var EbsOptimized: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * Set to true to enable enhanced networking with ENA for the instance. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
      */
    var EnaSupport: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * [EC2-VPC] Changes the security groups of the instance. You must specify at least one security group, even if it's just the default security group for the VPC. You must specify the security group ID, not the security group name.
      */
    var Groups: js.UndefOr[GroupIdStringList] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: String
    /**
      * Specifies whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
      */
    var InstanceInitiatedShutdownBehavior: js.UndefOr[AttributeValue] = js.undefined
    /**
      * Changes the instance type to the specified value. For more information, see Instance Types. If the instance type is not valid, the error returned is InvalidInstanceAttributeValue.
      */
    var InstanceType: js.UndefOr[AttributeValue] = js.undefined
    /**
      * Changes the instance's kernel to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
      */
    var Kernel: js.UndefOr[AttributeValue] = js.undefined
    /**
      * Changes the instance's RAM disk to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
      */
    var Ramdisk: js.UndefOr[AttributeValue] = js.undefined
    /**
      * Specifies whether source/destination checking is enabled. A value of true means that checking is enabled, and false means that checking is disabled. This value must be false for a NAT instance to perform NAT.
      */
    var SourceDestCheck: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the instance. There is no way to disable enhanced networking with the Intel 82599 Virtual Function interface at this time. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
      */
    var SriovNetSupport: js.UndefOr[AttributeValue] = js.undefined
    /**
      * Changes the instance's user data to the specified value. If you are using an AWS SDK or command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text.
      */
    var UserData: js.UndefOr[BlobAttributeValue] = js.undefined
    /**
      * A new value for the attribute. Use only with the kernel, ramdisk, userData, disableApiTermination, or instanceInitiatedShutdownBehavior attribute.
      */
    var Value: js.UndefOr[String] = js.undefined
  }
  
  trait ModifyInstanceCapacityReservationAttributesRequest extends js.Object {
    /**
      * Information about the Capacity Reservation targeting option.
      */
    var CapacityReservationSpecification: CapacityReservationSpecification
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance to be modified.
      */
    var InstanceId: String
  }
  
  trait ModifyInstanceCapacityReservationAttributesResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ModifyInstanceCreditSpecificationRequest extends js.Object {
    /**
      * A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Information about the credit option for CPU usage.
      */
    var InstanceCreditSpecifications: InstanceCreditSpecificationListRequest
  }
  
  trait ModifyInstanceCreditSpecificationResult extends js.Object {
    /**
      * Information about the instances whose credit option for CPU usage was successfully modified.
      */
    var SuccessfulInstanceCreditSpecifications: js.UndefOr[SuccessfulInstanceCreditSpecificationSet] = js.undefined
    /**
      * Information about the instances whose credit option for CPU usage was not modified.
      */
    var UnsuccessfulInstanceCreditSpecifications: js.UndefOr[UnsuccessfulInstanceCreditSpecificationSet] = js.undefined
  }
  
  trait ModifyInstancePlacementRequest extends js.Object {
    /**
      * The affinity setting for the instance.
      */
    var Affinity: js.UndefOr[Affinity] = js.undefined
    /**
      * The name of the placement group in which to place the instance. For spread placement groups, the instance must have a tenancy of default. For cluster and partition placement groups, the instance must have a tenancy of default or dedicated. To remove an instance from a placement group, specify an empty string ("").
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Dedicated Host with which to associate the instance.
      */
    var HostId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the instance that you are modifying.
      */
    var InstanceId: String
    /**
      * Reserved for future use.
      */
    var PartitionNumber: js.UndefOr[Integer] = js.undefined
    /**
      * The tenancy for the instance.
      */
    var Tenancy: js.UndefOr[HostTenancy] = js.undefined
  }
  
  trait ModifyInstancePlacementResult extends js.Object {
    /**
      * Is true if the request succeeds, and an error otherwise.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ModifyLaunchTemplateRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraint: Maximum 128 ASCII characters.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The version number of the launch template to set as the default version.
      */
    var DefaultVersion: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      */
    var LaunchTemplateId: js.UndefOr[String] = js.undefined
    /**
      * The name of the launch template. You must specify either the launch template ID or launch template name in the request.
      */
    var LaunchTemplateName: js.UndefOr[LaunchTemplateName] = js.undefined
  }
  
  trait ModifyLaunchTemplateResult extends js.Object {
    /**
      * Information about the launch template.
      */
    var LaunchTemplate: js.UndefOr[LaunchTemplate] = js.undefined
  }
  
  trait ModifyNetworkInterfaceAttributeRequest extends js.Object {
    /**
      * Information about the interface attachment. If modifying the 'delete on termination' attribute, you must specify the ID of the interface attachment.
      */
    var Attachment: js.UndefOr[NetworkInterfaceAttachmentChanges] = js.undefined
    /**
      * A description for the network interface.
      */
    var Description: js.UndefOr[AttributeValue] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.
      */
    var Groups: js.UndefOr[SecurityGroupIdStringList] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: String
    /**
      * Indicates whether source/destination checking is enabled. A value of true means checking is enabled, and false means checking is disabled. This value must be false for a NAT instance to perform NAT. For more information, see NAT Instances in the Amazon Virtual Private Cloud User Guide.
      */
    var SourceDestCheck: js.UndefOr[AttributeBooleanValue] = js.undefined
  }
  
  trait ModifyReservedInstancesRequest extends js.Object {
    /**
      * A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The IDs of the Reserved Instances to modify.
      */
    var ReservedInstancesIds: ReservedInstancesIdStringList
    /**
      * The configuration settings for the Reserved Instances to modify.
      */
    var TargetConfigurations: ReservedInstancesConfigurationList
  }
  
  trait ModifyReservedInstancesResult extends js.Object {
    /**
      * The ID for the modification.
      */
    var ReservedInstancesModificationId: js.UndefOr[String] = js.undefined
  }
  
  trait ModifySnapshotAttributeRequest extends js.Object {
    /**
      * The snapshot attribute to modify. Only volume creation permissions can be modified.
      */
    var Attribute: js.UndefOr[SnapshotAttributeName] = js.undefined
    /**
      * A JSON representation of the snapshot attribute modification.
      */
    var CreateVolumePermission: js.UndefOr[CreateVolumePermissionModifications] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The group to modify for the snapshot.
      */
    var GroupNames: js.UndefOr[GroupNameStringList] = js.undefined
    /**
      * The type of operation to perform to the attribute.
      */
    var OperationType: js.UndefOr[OperationType] = js.undefined
    /**
      * The ID of the snapshot.
      */
    var SnapshotId: String
    /**
      * The account ID to modify for the snapshot.
      */
    var UserIds: js.UndefOr[UserIdStringList] = js.undefined
  }
  
  trait ModifySpotFleetRequestRequest extends js.Object {
    /**
      * Indicates whether running Spot Instances should be terminated if the target capacity of the Spot Fleet request is decreased below the current size of the Spot Fleet.
      */
    var ExcessCapacityTerminationPolicy: js.UndefOr[ExcessCapacityTerminationPolicy] = js.undefined
    /**
      * The ID of the Spot Fleet request.
      */
    var SpotFleetRequestId: String
    /**
      * The size of the fleet.
      */
    var TargetCapacity: js.UndefOr[Integer] = js.undefined
  }
  
  trait ModifySpotFleetRequestResponse extends js.Object {
    /**
      * Is true if the request succeeds, and an error otherwise.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ModifySubnetAttributeRequest extends js.Object {
    /**
      * Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address).  If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version 2016-11-15 or later of the Amazon EC2 API.
      */
    var AssignIpv6AddressOnCreation: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * Specify true to indicate that network interfaces created in the specified subnet should be assigned a public IPv4 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives a public IPv4 address).
      */
    var MapPublicIpOnLaunch: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * The ID of the subnet.
      */
    var SubnetId: String
  }
  
  trait ModifyTransitGatewayVpcAttachmentRequest extends js.Object {
    /**
      * The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone.
      */
    var AddSubnetIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The new VPC attachment options.
      */
    var Options: js.UndefOr[ModifyTransitGatewayVpcAttachmentRequestOptions] = js.undefined
    /**
      * The IDs of one or more subnets to remove.
      */
    var RemoveSubnetIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: String
  }
  
  trait ModifyTransitGatewayVpcAttachmentRequestOptions extends js.Object {
    /**
      * Enable or disable DNS support. The default is enable.
      */
    var DnsSupport: js.UndefOr[DnsSupportValue] = js.undefined
    /**
      * Enable or disable IPv6 support. The default is enable.
      */
    var Ipv6Support: js.UndefOr[Ipv6SupportValue] = js.undefined
  }
  
  trait ModifyTransitGatewayVpcAttachmentResult extends js.Object {
    /**
      * Information about the modified attachment.
      */
    var TransitGatewayVpcAttachment: js.UndefOr[TransitGatewayVpcAttachment] = js.undefined
  }
  
  trait ModifyVolumeAttributeRequest extends js.Object {
    /**
      * Indicates whether the volume should be auto-enabled for I/O operations.
      */
    var AutoEnableIO: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the volume.
      */
    var VolumeId: String
  }
  
  trait ModifyVolumeRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The target IOPS rate of the volume. This is only valid for Provisioned IOPS SSD (io1) volumes. For more information, see Provisioned IOPS SSD (io1) Volumes. Default: If no IOPS value is specified, the existing value is retained.
      */
    var Iops: js.UndefOr[Integer] = js.undefined
    /**
      * The target size of the volume, in GiB. The target volume size must be greater than or equal to than the existing size of the volume. For information about available EBS volume sizes, see Amazon EBS Volume Types. Default: If no size is specified, the existing size is retained.
      */
    var Size: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the volume.
      */
    var VolumeId: String
    /**
      * The target EBS volume type of the volume. Default: If no type is specified, the existing type is retained.
      */
    var VolumeType: js.UndefOr[VolumeType] = js.undefined
  }
  
  trait ModifyVolumeResult extends js.Object {
    /**
      * Information about the volume modification.
      */
    var VolumeModification: js.UndefOr[VolumeModification] = js.undefined
  }
  
  trait ModifyVpcAttributeRequest extends js.Object {
    /**
      * Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.
      */
    var EnableDnsHostnames: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.
      */
    var EnableDnsSupport: js.UndefOr[AttributeBooleanValue] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait ModifyVpcEndpointConnectionNotificationRequest extends js.Object {
    /**
      * One or more events for the endpoint. Valid values are Accept, Connect, Delete, and Reject.
      */
    var ConnectionEvents: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The ARN for the SNS topic for the notification.
      */
    var ConnectionNotificationArn: js.UndefOr[String] = js.undefined
    /**
      * The ID of the notification.
      */
    var ConnectionNotificationId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ModifyVpcEndpointConnectionNotificationResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var ReturnValue: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ModifyVpcEndpointRequest extends js.Object {
    /**
      * (Gateway endpoint) One or more route tables IDs to associate with the endpoint.
      */
    var AddRouteTableIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * (Interface endpoint) One or more security group IDs to associate with the network interface.
      */
    var AddSecurityGroupIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * (Interface endpoint) One or more subnet IDs in which to serve the endpoint.
      */
    var AddSubnetIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * (Gateway endpoint) A policy document to attach to the endpoint. The policy must be in valid JSON format.
      */
    var PolicyDocument: js.UndefOr[String] = js.undefined
    /**
      * (Interface endpoint) Indicate whether a private hosted zone is associated with the VPC.
      */
    var PrivateDnsEnabled: js.UndefOr[Boolean] = js.undefined
    /**
      * (Gateway endpoint) One or more route table IDs to disassociate from the endpoint.
      */
    var RemoveRouteTableIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * (Interface endpoint) One or more security group IDs to disassociate from the network interface.
      */
    var RemoveSecurityGroupIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * (Interface endpoint) One or more subnets IDs in which to remove the endpoint.
      */
    var RemoveSubnetIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * (Gateway endpoint) Specify true to reset the policy document to the default policy. The default policy allows full access to the service.
      */
    var ResetPolicy: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the endpoint.
      */
    var VpcEndpointId: String
  }
  
  trait ModifyVpcEndpointResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ModifyVpcEndpointServiceConfigurationRequest extends js.Object {
    /**
      * Indicate whether requests to create an endpoint to your service must be accepted.
      */
    var AcceptanceRequired: js.UndefOr[Boolean] = js.undefined
    /**
      * The Amazon Resource Names (ARNs) of Network Load Balancers to add to your service configuration.
      */
    var AddNetworkLoadBalancerArns: js.UndefOr[ValueStringList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The Amazon Resource Names (ARNs) of Network Load Balancers to remove from your service configuration.
      */
    var RemoveNetworkLoadBalancerArns: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The ID of the service.
      */
    var ServiceId: String
  }
  
  trait ModifyVpcEndpointServiceConfigurationResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ModifyVpcEndpointServicePermissionsRequest extends js.Object {
    /**
      * The Amazon Resource Names (ARN) of one or more principals. Permissions are granted to the principals in this list. To grant permissions to all principals, specify an asterisk (*).
      */
    var AddAllowedPrincipals: js.UndefOr[ValueStringList] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The Amazon Resource Names (ARN) of one or more principals. Permissions are revoked for principals in this list.
      */
    var RemoveAllowedPrincipals: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The ID of the service.
      */
    var ServiceId: String
  }
  
  trait ModifyVpcEndpointServicePermissionsResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var ReturnValue: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ModifyVpcPeeringConnectionOptionsRequest extends js.Object {
    /**
      * The VPC peering connection options for the accepter VPC.
      */
    var AccepterPeeringConnectionOptions: js.UndefOr[PeeringConnectionOptionsRequest] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The VPC peering connection options for the requester VPC.
      */
    var RequesterPeeringConnectionOptions: js.UndefOr[PeeringConnectionOptionsRequest] = js.undefined
    /**
      * The ID of the VPC peering connection.
      */
    var VpcPeeringConnectionId: String
  }
  
  trait ModifyVpcPeeringConnectionOptionsResult extends js.Object {
    /**
      * Information about the VPC peering connection options for the accepter VPC.
      */
    var AccepterPeeringConnectionOptions: js.UndefOr[PeeringConnectionOptions] = js.undefined
    /**
      * Information about the VPC peering connection options for the requester VPC.
      */
    var RequesterPeeringConnectionOptions: js.UndefOr[PeeringConnectionOptions] = js.undefined
  }
  
  trait ModifyVpcTenancyRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The instance tenancy attribute for the VPC. 
      */
    var InstanceTenancy: VpcTenancy
    /**
      * The ID of the VPC.
      */
    var VpcId: String
  }
  
  trait ModifyVpcTenancyResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, returns an error.
      */
    var ReturnValue: js.UndefOr[Boolean] = js.undefined
  }
  
  trait MonitorInstancesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more instance IDs.
      */
    var InstanceIds: InstanceIdStringList
  }
  
  trait MonitorInstancesResult extends js.Object {
    /**
      * The monitoring information.
      */
    var InstanceMonitorings: js.UndefOr[InstanceMonitoringList] = js.undefined
  }
  
  trait Monitoring extends js.Object {
    /**
      * Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
      */
    var State: js.UndefOr[MonitoringState] = js.undefined
  }
  
  trait MoveAddressToVpcRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The Elastic IP address.
      */
    var PublicIp: String
  }
  
  trait MoveAddressToVpcResult extends js.Object {
    /**
      * The allocation ID for the Elastic IP address.
      */
    var AllocationId: js.UndefOr[String] = js.undefined
    /**
      * The status of the move of the IP address.
      */
    var Status: js.UndefOr[Status] = js.undefined
  }
  
  trait MovingAddressStatus extends js.Object {
    /**
      * The status of the Elastic IP address that's being moved to the EC2-VPC platform, or restored to the EC2-Classic platform.
      */
    var MoveStatus: js.UndefOr[MoveStatus] = js.undefined
    /**
      * The Elastic IP address.
      */
    var PublicIp: js.UndefOr[String] = js.undefined
  }
  
  trait NatGateway extends js.Object {
    /**
      * The date and time the NAT gateway was created.
      */
    var CreateTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The date and time the NAT gateway was deleted, if applicable.
      */
    var DeleteTime: js.UndefOr[DateTime] = js.undefined
    /**
      * If the NAT gateway could not be created, specifies the error code for the failure. (InsufficientFreeAddressesInSubnet | Gateway.NotAttached | InvalidAllocationID.NotFound | Resource.AlreadyAssociated | InternalError | InvalidSubnetID.NotFound)
      */
    var FailureCode: js.UndefOr[String] = js.undefined
    /**
      * If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.   For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free addresses to create this NAT gateway"   For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway attached"   For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway"   For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is already associated"   For InternalError: "Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again."   For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not exist or could not be found."  
      */
    var FailureMessage: js.UndefOr[String] = js.undefined
    /**
      * Information about the IP addresses and network interface associated with the NAT gateway.
      */
    var NatGatewayAddresses: js.UndefOr[NatGatewayAddressList] = js.undefined
    /**
      * The ID of the NAT gateway.
      */
    var NatGatewayId: js.UndefOr[String] = js.undefined
    /**
      * Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
      */
    var ProvisionedBandwidth: js.UndefOr[ProvisionedBandwidth] = js.undefined
    /**
      * The state of the NAT gateway.    pending: The NAT gateway is being created and is not ready to process traffic.    failed: The NAT gateway could not be created. Check the failureCode and failureMessage fields for the reason.    available: The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.    deleting: The NAT gateway is in the process of being terminated and may still be processing traffic.    deleted: The NAT gateway has been terminated and is no longer processing traffic.  
      */
    var State: js.UndefOr[NatGatewayState] = js.undefined
    /**
      * The ID of the subnet in which the NAT gateway is located.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * The tags for the NAT gateway.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the VPC in which the NAT gateway is located.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait NatGatewayAddress extends js.Object {
    /**
      * The allocation ID of the Elastic IP address that's associated with the NAT gateway.
      */
    var AllocationId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the network interface associated with the NAT gateway.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * The private IP address associated with the Elastic IP address.
      */
    var PrivateIp: js.UndefOr[String] = js.undefined
    /**
      * The Elastic IP address associated with the NAT gateway.
      */
    var PublicIp: js.UndefOr[String] = js.undefined
  }
  
  trait NetworkAcl extends js.Object {
    /**
      * Any associations between the network ACL and one or more subnets
      */
    var Associations: js.UndefOr[NetworkAclAssociationList] = js.undefined
    /**
      * One or more entries (rules) in the network ACL.
      */
    var Entries: js.UndefOr[NetworkAclEntryList] = js.undefined
    /**
      * Indicates whether this is the default network ACL for the VPC.
      */
    var IsDefault: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the network ACL.
      */
    var NetworkAclId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the AWS account that owns the network ACL.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * Any tags assigned to the network ACL.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the VPC for the network ACL.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait NetworkAclAssociation extends js.Object {
    /**
      * The ID of the association between a network ACL and a subnet.
      */
    var NetworkAclAssociationId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the network ACL.
      */
    var NetworkAclId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the subnet.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
  }
  
  trait NetworkAclEntry extends js.Object {
    /**
      * The IPv4 network range to allow or deny, in CIDR notation.
      */
    var CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether the rule is an egress rule (applied to traffic leaving the subnet).
      */
    var Egress: js.UndefOr[Boolean] = js.undefined
    /**
      * ICMP protocol: The ICMP type and code.
      */
    var IcmpTypeCode: js.UndefOr[IcmpTypeCode] = js.undefined
    /**
      * The IPv6 network range to allow or deny, in CIDR notation.
      */
    var Ipv6CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * TCP or UDP protocols: The range of ports the rule applies to.
      */
    var PortRange: js.UndefOr[PortRange] = js.undefined
    /**
      * The protocol number. A value of "-1" means all protocols.
      */
    var Protocol: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether to allow or deny the traffic that matches the rule.
      */
    var RuleAction: js.UndefOr[RuleAction] = js.undefined
    /**
      * The rule number for the entry. ACL entries are processed in ascending order by rule number.
      */
    var RuleNumber: js.UndefOr[Integer] = js.undefined
  }
  
  trait NetworkInterface extends js.Object {
    /**
      * The association information for an Elastic IP address (IPv4) associated with the network interface.
      */
    var Association: js.UndefOr[NetworkInterfaceAssociation] = js.undefined
    /**
      * The network interface attachment.
      */
    var Attachment: js.UndefOr[NetworkInterfaceAttachment] = js.undefined
    /**
      * The Availability Zone.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * A description.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Any security groups for the network interface.
      */
    var Groups: js.UndefOr[GroupIdentifierList] = js.undefined
    /**
      * The type of interface.
      */
    var InterfaceType: js.UndefOr[NetworkInterfaceType] = js.undefined
    /**
      * The IPv6 addresses associated with the network interface.
      */
    var Ipv6Addresses: js.UndefOr[NetworkInterfaceIpv6AddressesList] = js.undefined
    /**
      * The MAC address.
      */
    var MacAddress: js.UndefOr[String] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * The AWS account ID of the owner of the network interface.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * The private DNS name.
      */
    var PrivateDnsName: js.UndefOr[String] = js.undefined
    /**
      * The IPv4 address of the network interface within the subnet.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
    /**
      * The private IPv4 addresses associated with the network interface.
      */
    var PrivateIpAddresses: js.UndefOr[NetworkInterfacePrivateIpAddressList] = js.undefined
    /**
      * The ID of the entity that launched the instance on your behalf (for example, AWS Management Console or Auto Scaling).
      */
    var RequesterId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether the network interface is being managed by AWS.
      */
    var RequesterManaged: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether traffic to or from the instance is validated.
      */
    var SourceDestCheck: js.UndefOr[Boolean] = js.undefined
    /**
      * The status of the network interface.
      */
    var Status: js.UndefOr[NetworkInterfaceStatus] = js.undefined
    /**
      * The ID of the subnet.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * Any tags assigned to the network interface.
      */
    var TagSet: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait NetworkInterfaceAssociation extends js.Object {
    /**
      * The allocation ID.
      */
    var AllocationId: js.UndefOr[String] = js.undefined
    /**
      * The association ID.
      */
    var AssociationId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Elastic IP address owner.
      */
    var IpOwnerId: js.UndefOr[String] = js.undefined
    /**
      * The public DNS name.
      */
    var PublicDnsName: js.UndefOr[String] = js.undefined
    /**
      * The address of the Elastic IP address bound to the network interface.
      */
    var PublicIp: js.UndefOr[String] = js.undefined
  }
  
  trait NetworkInterfaceAttachment extends js.Object {
    /**
      * The timestamp indicating when the attachment initiated.
      */
    var AttachTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The ID of the network interface attachment.
      */
    var AttachmentId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether the network interface is deleted when the instance is terminated.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * The device index of the network interface attachment on the instance.
      */
    var DeviceIndex: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The AWS account ID of the owner of the instance.
      */
    var InstanceOwnerId: js.UndefOr[String] = js.undefined
    /**
      * The attachment state.
      */
    var Status: js.UndefOr[AttachmentStatus] = js.undefined
  }
  
  trait NetworkInterfaceAttachmentChanges extends js.Object {
    /**
      * The ID of the network interface attachment.
      */
    var AttachmentId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether the network interface is deleted when the instance is terminated.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
  }
  
  trait NetworkInterfaceIpv6Address extends js.Object {
    /**
      * The IPv6 address.
      */
    var Ipv6Address: js.UndefOr[String] = js.undefined
  }
  
  trait NetworkInterfacePermission extends js.Object {
    /**
      * The AWS account ID.
      */
    var AwsAccountId: js.UndefOr[String] = js.undefined
    /**
      * The AWS service.
      */
    var AwsService: js.UndefOr[String] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the network interface permission.
      */
    var NetworkInterfacePermissionId: js.UndefOr[String] = js.undefined
    /**
      * The type of permission.
      */
    var Permission: js.UndefOr[InterfacePermissionType] = js.undefined
    /**
      * Information about the state of the permission.
      */
    var PermissionState: js.UndefOr[NetworkInterfacePermissionState] = js.undefined
  }
  
  trait NetworkInterfacePermissionState extends js.Object {
    /**
      * The state of the permission.
      */
    var State: js.UndefOr[NetworkInterfacePermissionStateCode] = js.undefined
    /**
      * A status message, if applicable.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
  }
  
  trait NetworkInterfacePrivateIpAddress extends js.Object {
    /**
      * The association information for an Elastic IP address (IPv4) associated with the network interface.
      */
    var Association: js.UndefOr[NetworkInterfaceAssociation] = js.undefined
    /**
      * Indicates whether this IPv4 address is the primary private IPv4 address of the network interface.
      */
    var Primary: js.UndefOr[Boolean] = js.undefined
    /**
      * The private DNS name.
      */
    var PrivateDnsName: js.UndefOr[String] = js.undefined
    /**
      * The private IPv4 address.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
  }
  
  trait NewDhcpConfiguration extends js.Object {
    var Key: js.UndefOr[String] = js.undefined
    var Values: js.UndefOr[ValueStringList] = js.undefined
  }
  
  trait OnDemandOptions extends js.Object {
    /**
      * The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowest-price, EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to lowest-price.
      */
    var AllocationStrategy: js.UndefOr[FleetOnDemandAllocationStrategy] = js.undefined
    /**
      * The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
      */
    var MinTargetCapacity: js.UndefOr[Integer] = js.undefined
    /**
      * Indicates that the fleet launches all On-Demand Instances into a single Availability Zone.
      */
    var SingleAvailabilityZone: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.
      */
    var SingleInstanceType: js.UndefOr[Boolean] = js.undefined
  }
  
  trait OnDemandOptionsRequest extends js.Object {
    /**
      * The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowest-price, EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to lowest-price.
      */
    var AllocationStrategy: js.UndefOr[FleetOnDemandAllocationStrategy] = js.undefined
    /**
      * The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
      */
    var MinTargetCapacity: js.UndefOr[Integer] = js.undefined
    /**
      * Indicates that the fleet launches all On-Demand Instances into a single Availability Zone.
      */
    var SingleAvailabilityZone: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.
      */
    var SingleInstanceType: js.UndefOr[Boolean] = js.undefined
  }
  
  trait PciId extends js.Object {
    /**
      * The ID of the device.
      */
    var DeviceId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the subsystem.
      */
    var SubsystemId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the vendor for the subsystem.
      */
    var SubsystemVendorId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the vendor.
      */
    var VendorId: js.UndefOr[String] = js.undefined
  }
  
  trait PeeringConnectionOptions extends js.Object {
    /**
      * If true, the public DNS hostnames of instances in the specified VPC resolve to private IP addresses when queried from instances in the peer VPC.
      */
    var AllowDnsResolutionFromRemoteVpc: js.UndefOr[Boolean] = js.undefined
    /**
      * If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
      */
    var AllowEgressFromLocalClassicLinkToRemoteVpc: js.UndefOr[Boolean] = js.undefined
    /**
      * If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
      */
    var AllowEgressFromLocalVpcToRemoteClassicLink: js.UndefOr[Boolean] = js.undefined
  }
  
  trait PeeringConnectionOptionsRequest extends js.Object {
    /**
      * If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.
      */
    var AllowDnsResolutionFromRemoteVpc: js.UndefOr[Boolean] = js.undefined
    /**
      * If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
      */
    var AllowEgressFromLocalClassicLinkToRemoteVpc: js.UndefOr[Boolean] = js.undefined
    /**
      * If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
      */
    var AllowEgressFromLocalVpcToRemoteClassicLink: js.UndefOr[Boolean] = js.undefined
  }
  
  trait Placement extends js.Object {
    /**
      * The affinity setting for the instance on the Dedicated Host. This parameter is not supported for the ImportInstance command.
      */
    var Affinity: js.UndefOr[String] = js.undefined
    /**
      * The Availability Zone of the instance.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The name of the placement group the instance is in.
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Dedicated Host on which the instance resides. This parameter is not supported for the ImportInstance command.
      */
    var HostId: js.UndefOr[String] = js.undefined
    /**
      * The number of the partition the instance is in. Valid only if the placement group strategy is set to partition.
      */
    var PartitionNumber: js.UndefOr[Integer] = js.undefined
    /**
      * Reserved for future use.
      */
    var SpreadDomain: js.UndefOr[String] = js.undefined
    /**
      * The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for the ImportInstance command.
      */
    var Tenancy: js.UndefOr[Tenancy] = js.undefined
  }
  
  trait PlacementGroup extends js.Object {
    /**
      * The name of the placement group.
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * The number of partitions. Valid only if strategy is set to partition.
      */
    var PartitionCount: js.UndefOr[Integer] = js.undefined
    /**
      * The state of the placement group.
      */
    var State: js.UndefOr[PlacementGroupState] = js.undefined
    /**
      * The placement strategy.
      */
    var Strategy: js.UndefOr[PlacementStrategy] = js.undefined
  }
  
  trait PlacementResponse extends js.Object {
    /**
      * The name of the placement group the instance is in.
      */
    var GroupName: js.UndefOr[String] = js.undefined
  }
  
  trait PortRange extends js.Object {
    /**
      * The first port in the range.
      */
    var From: js.UndefOr[Integer] = js.undefined
    /**
      * The last port in the range.
      */
    var To: js.UndefOr[Integer] = js.undefined
  }
  
  trait PrefixList extends js.Object {
    /**
      * The IP address range of the AWS service.
      */
    var Cidrs: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The ID of the prefix.
      */
    var PrefixListId: js.UndefOr[String] = js.undefined
    /**
      * The name of the prefix.
      */
    var PrefixListName: js.UndefOr[String] = js.undefined
  }
  
  trait PrefixListId extends js.Object {
    /**
      * A description for the security group rule that references this prefix list ID. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The ID of the prefix.
      */
    var PrefixListId: js.UndefOr[String] = js.undefined
  }
  
  trait PriceSchedule extends js.Object {
    /**
      * The current price schedule, as determined by the term remaining for the Reserved Instance in the listing. A specific price schedule is always in effect, but only one price schedule can be active at any time. Take, for example, a Reserved Instance listing that has five months remaining in its term. When you specify price schedules for five months and two months, this means that schedule 1, covering the first three months of the remaining term, will be active during months 5, 4, and 3. Then schedule 2, covering the last two months of the term, will be active for months 2 and 1.
      */
    var Active: js.UndefOr[Boolean] = js.undefined
    /**
      * The currency for transacting the Reserved Instance resale. At this time, the only supported currency is USD.
      */
    var CurrencyCode: js.UndefOr[CurrencyCodeValues] = js.undefined
    /**
      * The fixed price for the term.
      */
    var Price: js.UndefOr[Double] = js.undefined
    /**
      * The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
      */
    var Term: js.UndefOr[Long] = js.undefined
  }
  
  trait PriceScheduleSpecification extends js.Object {
    /**
      * The currency for transacting the Reserved Instance resale. At this time, the only supported currency is USD.
      */
    var CurrencyCode: js.UndefOr[CurrencyCodeValues] = js.undefined
    /**
      * The fixed price for the term.
      */
    var Price: js.UndefOr[Double] = js.undefined
    /**
      * The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
      */
    var Term: js.UndefOr[Long] = js.undefined
  }
  
  trait PricingDetail extends js.Object {
    /**
      * The number of reservations available for the price.
      */
    var Count: js.UndefOr[Integer] = js.undefined
    /**
      * The price per instance.
      */
    var Price: js.UndefOr[Double] = js.undefined
  }
  
  trait PrincipalIdFormat extends js.Object {
    /**
      * PrincipalIdFormatARN description
      */
    var Arn: js.UndefOr[String] = js.undefined
    /**
      * PrincipalIdFormatStatuses description
      */
    var Statuses: js.UndefOr[IdFormatList] = js.undefined
  }
  
  trait PrivateIpAddressSpecification extends js.Object {
    /**
      * Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
      */
    var Primary: js.UndefOr[Boolean] = js.undefined
    /**
      * The private IPv4 addresses.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
  }
  
  trait ProductCode extends js.Object {
    /**
      * The product code.
      */
    var ProductCodeId: js.UndefOr[String] = js.undefined
    /**
      * The type of product code.
      */
    var ProductCodeType: js.UndefOr[ProductCodeValues] = js.undefined
  }
  
  trait PropagatingVgw extends js.Object {
    /**
      * The ID of the virtual private gateway.
      */
    var GatewayId: js.UndefOr[String] = js.undefined
  }
  
  trait ProvisionByoipCidrRequest extends js.Object {
    /**
      * The public IPv4 address range, in CIDR notation. The most specific prefix that you can specify is /24. The address range cannot overlap with another address range that you've brought to this or another region.
      */
    var Cidr: String
    /**
      * A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP.
      */
    var CidrAuthorizationContext: js.UndefOr[CidrAuthorizationContext] = js.undefined
    /**
      * A description for the address range and the address pool.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ProvisionByoipCidrResult extends js.Object {
    /**
      * Information about the address pool.
      */
    var ByoipCidr: js.UndefOr[ByoipCidr] = js.undefined
  }
  
  trait ProvisionedBandwidth extends js.Object {
    /**
      * Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
      */
    var ProvisionTime: js.UndefOr[DateTime] = js.undefined
    /**
      * Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
      */
    var Provisioned: js.UndefOr[String] = js.undefined
    /**
      * Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
      */
    var RequestTime: js.UndefOr[DateTime] = js.undefined
    /**
      * Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
      */
    var Requested: js.UndefOr[String] = js.undefined
    /**
      * Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
      */
    var Status: js.UndefOr[String] = js.undefined
  }
  
  trait PublicIpv4Pool extends js.Object {
    /**
      * A description of the address pool.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The address ranges.
      */
    var PoolAddressRanges: js.UndefOr[PublicIpv4PoolRangeSet] = js.undefined
    /**
      * The ID of the IPv4 address pool.
      */
    var PoolId: js.UndefOr[String] = js.undefined
    /**
      * The total number of addresses.
      */
    var TotalAddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * The total number of available addresses.
      */
    var TotalAvailableAddressCount: js.UndefOr[Integer] = js.undefined
  }
  
  trait PublicIpv4PoolRange extends js.Object {
    /**
      * The number of addresses in the range.
      */
    var AddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * The number of available addresses in the range.
      */
    var AvailableAddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * The first IP address in the range.
      */
    var FirstAddress: js.UndefOr[String] = js.undefined
    /**
      * The last IP address in the range.
      */
    var LastAddress: js.UndefOr[String] = js.undefined
  }
  
  trait Purchase extends js.Object {
    /**
      * The currency in which the UpfrontPrice and HourlyPrice amounts are specified. At this time, the only supported currency is USD.
      */
    var CurrencyCode: js.UndefOr[CurrencyCodeValues] = js.undefined
    /**
      * The duration of the reservation's term in seconds.
      */
    var Duration: js.UndefOr[Integer] = js.undefined
    /**
      * The IDs of the Dedicated Hosts associated with the reservation.
      */
    var HostIdSet: js.UndefOr[ResponseHostIdSet] = js.undefined
    /**
      * The ID of the reservation.
      */
    var HostReservationId: js.UndefOr[String] = js.undefined
    /**
      * The hourly price of the reservation per hour.
      */
    var HourlyPrice: js.UndefOr[String] = js.undefined
    /**
      * The instance family on the Dedicated Host that the reservation can be associated with.
      */
    var InstanceFamily: js.UndefOr[String] = js.undefined
    /**
      * The payment option for the reservation.
      */
    var PaymentOption: js.UndefOr[PaymentOption] = js.undefined
    /**
      * The upfront price of the reservation.
      */
    var UpfrontPrice: js.UndefOr[String] = js.undefined
  }
  
  trait PurchaseHostReservationRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The currency in which the totalUpfrontPrice, LimitPrice, and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
      */
    var CurrencyCode: js.UndefOr[CurrencyCodeValues] = js.undefined
    /**
      * The IDs of the Dedicated Hosts with which the reservation will be associated.
      */
    var HostIdSet: RequestHostIdSet
    /**
      * The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request fails. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is USD. For example, to indicate a limit price of USD 100, specify 100.00.
      */
    var LimitPrice: js.UndefOr[String] = js.undefined
    /**
      * The ID of the offering.
      */
    var OfferingId: String
  }
  
  trait PurchaseHostReservationResult extends js.Object {
    /**
      * Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
      */
    var CurrencyCode: js.UndefOr[CurrencyCodeValues] = js.undefined
    /**
      * Describes the details of the purchase.
      */
    var Purchase: js.UndefOr[PurchaseSet] = js.undefined
    /**
      * The total hourly price of the reservation calculated per hour.
      */
    var TotalHourlyPrice: js.UndefOr[String] = js.undefined
    /**
      * The total amount charged to your account when you purchase the reservation.
      */
    var TotalUpfrontPrice: js.UndefOr[String] = js.undefined
  }
  
  trait PurchaseRequest extends js.Object {
    /**
      * The number of instances.
      */
    var InstanceCount: Integer
    /**
      * The purchase token.
      */
    var PurchaseToken: String
  }
  
  trait PurchaseReservedInstancesOfferingRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The number of Reserved Instances to purchase.
      */
    var InstanceCount: Integer
    /**
      * Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.
      */
    var LimitPrice: js.UndefOr[ReservedInstanceLimitPrice] = js.undefined
    /**
      * The ID of the Reserved Instance offering to purchase.
      */
    var ReservedInstancesOfferingId: String
  }
  
  trait PurchaseReservedInstancesOfferingResult extends js.Object {
    /**
      * The IDs of the purchased Reserved Instances.
      */
    var ReservedInstancesId: js.UndefOr[String] = js.undefined
  }
  
  trait PurchaseScheduledInstancesRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see Ensuring Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more purchase requests.
      */
    var PurchaseRequests: PurchaseRequestSet
  }
  
  trait PurchaseScheduledInstancesResult extends js.Object {
    /**
      * Information about the Scheduled Instances.
      */
    var ScheduledInstanceSet: js.UndefOr[PurchasedScheduledInstanceSet] = js.undefined
  }
  
  trait RebootInstancesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more instance IDs.
      */
    var InstanceIds: InstanceIdStringList
  }
  
  trait RecurringCharge extends js.Object {
    /**
      * The amount of the recurring charge.
      */
    var Amount: js.UndefOr[Double] = js.undefined
    /**
      * The frequency of the recurring charge.
      */
    var Frequency: js.UndefOr[RecurringChargeFrequency] = js.undefined
  }
  
  trait Region extends js.Object {
    /**
      * The region service endpoint.
      */
    var Endpoint: js.UndefOr[String] = js.undefined
    /**
      * The name of the region.
      */
    var RegionName: js.UndefOr[String] = js.undefined
  }
  
  trait RegisterImageRequest extends js.Object {
    /**
      * The architecture of the AMI. Default: For Amazon EBS-backed AMIs, i386. For instance store-backed AMIs, the architecture specified in the manifest file.
      */
    var Architecture: js.UndefOr[ArchitectureValues] = js.undefined
    /**
      * The billing product codes. Your account must be authorized to specify billing product codes. Otherwise, you can use the AWS Marketplace to bill for the use of an AMI.
      */
    var BillingProducts: js.UndefOr[BillingProductList] = js.undefined
    /**
      * One or more block device mapping entries.
      */
    var BlockDeviceMappings: js.UndefOr[BlockDeviceMappingRequestList] = js.undefined
    /**
      * A description for your AMI.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Set to true to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
      */
    var EnaSupport: js.UndefOr[Boolean] = js.undefined
    /**
      * The full path to your AMI manifest in Amazon S3 storage.
      */
    var ImageLocation: js.UndefOr[String] = js.undefined
    /**
      * The ID of the kernel.
      */
    var KernelId: js.UndefOr[String] = js.undefined
    /**
      * A name for your AMI. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
      */
    var Name: String
    /**
      * The ID of the RAM disk.
      */
    var RamdiskId: js.UndefOr[String] = js.undefined
    /**
      * The device name of the root device volume (for example, /dev/sda1).
      */
    var RootDeviceName: js.UndefOr[String] = js.undefined
    /**
      * Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI. There is no way to disable sriovNetSupport at this time. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
      */
    var SriovNetSupport: js.UndefOr[String] = js.undefined
    /**
      * The type of virtualization (hvm | paravirtual). Default: paravirtual 
      */
    var VirtualizationType: js.UndefOr[String] = js.undefined
  }
  
  trait RegisterImageResult extends js.Object {
    /**
      * The ID of the newly registered AMI.
      */
    var ImageId: js.UndefOr[String] = js.undefined
  }
  
  trait RejectTransitGatewayVpcAttachmentRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: String
  }
  
  trait RejectTransitGatewayVpcAttachmentResult extends js.Object {
    /**
      * Information about the attachment.
      */
    var TransitGatewayVpcAttachment: js.UndefOr[TransitGatewayVpcAttachment] = js.undefined
  }
  
  trait RejectVpcEndpointConnectionsRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the service.
      */
    var ServiceId: String
    /**
      * The IDs of one or more VPC endpoints.
      */
    var VpcEndpointIds: ValueStringList
  }
  
  trait RejectVpcEndpointConnectionsResult extends js.Object {
    /**
      * Information about the endpoints that were not rejected, if applicable.
      */
    var Unsuccessful: js.UndefOr[UnsuccessfulItemSet] = js.undefined
  }
  
  trait RejectVpcPeeringConnectionRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the VPC peering connection.
      */
    var VpcPeeringConnectionId: String
  }
  
  trait RejectVpcPeeringConnectionResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, it returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ReleaseAddressRequest extends js.Object {
    /**
      * [EC2-VPC] The allocation ID. Required for EC2-VPC.
      */
    var AllocationId: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
      */
    var PublicIp: js.UndefOr[String] = js.undefined
  }
  
  trait ReleaseHostsRequest extends js.Object {
    /**
      * The IDs of the Dedicated Hosts to release.
      */
    var HostIds: RequestHostIdList
  }
  
  trait ReleaseHostsResult extends js.Object {
    /**
      * The IDs of the Dedicated Hosts that were successfully released.
      */
    var Successful: js.UndefOr[ResponseHostIdList] = js.undefined
    /**
      * The IDs of the Dedicated Hosts that could not be released, including an error message.
      */
    var Unsuccessful: js.UndefOr[UnsuccessfulItemList] = js.undefined
  }
  
  trait ReplaceIamInstanceProfileAssociationRequest extends js.Object {
    /**
      * The ID of the existing IAM instance profile association.
      */
    var AssociationId: String
    /**
      * The IAM instance profile.
      */
    var IamInstanceProfile: IamInstanceProfileSpecification
  }
  
  trait ReplaceIamInstanceProfileAssociationResult extends js.Object {
    /**
      * Information about the IAM instance profile association.
      */
    var IamInstanceProfileAssociation: js.UndefOr[IamInstanceProfileAssociation] = js.undefined
  }
  
  trait ReplaceNetworkAclAssociationRequest extends js.Object {
    /**
      * The ID of the current association between the original network ACL and the subnet.
      */
    var AssociationId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the new network ACL to associate with the subnet.
      */
    var NetworkAclId: String
  }
  
  trait ReplaceNetworkAclAssociationResult extends js.Object {
    /**
      * The ID of the new association.
      */
    var NewAssociationId: js.UndefOr[String] = js.undefined
  }
  
  trait ReplaceNetworkAclEntryRequest extends js.Object {
    /**
      * The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
      */
    var CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether to replace the egress rule. Default: If no value is specified, we replace the ingress rule.
      */
    var Egress: Boolean
    /**
      * ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
      */
    var IcmpTypeCode: js.UndefOr[IcmpTypeCode] = js.undefined
    /**
      * The IPv6 network range to allow or deny, in CIDR notation (for example 2001:bd8:1234:1a00::/64).
      */
    var Ipv6CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * The ID of the ACL.
      */
    var NetworkAclId: String
    /**
      * TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).
      */
    var PortRange: js.UndefOr[PortRange] = js.undefined
    /**
      * The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.
      */
    var Protocol: String
    /**
      * Indicates whether to allow or deny the traffic that matches the rule.
      */
    var RuleAction: RuleAction
    /**
      * The rule number of the entry to replace.
      */
    var RuleNumber: Integer
  }
  
  trait ReplaceRouteRequest extends js.Object {
    /**
      * The IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
      */
    var DestinationCidrBlock: js.UndefOr[String] = js.undefined
    /**
      * The IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
      */
    var DestinationIpv6CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * [IPv6 traffic only] The ID of an egress-only internet gateway.
      */
    var EgressOnlyInternetGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of an internet gateway or virtual private gateway.
      */
    var GatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of a NAT instance in your VPC.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * [IPv4 traffic only] The ID of a NAT gateway.
      */
    var NatGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of a network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the route table.
      */
    var RouteTableId: String
    /**
      * The ID of a transit gateway.
      */
    var TransitGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of a VPC peering connection.
      */
    var VpcPeeringConnectionId: js.UndefOr[String] = js.undefined
  }
  
  trait ReplaceRouteTableAssociationRequest extends js.Object {
    /**
      * The association ID.
      */
    var AssociationId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the new route table to associate with the subnet.
      */
    var RouteTableId: String
  }
  
  trait ReplaceRouteTableAssociationResult extends js.Object {
    /**
      * The ID of the new association.
      */
    var NewAssociationId: js.UndefOr[String] = js.undefined
  }
  
  trait ReplaceTransitGatewayRouteRequest extends js.Object {
    /**
      * Indicates whether traffic matching this route is to be dropped.
      */
    var Blackhole: js.UndefOr[Boolean] = js.undefined
    /**
      * The CIDR range used for the destination match. Routing decisions are based on the most specific match.
      */
    var DestinationCidrBlock: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the route table.
      */
    var TransitGatewayRouteTableId: String
  }
  
  trait ReplaceTransitGatewayRouteResult extends js.Object {
    /**
      * Information about the modified route.
      */
    var Route: js.UndefOr[TransitGatewayRoute] = js.undefined
  }
  
  trait ReportInstanceStatusRequest extends js.Object {
    /**
      * Descriptive text about the health state of your instance.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The time at which the reported instance health state ended.
      */
    var EndTime: js.UndefOr[DateTime] = js.undefined
    /**
      * One or more instances.
      */
    var Instances: InstanceIdStringList
    /**
      * One or more reason codes that describe the health state of your instance.    instance-stuck-in-state: My instance is stuck in a state.    unresponsive: My instance is unresponsive.    not-accepting-credentials: My instance is not accepting my credentials.    password-not-available: A password is not available for my instance.    performance-network: My instance is experiencing performance problems that I believe are network related.    performance-instance-store: My instance is experiencing performance problems that I believe are related to the instance stores.    performance-ebs-volume: My instance is experiencing performance problems that I believe are related to an EBS volume.    performance-other: My instance is experiencing performance problems.    other: [explain using the description parameter]  
      */
    var ReasonCodes: ReasonCodesList
    /**
      * The time at which the reported instance health state began.
      */
    var StartTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The status of all instances listed.
      */
    var Status: ReportStatusType
  }
  
  trait RequestLaunchTemplateData extends js.Object {
    /**
      * The block device mapping.  Supplying both a snapshot ID and an encryption value as arguments for block-device mapping results in an error. This is because only blank volumes can be encrypted on start, and these are not created from a snapshot. If a snapshot is the basis for the volume, it contains data by definition and its encryption status cannot be changed using this action. 
      */
    var BlockDeviceMappings: js.UndefOr[LaunchTemplateBlockDeviceMappingRequestList] = js.undefined
    /**
      * The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to open, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
      */
    var CapacityReservationSpecification: js.UndefOr[LaunchTemplateCapacityReservationSpecificationRequest] = js.undefined
    /**
      * The CPU options for the instance. For more information, see Optimizing CPU Options in the Amazon Elastic Compute Cloud User Guide.
      */
    var CpuOptions: js.UndefOr[LaunchTemplateCpuOptionsRequest] = js.undefined
    /**
      * The credit option for CPU usage of the instance. Valid for T2 or T3 instances only.
      */
    var CreditSpecification: js.UndefOr[CreditSpecificationRequest] = js.undefined
    /**
      * If set to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API. To change this attribute to false after launch, use ModifyInstanceAttribute.
      */
    var DisableApiTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
      */
    var EbsOptimized: js.UndefOr[Boolean] = js.undefined
    /**
      * An elastic GPU to associate with the instance.
      */
    var ElasticGpuSpecifications: js.UndefOr[ElasticGpuSpecificationList] = js.undefined
    /**
      *  The elastic inference accelerator for the instance. 
      */
    var ElasticInferenceAccelerators: js.UndefOr[LaunchTemplateElasticInferenceAcceleratorList] = js.undefined
    /**
      * Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the hibernation prerequisites. Hibernation is currently supported only for Amazon Linux. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide.
      */
    var HibernationOptions: js.UndefOr[LaunchTemplateHibernationOptionsRequest] = js.undefined
    /**
      * The IAM instance profile.
      */
    var IamInstanceProfile: js.UndefOr[LaunchTemplateIamInstanceProfileSpecificationRequest] = js.undefined
    /**
      * The ID of the AMI, which you can get by using DescribeImages.
      */
    var ImageId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: stop 
      */
    var InstanceInitiatedShutdownBehavior: js.UndefOr[ShutdownBehavior] = js.undefined
    /**
      * The market (purchasing) option for the instances.
      */
    var InstanceMarketOptions: js.UndefOr[LaunchTemplateInstanceMarketOptionsRequest] = js.undefined
    /**
      * The instance type. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The ID of the kernel.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see User Provided Kernels in the Amazon Elastic Compute Cloud User Guide. 
      */
    var KernelId: js.UndefOr[String] = js.undefined
    /**
      * The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair.  If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in. 
      */
    var KeyName: js.UndefOr[String] = js.undefined
    /**
      * The license configurations.
      */
    var LicenseSpecifications: js.UndefOr[LaunchTemplateLicenseSpecificationListRequest] = js.undefined
    /**
      * The monitoring for the instance.
      */
    var Monitoring: js.UndefOr[LaunchTemplatesMonitoringRequest] = js.undefined
    /**
      * One or more network interfaces.
      */
    var NetworkInterfaces: js.UndefOr[LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList] = js.undefined
    /**
      * The placement for the instance.
      */
    var Placement: js.UndefOr[LaunchTemplatePlacementRequest] = js.undefined
    /**
      * The ID of the RAM disk.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see User Provided Kernels in the Amazon Elastic Compute Cloud User Guide. 
      */
    var RamDiskId: js.UndefOr[String] = js.undefined
    /**
      * One or more security group IDs. You can create a security group using CreateSecurityGroup. You cannot specify both a security group ID and security name in the same request.
      */
    var SecurityGroupIds: js.UndefOr[SecurityGroupIdStringList] = js.undefined
    /**
      * [EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. You cannot specify both a security group ID and security name in the same request.
      */
    var SecurityGroups: js.UndefOr[SecurityGroupStringList] = js.undefined
    /**
      * The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see CreateTags.
      */
    var TagSpecifications: js.UndefOr[LaunchTemplateTagSpecificationRequestList] = js.undefined
    /**
      * The Base64-encoded user data to make available to the instance. For more information, see Running Commands on Your Linux Instance at Launch (Linux) and Adding User Data (Windows).
      */
    var UserData: js.UndefOr[String] = js.undefined
  }
  
  trait RequestSpotFleetRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The configuration for the Spot Fleet request.
      */
    var SpotFleetRequestConfig: SpotFleetRequestConfigData
  }
  
  trait RequestSpotFleetResponse extends js.Object {
    /**
      * The ID of the Spot Fleet request.
      */
    var SpotFleetRequestId: js.UndefOr[String] = js.undefined
  }
  
  trait RequestSpotInstancesRequest extends js.Object {
    /**
      * The user-specified name for a logical grouping of requests. When you specify an Availability Zone group in a Spot Instance request, all Spot Instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to requests for Spot Instances of the same instance type. Any additional Spot Instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active. If there is no active instance running in the Availability Zone group that you specify for a new Spot Instance request (all instances are terminated, the request is expired, or the maximum price you specified falls below current Spot price), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot Instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group. Default: Instances are launched in any available Availability Zone.
      */
    var AvailabilityZoneGroup: js.UndefOr[String] = js.undefined
    /**
      * The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360). The duration period starts as soon as your Spot Instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates. You can't specify an Availability Zone group or a launch group if you specify a duration.
      */
    var BlockDurationMinutes: js.UndefOr[Integer] = js.undefined
    /**
      * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon EC2 User Guide for Linux Instances.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The maximum number of Spot Instances to launch. Default: 1
      */
    var InstanceCount: js.UndefOr[Integer] = js.undefined
    /**
      * The behavior when a Spot Instance is interrupted. The default is terminate.
      */
    var InstanceInterruptionBehavior: js.UndefOr[InstanceInterruptionBehavior] = js.undefined
    /**
      * The instance launch group. Launch groups are Spot Instances that launch together and terminate together. Default: Instances are launched and terminated individually
      */
    var LaunchGroup: js.UndefOr[String] = js.undefined
    /**
      * The launch specification.
      */
    var LaunchSpecification: js.UndefOr[RequestSpotLaunchSpecification] = js.undefined
    /**
      * The maximum price per hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
      */
    var SpotPrice: js.UndefOr[String] = js.undefined
    /**
      * The Spot Instance request type. Default: one-time 
      */
    var Type: js.UndefOr[SpotInstanceType] = js.undefined
    /**
      * The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled.
      */
    var ValidFrom: js.UndefOr[DateTime] = js.undefined
    /**
      * The end date of the request. If this is a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached. The default end date is 7 days from the current date.
      */
    var ValidUntil: js.UndefOr[DateTime] = js.undefined
  }
  
  trait RequestSpotInstancesResult extends js.Object {
    /**
      * One or more Spot Instance requests.
      */
    var SpotInstanceRequests: js.UndefOr[SpotInstanceRequestList] = js.undefined
  }
  
  trait RequestSpotLaunchSpecification extends js.Object {
    /**
      * Deprecated.
      */
    var AddressingType: js.UndefOr[String] = js.undefined
    /**
      * One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
      */
    var BlockDeviceMappings: js.UndefOr[BlockDeviceMappingList] = js.undefined
    /**
      * Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false 
      */
    var EbsOptimized: js.UndefOr[Boolean] = js.undefined
    /**
      * The IAM instance profile.
      */
    var IamInstanceProfile: js.UndefOr[IamInstanceProfileSpecification] = js.undefined
    /**
      * The ID of the AMI.
      */
    var ImageId: js.UndefOr[String] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The ID of the kernel.
      */
    var KernelId: js.UndefOr[String] = js.undefined
    /**
      * The name of the key pair.
      */
    var KeyName: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether basic or detailed monitoring is enabled for the instance. Default: Disabled
      */
    var Monitoring: js.UndefOr[RunInstancesMonitoringEnabled] = js.undefined
    /**
      * One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
      */
    var NetworkInterfaces: js.UndefOr[InstanceNetworkInterfaceSpecificationList] = js.undefined
    /**
      * The placement information for the instance.
      */
    var Placement: js.UndefOr[SpotPlacement] = js.undefined
    /**
      * The ID of the RAM disk.
      */
    var RamdiskId: js.UndefOr[String] = js.undefined
    /**
      * One or more security group IDs.
      */
    var SecurityGroupIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
      */
    var SecurityGroups: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The ID of the subnet in which to launch the instance.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * The Base64-encoded user data for the instance.
      */
    var UserData: js.UndefOr[String] = js.undefined
  }
  
  trait Reservation extends js.Object {
    /**
      * [EC2-Classic only] One or more security groups.
      */
    var Groups: js.UndefOr[GroupIdentifierList] = js.undefined
    /**
      * One or more instances.
      */
    var Instances: js.UndefOr[InstanceList] = js.undefined
    /**
      * The ID of the AWS account that owns the reservation.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the requester that launched the instances on your behalf (for example, AWS Management Console or Auto Scaling).
      */
    var RequesterId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the reservation.
      */
    var ReservationId: js.UndefOr[String] = js.undefined
  }
  
  trait ReservationValue extends js.Object {
    /**
      * The hourly rate of the reservation.
      */
    var HourlyPrice: js.UndefOr[String] = js.undefined
    /**
      * The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).
      */
    var RemainingTotalValue: js.UndefOr[String] = js.undefined
    /**
      * The remaining upfront cost of the reservation.
      */
    var RemainingUpfrontValue: js.UndefOr[String] = js.undefined
  }
  
  trait ReservedInstanceLimitPrice extends js.Object {
    /**
      * Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).
      */
    var Amount: js.UndefOr[Double] = js.undefined
    /**
      * The currency in which the limitPrice amount is specified. At this time, the only supported currency is USD.
      */
    var CurrencyCode: js.UndefOr[CurrencyCodeValues] = js.undefined
  }
  
  trait ReservedInstanceReservationValue extends js.Object {
    /**
      * The total value of the Convertible Reserved Instance that you are exchanging.
      */
    var ReservationValue: js.UndefOr[ReservationValue] = js.undefined
    /**
      * The ID of the Convertible Reserved Instance that you are exchanging.
      */
    var ReservedInstanceId: js.UndefOr[String] = js.undefined
  }
  
  trait ReservedInstances extends js.Object {
    /**
      * The Availability Zone in which the Reserved Instance can be used.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is USD.
      */
    var CurrencyCode: js.UndefOr[CurrencyCodeValues] = js.undefined
    /**
      * The duration of the Reserved Instance, in seconds.
      */
    var Duration: js.UndefOr[Long] = js.undefined
    /**
      * The time when the Reserved Instance expires.
      */
    var End: js.UndefOr[DateTime] = js.undefined
    /**
      * The purchase price of the Reserved Instance.
      */
    var FixedPrice: js.UndefOr[Float] = js.undefined
    /**
      * The number of reservations purchased.
      */
    var InstanceCount: js.UndefOr[Integer] = js.undefined
    /**
      * The tenancy of the instance.
      */
    var InstanceTenancy: js.UndefOr[Tenancy] = js.undefined
    /**
      * The instance type on which the Reserved Instance can be used.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The offering class of the Reserved Instance.
      */
    var OfferingClass: js.UndefOr[OfferingClassType] = js.undefined
    /**
      * The Reserved Instance offering type.
      */
    var OfferingType: js.UndefOr[OfferingTypeValues] = js.undefined
    /**
      * The Reserved Instance product platform description.
      */
    var ProductDescription: js.UndefOr[RIProductDescription] = js.undefined
    /**
      * The recurring charge tag assigned to the resource.
      */
    var RecurringCharges: js.UndefOr[RecurringChargesList] = js.undefined
    /**
      * The ID of the Reserved Instance.
      */
    var ReservedInstancesId: js.UndefOr[String] = js.undefined
    /**
      * The scope of the Reserved Instance.
      */
    var Scope: js.UndefOr[scope] = js.undefined
    /**
      * The date and time the Reserved Instance started.
      */
    var Start: js.UndefOr[DateTime] = js.undefined
    /**
      * The state of the Reserved Instance purchase.
      */
    var State: js.UndefOr[ReservedInstanceState] = js.undefined
    /**
      * Any tags assigned to the resource.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The usage price of the Reserved Instance, per hour.
      */
    var UsagePrice: js.UndefOr[Float] = js.undefined
  }
  
  trait ReservedInstancesConfiguration extends js.Object {
    /**
      * The Availability Zone for the modified Reserved Instances.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The number of modified Reserved Instances.  This is a required field for a request. 
      */
    var InstanceCount: js.UndefOr[Integer] = js.undefined
    /**
      * The instance type for the modified Reserved Instances.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The network platform of the modified Reserved Instances, which is either EC2-Classic or EC2-VPC.
      */
    var Platform: js.UndefOr[String] = js.undefined
    /**
      * Whether the Reserved Instance is applied to instances in a region or instances in a specific Availability Zone.
      */
    var Scope: js.UndefOr[scope] = js.undefined
  }
  
  trait ReservedInstancesId extends js.Object {
    /**
      * The ID of the Reserved Instance.
      */
    var ReservedInstancesId: js.UndefOr[String] = js.undefined
  }
  
  trait ReservedInstancesListing extends js.Object {
    /**
      * A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see Ensuring Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The time the listing was created.
      */
    var CreateDate: js.UndefOr[DateTime] = js.undefined
    /**
      * The number of instances in this state.
      */
    var InstanceCounts: js.UndefOr[InstanceCountList] = js.undefined
    /**
      * The price of the Reserved Instance listing.
      */
    var PriceSchedules: js.UndefOr[PriceScheduleList] = js.undefined
    /**
      * The ID of the Reserved Instance.
      */
    var ReservedInstancesId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Reserved Instance listing.
      */
    var ReservedInstancesListingId: js.UndefOr[String] = js.undefined
    /**
      * The status of the Reserved Instance listing.
      */
    var Status: js.UndefOr[ListingStatus] = js.undefined
    /**
      * The reason for the current status of the Reserved Instance listing. The response can be blank.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
    /**
      * Any tags assigned to the resource.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The last modified timestamp of the listing.
      */
    var UpdateDate: js.UndefOr[DateTime] = js.undefined
  }
  
  trait ReservedInstancesModification extends js.Object {
    /**
      * A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see Ensuring Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The time when the modification request was created.
      */
    var CreateDate: js.UndefOr[DateTime] = js.undefined
    /**
      * The time for the modification to become effective.
      */
    var EffectiveDate: js.UndefOr[DateTime] = js.undefined
    /**
      * Contains target configurations along with their corresponding new Reserved Instance IDs.
      */
    var ModificationResults: js.UndefOr[ReservedInstancesModificationResultList] = js.undefined
    /**
      * The IDs of one or more Reserved Instances.
      */
    var ReservedInstancesIds: js.UndefOr[ReservedIntancesIds] = js.undefined
    /**
      * A unique ID for the Reserved Instance modification.
      */
    var ReservedInstancesModificationId: js.UndefOr[String] = js.undefined
    /**
      * The status of the Reserved Instances modification request.
      */
    var Status: js.UndefOr[String] = js.undefined
    /**
      * The reason for the status.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
    /**
      * The time when the modification request was last updated.
      */
    var UpdateDate: js.UndefOr[DateTime] = js.undefined
  }
  
  trait ReservedInstancesModificationResult extends js.Object {
    /**
      * The ID for the Reserved Instances that were created as part of the modification request. This field is only available when the modification is fulfilled.
      */
    var ReservedInstancesId: js.UndefOr[String] = js.undefined
    /**
      * The target Reserved Instances configurations supplied as part of the modification request.
      */
    var TargetConfiguration: js.UndefOr[ReservedInstancesConfiguration] = js.undefined
  }
  
  trait ReservedInstancesOffering extends js.Object {
    /**
      * The Availability Zone in which the Reserved Instance can be used.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The currency of the Reserved Instance offering you are purchasing. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is USD.
      */
    var CurrencyCode: js.UndefOr[CurrencyCodeValues] = js.undefined
    /**
      * The duration of the Reserved Instance, in seconds.
      */
    var Duration: js.UndefOr[Long] = js.undefined
    /**
      * The purchase price of the Reserved Instance.
      */
    var FixedPrice: js.UndefOr[Float] = js.undefined
    /**
      * The tenancy of the instance.
      */
    var InstanceTenancy: js.UndefOr[Tenancy] = js.undefined
    /**
      * The instance type on which the Reserved Instance can be used.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * Indicates whether the offering is available through the Reserved Instance Marketplace (resale) or AWS. If it's a Reserved Instance Marketplace offering, this is true.
      */
    var Marketplace: js.UndefOr[Boolean] = js.undefined
    /**
      * If convertible it can be exchanged for Reserved Instances of the same or higher monetary value, with different configurations. If standard, it is not possible to perform an exchange.
      */
    var OfferingClass: js.UndefOr[OfferingClassType] = js.undefined
    /**
      * The Reserved Instance offering type.
      */
    var OfferingType: js.UndefOr[OfferingTypeValues] = js.undefined
    /**
      * The pricing details of the Reserved Instance offering.
      */
    var PricingDetails: js.UndefOr[PricingDetailsList] = js.undefined
    /**
      * The Reserved Instance product platform description.
      */
    var ProductDescription: js.UndefOr[RIProductDescription] = js.undefined
    /**
      * The recurring charge tag assigned to the resource.
      */
    var RecurringCharges: js.UndefOr[RecurringChargesList] = js.undefined
    /**
      * The ID of the Reserved Instance offering. This is the offering ID used in GetReservedInstancesExchangeQuote to confirm that an exchange can be made.
      */
    var ReservedInstancesOfferingId: js.UndefOr[String] = js.undefined
    /**
      * Whether the Reserved Instance is applied to instances in a region or an Availability Zone.
      */
    var Scope: js.UndefOr[scope] = js.undefined
    /**
      * The usage price of the Reserved Instance, per hour.
      */
    var UsagePrice: js.UndefOr[Float] = js.undefined
  }
  
  trait ResetFpgaImageAttributeRequest extends js.Object {
    /**
      * The attribute.
      */
    var Attribute: js.UndefOr[ResetFpgaImageAttributeName] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the AFI.
      */
    var FpgaImageId: String
  }
  
  trait ResetFpgaImageAttributeResult extends js.Object {
    /**
      * Is true if the request succeeds, and an error otherwise.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ResetImageAttributeRequest extends js.Object {
    /**
      * The attribute to reset (currently you can only reset the launch permission attribute).
      */
    var Attribute: ResetImageAttributeName
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the AMI.
      */
    var ImageId: String
  }
  
  trait ResetInstanceAttributeRequest extends js.Object {
    /**
      * The attribute to reset.  You can only reset the following attributes: kernel | ramdisk | sourceDestCheck. To change an instance attribute, use ModifyInstanceAttribute. 
      */
    var Attribute: InstanceAttributeName
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: String
  }
  
  trait ResetNetworkInterfaceAttributeRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: String
    /**
      * The source/destination checking attribute. Resets the value to true.
      */
    var SourceDestCheck: js.UndefOr[String] = js.undefined
  }
  
  trait ResetSnapshotAttributeRequest extends js.Object {
    /**
      * The attribute to reset. Currently, only the attribute for permission to create volumes can be reset.
      */
    var Attribute: SnapshotAttributeName
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the snapshot.
      */
    var SnapshotId: String
  }
  
  trait ResponseError extends js.Object {
    /**
      * The error code.
      */
    var Code: js.UndefOr[LaunchTemplateErrorCode] = js.undefined
    /**
      * The error message, if applicable.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait ResponseLaunchTemplateData extends js.Object {
    /**
      * The block device mappings.
      */
    var BlockDeviceMappings: js.UndefOr[LaunchTemplateBlockDeviceMappingList] = js.undefined
    /**
      * Information about the Capacity Reservation targeting option.
      */
    var CapacityReservationSpecification: js.UndefOr[LaunchTemplateCapacityReservationSpecificationResponse] = js.undefined
    /**
      * The CPU options for the instance. For more information, see Optimizing CPU Options in the Amazon Elastic Compute Cloud User Guide.
      */
    var CpuOptions: js.UndefOr[LaunchTemplateCpuOptions] = js.undefined
    /**
      * The credit option for CPU usage of the instance.
      */
    var CreditSpecification: js.UndefOr[CreditSpecification] = js.undefined
    /**
      * If set to true, indicates that the instance cannot be terminated using the Amazon EC2 console, command line tool, or API.
      */
    var DisableApiTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether the instance is optimized for Amazon EBS I/O. 
      */
    var EbsOptimized: js.UndefOr[Boolean] = js.undefined
    /**
      * The elastic GPU specification.
      */
    var ElasticGpuSpecifications: js.UndefOr[ElasticGpuSpecificationResponseList] = js.undefined
    /**
      *  The elastic inference accelerator for the instance. 
      */
    var ElasticInferenceAccelerators: js.UndefOr[LaunchTemplateElasticInferenceAcceleratorResponseList] = js.undefined
    /**
      * Indicates whether an instance is configured for hibernation. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide.
      */
    var HibernationOptions: js.UndefOr[LaunchTemplateHibernationOptions] = js.undefined
    /**
      * The IAM instance profile.
      */
    var IamInstanceProfile: js.UndefOr[LaunchTemplateIamInstanceProfileSpecification] = js.undefined
    /**
      * The ID of the AMI that was used to launch the instance.
      */
    var ImageId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
      */
    var InstanceInitiatedShutdownBehavior: js.UndefOr[ShutdownBehavior] = js.undefined
    /**
      * The market (purchasing) option for the instances.
      */
    var InstanceMarketOptions: js.UndefOr[LaunchTemplateInstanceMarketOptions] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The ID of the kernel, if applicable.
      */
    var KernelId: js.UndefOr[String] = js.undefined
    /**
      * The name of the key pair.
      */
    var KeyName: js.UndefOr[String] = js.undefined
    /**
      * The license configurations.
      */
    var LicenseSpecifications: js.UndefOr[LaunchTemplateLicenseList] = js.undefined
    /**
      * The monitoring for the instance.
      */
    var Monitoring: js.UndefOr[LaunchTemplatesMonitoring] = js.undefined
    /**
      * The network interfaces.
      */
    var NetworkInterfaces: js.UndefOr[LaunchTemplateInstanceNetworkInterfaceSpecificationList] = js.undefined
    /**
      * The placement of the instance.
      */
    var Placement: js.UndefOr[LaunchTemplatePlacement] = js.undefined
    /**
      * The ID of the RAM disk, if applicable.
      */
    var RamDiskId: js.UndefOr[String] = js.undefined
    /**
      * The security group IDs.
      */
    var SecurityGroupIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The security group names.
      */
    var SecurityGroups: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The tags.
      */
    var TagSpecifications: js.UndefOr[LaunchTemplateTagSpecificationList] = js.undefined
    /**
      * The user data for the instance. 
      */
    var UserData: js.UndefOr[String] = js.undefined
  }
  
  trait RestoreAddressToClassicRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The Elastic IP address.
      */
    var PublicIp: String
  }
  
  trait RestoreAddressToClassicResult extends js.Object {
    /**
      * The Elastic IP address.
      */
    var PublicIp: js.UndefOr[String] = js.undefined
    /**
      * The move status for the IP address.
      */
    var Status: js.UndefOr[Status] = js.undefined
  }
  
  trait RevokeClientVpnIngressRequest extends js.Object {
    /**
      * The ID of the Active Directory group for which to revoke access. 
      */
    var AccessGroupId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Client VPN endpoint with which the authorization rule is associated.
      */
    var ClientVpnEndpointId: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether access should be revoked for all clients.
      */
    var RevokeAllGroups: js.UndefOr[Boolean] = js.undefined
    /**
      * The IPv4 address range, in CIDR notation, of the network for which access is being removed.
      */
    var TargetNetworkCidr: String
  }
  
  trait RevokeClientVpnIngressResult extends js.Object {
    /**
      * The current state of the authorization rule.
      */
    var Status: js.UndefOr[ClientVpnAuthorizationRuleStatus] = js.undefined
  }
  
  trait RevokeSecurityGroupEgressRequest extends js.Object {
    /**
      * Not supported. Use a set of IP permissions to specify the CIDR.
      */
    var CidrIp: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Not supported. Use a set of IP permissions to specify the port.
      */
    var FromPort: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the security group.
      */
    var GroupId: String
    /**
      * One or more sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
      */
    var IpPermissions: js.UndefOr[IpPermissionList] = js.undefined
    /**
      * Not supported. Use a set of IP permissions to specify the protocol name or number.
      */
    var IpProtocol: js.UndefOr[String] = js.undefined
    /**
      * Not supported. Use a set of IP permissions to specify a destination security group.
      */
    var SourceSecurityGroupName: js.UndefOr[String] = js.undefined
    /**
      * Not supported. Use a set of IP permissions to specify a destination security group.
      */
    var SourceSecurityGroupOwnerId: js.UndefOr[String] = js.undefined
    /**
      * Not supported. Use a set of IP permissions to specify the port.
      */
    var ToPort: js.UndefOr[Integer] = js.undefined
  }
  
  trait RevokeSecurityGroupIngressRequest extends js.Object {
    /**
      * The CIDR IP address range. You can't specify this parameter when specifying a source security group.
      */
    var CidrIp: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use -1 to specify all ICMP types.
      */
    var FromPort: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
      */
    var GroupId: js.UndefOr[String] = js.undefined
    /**
      * [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * One or more sets of IP permissions. You can't specify a source security group and a CIDR IP address range in the same set of permissions.
      */
    var IpPermissions: js.UndefOr[IpPermissionList] = js.undefined
    /**
      * The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). Use -1 to specify all.
      */
    var IpProtocol: js.UndefOr[String] = js.undefined
    /**
      * [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
      */
    var SourceSecurityGroupName: js.UndefOr[String] = js.undefined
    /**
      * [EC2-Classic] The AWS account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
      */
    var SourceSecurityGroupOwnerId: js.UndefOr[String] = js.undefined
    /**
      * The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use -1 to specify all ICMP codes for the ICMP type.
      */
    var ToPort: js.UndefOr[Integer] = js.undefined
  }
  
  trait Route extends js.Object {
    /**
      * The IPv4 CIDR block used for the destination match.
      */
    var DestinationCidrBlock: js.UndefOr[String] = js.undefined
    /**
      * The IPv6 CIDR block used for the destination match.
      */
    var DestinationIpv6CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * The prefix of the AWS service.
      */
    var DestinationPrefixListId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the egress-only internet gateway.
      */
    var EgressOnlyInternetGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of a gateway attached to your VPC.
      */
    var GatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of a NAT instance in your VPC.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The AWS account ID of the owner of the instance.
      */
    var InstanceOwnerId: js.UndefOr[String] = js.undefined
    /**
      * The ID of a NAT gateway.
      */
    var NatGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * Describes how the route was created.    CreateRouteTable - The route was automatically created when the route table was created.    CreateRoute - The route was manually added to the route table.    EnableVgwRoutePropagation - The route was propagated by route propagation.  
      */
    var Origin: js.UndefOr[RouteOrigin] = js.undefined
    /**
      * The state of the route. The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).
      */
    var State: js.UndefOr[RouteState] = js.undefined
    /**
      * The ID of a transit gateway.
      */
    var TransitGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of a VPC peering connection.
      */
    var VpcPeeringConnectionId: js.UndefOr[String] = js.undefined
  }
  
  trait RouteTable extends js.Object {
    /**
      * The associations between the route table and one or more subnets.
      */
    var Associations: js.UndefOr[RouteTableAssociationList] = js.undefined
    /**
      * The ID of the AWS account that owns the route table.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * Any virtual private gateway (VGW) propagating routes.
      */
    var PropagatingVgws: js.UndefOr[PropagatingVgwList] = js.undefined
    /**
      * The ID of the route table.
      */
    var RouteTableId: js.UndefOr[String] = js.undefined
    /**
      * The routes in the route table.
      */
    var Routes: js.UndefOr[RouteList] = js.undefined
    /**
      * Any tags assigned to the route table.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait RouteTableAssociation extends js.Object {
    /**
      * Indicates whether this is the main route table.
      */
    var Main: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the association between a route table and a subnet.
      */
    var RouteTableAssociationId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the route table.
      */
    var RouteTableId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the subnet. A subnet ID is not returned for an implicit association.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
  }
  
  trait RunInstancesMonitoringEnabled extends js.Object {
    /**
      * Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
      */
    var Enabled: Boolean
  }
  
  trait RunInstancesRequest extends js.Object {
    /**
      * Reserved.
      */
    var AdditionalInfo: js.UndefOr[String] = js.undefined
    /**
      * One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
      */
    var BlockDeviceMappings: js.UndefOr[BlockDeviceMappingRequestList] = js.undefined
    /**
      * Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to open, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
      */
    var CapacityReservationSpecification: js.UndefOr[CapacityReservationSpecification] = js.undefined
    /**
      * Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraints: Maximum 64 ASCII characters
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * The CPU options for the instance. For more information, see Optimizing CPU Options in the Amazon Elastic Compute Cloud User Guide.
      */
    var CpuOptions: js.UndefOr[CpuOptionsRequest] = js.undefined
    /**
      * The credit option for CPU usage of the instance. Valid values are standard and unlimited. To change this attribute after launch, use ModifyInstanceCreditSpecification. For more information, see Burstable Performance Instances in the Amazon Elastic Compute Cloud User Guide. Default: standard (T2 instances) or unlimited (T3 instances)
      */
    var CreditSpecification: js.UndefOr[CreditSpecificationRequest] = js.undefined
    /**
      * If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute to false after launch, use ModifyInstanceAttribute. Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance. Default: false 
      */
    var DisableApiTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false 
      */
    var EbsOptimized: js.UndefOr[Boolean] = js.undefined
    /**
      * An elastic GPU to associate with the instance.
      */
    var ElasticGpuSpecification: js.UndefOr[ElasticGpuSpecifications] = js.undefined
    /**
      *  An elastic inference accelerator. 
      */
    var ElasticInferenceAccelerators: js.UndefOr[ElasticInferenceAccelerators] = js.undefined
    /**
      * Indicates whether an instance is enabled for hibernation. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide.
      */
    var HibernationOptions: js.UndefOr[HibernationOptionsRequest] = js.undefined
    /**
      * The IAM instance profile.
      */
    var IamInstanceProfile: js.UndefOr[IamInstanceProfileSpecification] = js.undefined
    /**
      * The ID of the AMI, which you can get by calling DescribeImages. An AMI is required to launch an instance and must be specified here or in a launch template.
      */
    var ImageId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: stop 
      */
    var InstanceInitiatedShutdownBehavior: js.UndefOr[ShutdownBehavior] = js.undefined
    /**
      * The market (purchasing) option for the instances. For RunInstances, persistent Spot Instance requests are only supported when InstanceInterruptionBehavior is set to either hibernate or stop.
      */
    var InstanceMarketOptions: js.UndefOr[InstanceMarketOptionsRequest] = js.undefined
    /**
      * The instance type. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide. Default: m1.small 
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * [EC2-VPC] A number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch. You cannot specify this option and the network interfaces option in the same request.
      */
    var Ipv6AddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * [EC2-VPC] Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch. You cannot specify this option and the network interfaces option in the same request.
      */
    var Ipv6Addresses: js.UndefOr[InstanceIpv6AddressList] = js.undefined
    /**
      * The ID of the kernel.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see  PV-GRUB in the Amazon Elastic Compute Cloud User Guide. 
      */
    var KernelId: js.UndefOr[String] = js.undefined
    /**
      * The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair.  If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in. 
      */
    var KeyName: js.UndefOr[String] = js.undefined
    /**
      * The launch template to use to launch the instances. Any parameters that you specify in RunInstances override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.
      */
    var LaunchTemplate: js.UndefOr[LaunchTemplateSpecification] = js.undefined
    /**
      * The license configurations.
      */
    var LicenseSpecifications: js.UndefOr[LicenseSpecificationListRequest] = js.undefined
    /**
      * The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above MinCount. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 FAQ.
      */
    var MaxCount: Integer
    /**
      * The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 General FAQ.
      */
    var MinCount: Integer
    /**
      * The monitoring for the instance.
      */
    var Monitoring: js.UndefOr[RunInstancesMonitoringEnabled] = js.undefined
    /**
      * One or more network interfaces. You cannot specify this option and the network interfaces option in the same request.
      */
    var NetworkInterfaces: js.UndefOr[InstanceNetworkInterfaceSpecificationList] = js.undefined
    /**
      * The placement for the instance.
      */
    var Placement: js.UndefOr[Placement] = js.undefined
    /**
      * [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet. Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request. You cannot specify this option and the network interfaces option in the same request.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
    /**
      * The ID of the RAM disk.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see  PV-GRUB in the Amazon Elastic Compute Cloud User Guide. 
      */
    var RamdiskId: js.UndefOr[String] = js.undefined
    /**
      * One or more security group IDs. You can create a security group using CreateSecurityGroup. Default: Amazon EC2 uses the default security group. You cannot specify this option and the network interfaces option in the same request.
      */
    var SecurityGroupIds: js.UndefOr[SecurityGroupIdStringList] = js.undefined
    /**
      * [EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. You cannot specify this option and the network interfaces option in the same request. Default: Amazon EC2 uses the default security group.
      */
    var SecurityGroups: js.UndefOr[SecurityGroupStringList] = js.undefined
    /**
      * [EC2-VPC] The ID of the subnet to launch the instance into. You cannot specify this option and the network interfaces option in the same request.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see CreateTags.
      */
    var TagSpecifications: js.UndefOr[TagSpecificationList] = js.undefined
    /**
      * The user data to make available to the instance. For more information, see Running Commands on Your Linux Instance at Launch (Linux) and Adding User Data (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text.
      */
    var UserData: js.UndefOr[String] = js.undefined
  }
  
  trait RunScheduledInstancesRequest extends js.Object {
    /**
      * Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see Ensuring Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The number of instances. Default: 1
      */
    var InstanceCount: js.UndefOr[Integer] = js.undefined
    /**
      * The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased.
      */
    var LaunchSpecification: ScheduledInstancesLaunchSpecification
    /**
      * The Scheduled Instance ID.
      */
    var ScheduledInstanceId: String
  }
  
  trait RunScheduledInstancesResult extends js.Object {
    /**
      * The IDs of the newly launched instances.
      */
    var InstanceIdSet: js.UndefOr[InstanceIdSet] = js.undefined
  }
  
  trait S3Storage extends js.Object {
    /**
      * The access key ID of the owner of the bucket. Before you specify a value for your access key ID, review and follow the guidance in Best Practices for Managing AWS Access Keys.
      */
    var AWSAccessKeyId: js.UndefOr[String] = js.undefined
    /**
      * The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
      */
    var Bucket: js.UndefOr[String] = js.undefined
    /**
      * The beginning of the file name of the AMI.
      */
    var Prefix: js.UndefOr[String] = js.undefined
    /**
      * An Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on your behalf.
      */
    var UploadPolicy: js.UndefOr[_Blob] = js.undefined
    /**
      * The signature of the JSON document.
      */
    var UploadPolicySignature: js.UndefOr[String] = js.undefined
  }
  
  trait ScheduledInstance extends js.Object {
    /**
      * The Availability Zone.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The date when the Scheduled Instance was purchased.
      */
    var CreateDate: js.UndefOr[DateTime] = js.undefined
    /**
      * The hourly price for a single instance.
      */
    var HourlyPrice: js.UndefOr[String] = js.undefined
    /**
      * The number of instances.
      */
    var InstanceCount: js.UndefOr[Integer] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[String] = js.undefined
    /**
      * The network platform (EC2-Classic or EC2-VPC).
      */
    var NetworkPlatform: js.UndefOr[String] = js.undefined
    /**
      * The time for the next schedule to start.
      */
    var NextSlotStartTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The platform (Linux/UNIX or Windows).
      */
    var Platform: js.UndefOr[String] = js.undefined
    /**
      * The time that the previous schedule ended or will end.
      */
    var PreviousSlotEndTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The schedule recurrence.
      */
    var Recurrence: js.UndefOr[ScheduledInstanceRecurrence] = js.undefined
    /**
      * The Scheduled Instance ID.
      */
    var ScheduledInstanceId: js.UndefOr[String] = js.undefined
    /**
      * The number of hours in the schedule.
      */
    var SlotDurationInHours: js.UndefOr[Integer] = js.undefined
    /**
      * The end date for the Scheduled Instance.
      */
    var TermEndDate: js.UndefOr[DateTime] = js.undefined
    /**
      * The start date for the Scheduled Instance.
      */
    var TermStartDate: js.UndefOr[DateTime] = js.undefined
    /**
      * The total number of hours for a single instance for the entire term.
      */
    var TotalScheduledInstanceHours: js.UndefOr[Integer] = js.undefined
  }
  
  trait ScheduledInstanceAvailability extends js.Object {
    /**
      * The Availability Zone.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The number of available instances.
      */
    var AvailableInstanceCount: js.UndefOr[Integer] = js.undefined
    /**
      * The time period for the first schedule to start.
      */
    var FirstSlotStartTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The hourly price for a single instance.
      */
    var HourlyPrice: js.UndefOr[String] = js.undefined
    /**
      * The instance type. You can specify one of the C3, C4, M4, or R3 instance types.
      */
    var InstanceType: js.UndefOr[String] = js.undefined
    /**
      * The maximum term. The only possible value is 365 days.
      */
    var MaxTermDurationInDays: js.UndefOr[Integer] = js.undefined
    /**
      * The minimum term. The only possible value is 365 days.
      */
    var MinTermDurationInDays: js.UndefOr[Integer] = js.undefined
    /**
      * The network platform (EC2-Classic or EC2-VPC).
      */
    var NetworkPlatform: js.UndefOr[String] = js.undefined
    /**
      * The platform (Linux/UNIX or Windows).
      */
    var Platform: js.UndefOr[String] = js.undefined
    /**
      * The purchase token. This token expires in two hours.
      */
    var PurchaseToken: js.UndefOr[String] = js.undefined
    /**
      * The schedule recurrence.
      */
    var Recurrence: js.UndefOr[ScheduledInstanceRecurrence] = js.undefined
    /**
      * The number of hours in the schedule.
      */
    var SlotDurationInHours: js.UndefOr[Integer] = js.undefined
    /**
      * The total number of hours for a single instance for the entire term.
      */
    var TotalScheduledInstanceHours: js.UndefOr[Integer] = js.undefined
  }
  
  trait ScheduledInstanceRecurrence extends js.Object {
    /**
      * The frequency (Daily, Weekly, or Monthly).
      */
    var Frequency: js.UndefOr[String] = js.undefined
    /**
      * The interval quantity. The interval unit depends on the value of frequency. For example, every 2 weeks or every 2 months.
      */
    var Interval: js.UndefOr[Integer] = js.undefined
    /**
      * The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday).
      */
    var OccurrenceDaySet: js.UndefOr[OccurrenceDaySet] = js.undefined
    /**
      * Indicates whether the occurrence is relative to the end of the specified week or month.
      */
    var OccurrenceRelativeToEnd: js.UndefOr[Boolean] = js.undefined
    /**
      * The unit for occurrenceDaySet (DayOfWeek or DayOfMonth).
      */
    var OccurrenceUnit: js.UndefOr[String] = js.undefined
  }
  
  trait ScheduledInstanceRecurrenceRequest extends js.Object {
    /**
      * The frequency (Daily, Weekly, or Monthly).
      */
    var Frequency: js.UndefOr[String] = js.undefined
    /**
      * The interval quantity. The interval unit depends on the value of Frequency. For example, every 2 weeks or every 2 months.
      */
    var Interval: js.UndefOr[Integer] = js.undefined
    /**
      * The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.
      */
    var OccurrenceDays: js.UndefOr[OccurrenceDayRequestSet] = js.undefined
    /**
      * Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.
      */
    var OccurrenceRelativeToEnd: js.UndefOr[Boolean] = js.undefined
    /**
      * The unit for OccurrenceDays (DayOfWeek or DayOfMonth). This value is required for a monthly schedule. You can't specify DayOfWeek with a weekly schedule. You can't specify this value with a daily schedule.
      */
    var OccurrenceUnit: js.UndefOr[String] = js.undefined
  }
  
  trait ScheduledInstancesBlockDeviceMapping extends js.Object {
    /**
      * The device name (for example, /dev/sdh or xvdh).
      */
    var DeviceName: js.UndefOr[String] = js.undefined
    /**
      * Parameters used to set up EBS volumes automatically when the instance is launched.
      */
    var Ebs: js.UndefOr[ScheduledInstancesEbs] = js.undefined
    /**
      * Suppresses the specified device included in the block device mapping of the AMI.
      */
    var NoDevice: js.UndefOr[String] = js.undefined
    /**
      * The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
      */
    var VirtualName: js.UndefOr[String] = js.undefined
  }
  
  trait ScheduledInstancesEbs extends js.Object {
    /**
      * Indicates whether the volume is deleted on instance termination.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * The number of I/O operations per second (IOPS) that the volume supports. For io1 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about gp2 baseline performance, I/O credits, and bursting, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Constraint: Range is 100-20000 IOPS for io1 volumes and 100-10000 IOPS for gp2 volumes. Condition: This parameter is required for requests to create io1volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.
      */
    var Iops: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the snapshot.
      */
    var SnapshotId: js.UndefOr[String] = js.undefined
    /**
      * The size of the volume, in GiB. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
      */
    var VolumeSize: js.UndefOr[Integer] = js.undefined
    /**
      * The volume type. gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, Throughput Optimized HDD for st1, Cold HDD for sc1, or standard for Magnetic. Default: standard 
      */
    var VolumeType: js.UndefOr[String] = js.undefined
  }
  
  trait ScheduledInstancesIamInstanceProfile extends js.Object {
    /**
      * The Amazon Resource Name (ARN).
      */
    var Arn: js.UndefOr[String] = js.undefined
    /**
      * The name.
      */
    var Name: js.UndefOr[String] = js.undefined
  }
  
  trait ScheduledInstancesIpv6Address extends js.Object {
    /**
      * The IPv6 address.
      */
    var Ipv6Address: js.UndefOr[Ipv6Address] = js.undefined
  }
  
  trait ScheduledInstancesLaunchSpecification extends js.Object {
    /**
      * One or more block device mapping entries.
      */
    var BlockDeviceMappings: js.UndefOr[ScheduledInstancesBlockDeviceMappingSet] = js.undefined
    /**
      * Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false 
      */
    var EbsOptimized: js.UndefOr[Boolean] = js.undefined
    /**
      * The IAM instance profile.
      */
    var IamInstanceProfile: js.UndefOr[ScheduledInstancesIamInstanceProfile] = js.undefined
    /**
      * The ID of the Amazon Machine Image (AMI).
      */
    var ImageId: String
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[String] = js.undefined
    /**
      * The ID of the kernel.
      */
    var KernelId: js.UndefOr[String] = js.undefined
    /**
      * The name of the key pair.
      */
    var KeyName: js.UndefOr[String] = js.undefined
    /**
      * Enable or disable monitoring for the instances.
      */
    var Monitoring: js.UndefOr[ScheduledInstancesMonitoring] = js.undefined
    /**
      * One or more network interfaces.
      */
    var NetworkInterfaces: js.UndefOr[ScheduledInstancesNetworkInterfaceSet] = js.undefined
    /**
      * The placement information.
      */
    var Placement: js.UndefOr[ScheduledInstancesPlacement] = js.undefined
    /**
      * The ID of the RAM disk.
      */
    var RamdiskId: js.UndefOr[String] = js.undefined
    /**
      * The IDs of one or more security groups.
      */
    var SecurityGroupIds: js.UndefOr[ScheduledInstancesSecurityGroupIdSet] = js.undefined
    /**
      * The ID of the subnet in which to launch the instances.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * The base64-encoded MIME user data.
      */
    var UserData: js.UndefOr[String] = js.undefined
  }
  
  trait ScheduledInstancesMonitoring extends js.Object {
    /**
      * Indicates whether monitoring is enabled.
      */
    var Enabled: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ScheduledInstancesNetworkInterface extends js.Object {
    /**
      * Indicates whether to assign a public IPv4 address to instances launched in a VPC. The public IPv4 address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true.
      */
    var AssociatePublicIpAddress: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether to delete the interface when the instance is terminated.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * The description.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The index of the device for the network interface attachment.
      */
    var DeviceIndex: js.UndefOr[Integer] = js.undefined
    /**
      * The IDs of one or more security groups.
      */
    var Groups: js.UndefOr[ScheduledInstancesSecurityGroupIdSet] = js.undefined
    /**
      * The number of IPv6 addresses to assign to the network interface. The IPv6 addresses are automatically selected from the subnet range.
      */
    var Ipv6AddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * One or more specific IPv6 addresses from the subnet range.
      */
    var Ipv6Addresses: js.UndefOr[ScheduledInstancesIpv6AddressList] = js.undefined
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * The IPv4 address of the network interface within the subnet.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
    /**
      * The private IPv4 addresses.
      */
    var PrivateIpAddressConfigs: js.UndefOr[PrivateIpAddressConfigSet] = js.undefined
    /**
      * The number of secondary private IPv4 addresses.
      */
    var SecondaryPrivateIpAddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the subnet.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
  }
  
  trait ScheduledInstancesPlacement extends js.Object {
    /**
      * The Availability Zone.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The name of the placement group.
      */
    var GroupName: js.UndefOr[String] = js.undefined
  }
  
  trait ScheduledInstancesPrivateIpAddressConfig extends js.Object {
    /**
      * Indicates whether this is a primary IPv4 address. Otherwise, this is a secondary IPv4 address.
      */
    var Primary: js.UndefOr[Boolean] = js.undefined
    /**
      * The IPv4 address.
      */
    var PrivateIpAddress: js.UndefOr[String] = js.undefined
  }
  
  trait SearchTransitGatewayRoutesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more filters. The possible values are:    attachment.transit-gateway-attachment-id- The id of the transit gateway attachment.    attachment.resource-id - The resource id of the transit gateway attachment.    attachment.resource-type - The attachment resource type (vpc | vpn).    route-search.exact-match - The exact match of the specified filter.    route-search.longest-prefix-match - The longest prefix that matches the route.    route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.    route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.    state - The state of the attachment (available | deleted | deleting | failed | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting).    type - The type of roue (active | blackhole).  
      */
    var Filters: FilterList
    /**
      * The maximum number of routes to return.
      */
    var MaxResults: js.UndefOr[TransitGatewayMaxResults] = js.undefined
    /**
      * The ID of the transit gateway route table.
      */
    var TransitGatewayRouteTableId: String
  }
  
  trait SearchTransitGatewayRoutesResult extends js.Object {
    /**
      * Indicates whether there are additional routes available.
      */
    var AdditionalRoutesAvailable: js.UndefOr[Boolean] = js.undefined
    /**
      * Information about the routes.
      */
    var Routes: js.UndefOr[TransitGatewayRouteList] = js.undefined
  }
  
  trait SecurityGroup extends js.Object {
    /**
      * A description of the security group.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The ID of the security group.
      */
    var GroupId: js.UndefOr[String] = js.undefined
    /**
      * The name of the security group.
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * One or more inbound rules associated with the security group.
      */
    var IpPermissions: js.UndefOr[IpPermissionList] = js.undefined
    /**
      * [EC2-VPC] One or more outbound rules associated with the security group.
      */
    var IpPermissionsEgress: js.UndefOr[IpPermissionList] = js.undefined
    /**
      * The AWS account ID of the owner of the security group.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * Any tags assigned to the security group.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * [EC2-VPC] The ID of the VPC for the security group.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait SecurityGroupIdentifier extends js.Object {
    /**
      * The ID of the security group.
      */
    var GroupId: js.UndefOr[String] = js.undefined
    /**
      * The name of the security group.
      */
    var GroupName: js.UndefOr[String] = js.undefined
  }
  
  trait SecurityGroupReference extends js.Object {
    /**
      * The ID of your security group.
      */
    var GroupId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the VPC with the referencing security group.
      */
    var ReferencingVpcId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the VPC peering connection.
      */
    var VpcPeeringConnectionId: js.UndefOr[String] = js.undefined
  }
  
  trait ServiceConfiguration extends js.Object {
    /**
      * Indicates whether requests from other AWS accounts to create an endpoint to the service must first be accepted.
      */
    var AcceptanceRequired: js.UndefOr[Boolean] = js.undefined
    /**
      * In the Availability Zones in which the service is available.
      */
    var AvailabilityZones: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The DNS names for the service.
      */
    var BaseEndpointDnsNames: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.
      */
    var NetworkLoadBalancerArns: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The private DNS name for the service.
      */
    var PrivateDnsName: js.UndefOr[String] = js.undefined
    /**
      * The ID of the service.
      */
    var ServiceId: js.UndefOr[String] = js.undefined
    /**
      * The name of the service.
      */
    var ServiceName: js.UndefOr[String] = js.undefined
    /**
      * The service state.
      */
    var ServiceState: js.UndefOr[ServiceState] = js.undefined
    /**
      * The type of service.
      */
    var ServiceType: js.UndefOr[ServiceTypeDetailSet] = js.undefined
  }
  
  trait ServiceDetail extends js.Object {
    /**
      * Indicates whether VPC endpoint connection requests to the service must be accepted by the service owner.
      */
    var AcceptanceRequired: js.UndefOr[Boolean] = js.undefined
    /**
      * The Availability Zones in which the service is available.
      */
    var AvailabilityZones: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The DNS names for the service.
      */
    var BaseEndpointDnsNames: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The AWS account ID of the service owner.
      */
    var Owner: js.UndefOr[String] = js.undefined
    /**
      * The private DNS name for the service.
      */
    var PrivateDnsName: js.UndefOr[String] = js.undefined
    /**
      * The Amazon Resource Name (ARN) of the service.
      */
    var ServiceName: js.UndefOr[String] = js.undefined
    /**
      * The type of service.
      */
    var ServiceType: js.UndefOr[ServiceTypeDetailSet] = js.undefined
    /**
      * Indicates whether the service supports endpoint policies.
      */
    var VpcEndpointPolicySupported: js.UndefOr[Boolean] = js.undefined
  }
  
  trait ServiceTypeDetail extends js.Object {
    /**
      * The type of service.
      */
    var ServiceType: js.UndefOr[ServiceType] = js.undefined
  }
  
  trait SlotDateTimeRangeRequest extends js.Object {
    /**
      * The earliest date and time, in UTC, for the Scheduled Instance to start.
      */
    var EarliestTime: DateTime
    /**
      * The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.
      */
    var LatestTime: DateTime
  }
  
  trait SlotStartTimeRangeRequest extends js.Object {
    /**
      * The earliest date and time, in UTC, for the Scheduled Instance to start.
      */
    var EarliestTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The latest date and time, in UTC, for the Scheduled Instance to start.
      */
    var LatestTime: js.UndefOr[DateTime] = js.undefined
  }
  
  trait Snapshot extends js.Object {
    /**
      * The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by the DescribeSnapshots API operation.
      */
    var DataEncryptionKeyId: js.UndefOr[String] = js.undefined
    /**
      * The description for the snapshot.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether the snapshot is encrypted.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the parent volume.
      */
    var KmsKeyId: js.UndefOr[String] = js.undefined
    /**
      *  Value from an Amazon-maintained list (amazon | aws-marketplace | microsoft) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console. 
      */
    var OwnerAlias: js.UndefOr[String] = js.undefined
    /**
      * The AWS account ID of the EBS snapshot owner.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * The progress of the snapshot, as a percentage.
      */
    var Progress: js.UndefOr[String] = js.undefined
    /**
      * The ID of the snapshot. Each snapshot receives a unique identifier when it is created.
      */
    var SnapshotId: js.UndefOr[String] = js.undefined
    /**
      * The time stamp when the snapshot was initiated.
      */
    var StartTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The snapshot state.
      */
    var State: js.UndefOr[SnapshotState] = js.undefined
    /**
      * Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper AWS Key Management Service (AWS KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by the DescribeSnapshots API operation.
      */
    var StateMessage: js.UndefOr[String] = js.undefined
    /**
      * Any tags assigned to the snapshot.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the volume that was used to create the snapshot. Snapshots created by the CopySnapshot action have an arbitrary volume ID that should not be used for any purpose.
      */
    var VolumeId: js.UndefOr[String] = js.undefined
    /**
      * The size of the volume, in GiB.
      */
    var VolumeSize: js.UndefOr[Integer] = js.undefined
  }
  
  trait SnapshotDetail extends js.Object {
    /**
      * A description for the snapshot.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The block device mapping for the snapshot.
      */
    var DeviceName: js.UndefOr[String] = js.undefined
    /**
      * The size of the disk in the snapshot, in GiB.
      */
    var DiskImageSize: js.UndefOr[Double] = js.undefined
    /**
      * The format of the disk image from which the snapshot is created.
      */
    var Format: js.UndefOr[String] = js.undefined
    /**
      * The percentage of progress for the task.
      */
    var Progress: js.UndefOr[String] = js.undefined
    /**
      * The snapshot ID of the disk being imported.
      */
    var SnapshotId: js.UndefOr[String] = js.undefined
    /**
      * A brief status of the snapshot creation.
      */
    var Status: js.UndefOr[String] = js.undefined
    /**
      * A detailed status message for the snapshot creation.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
    /**
      * The URL used to access the disk image.
      */
    var Url: js.UndefOr[String] = js.undefined
    /**
      * The S3 bucket for the disk image.
      */
    var UserBucket: js.UndefOr[UserBucketDetails] = js.undefined
  }
  
  trait SnapshotDiskContainer extends js.Object {
    /**
      * The description of the disk image being imported.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The format of the disk image being imported. Valid values: VHD | VMDK 
      */
    var Format: js.UndefOr[String] = js.undefined
    /**
      * The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..).
      */
    var Url: js.UndefOr[String] = js.undefined
    /**
      * The S3 bucket for the disk image.
      */
    var UserBucket: js.UndefOr[UserBucket] = js.undefined
  }
  
  trait SnapshotTaskDetail extends js.Object {
    /**
      * The description of the snapshot.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The size of the disk in the snapshot, in GiB.
      */
    var DiskImageSize: js.UndefOr[Double] = js.undefined
    /**
      * Indicates whether the snapshot is encrypted.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * The format of the disk image from which the snapshot is created.
      */
    var Format: js.UndefOr[String] = js.undefined
    /**
      * The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted snapshot.
      */
    var KmsKeyId: js.UndefOr[String] = js.undefined
    /**
      * The percentage of completion for the import snapshot task.
      */
    var Progress: js.UndefOr[String] = js.undefined
    /**
      * The snapshot ID of the disk being imported.
      */
    var SnapshotId: js.UndefOr[String] = js.undefined
    /**
      * A brief status for the import snapshot task.
      */
    var Status: js.UndefOr[String] = js.undefined
    /**
      * A detailed status message for the import snapshot task.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
    /**
      * The URL of the disk image from which the snapshot is created.
      */
    var Url: js.UndefOr[String] = js.undefined
    /**
      * The S3 bucket for the disk image.
      */
    var UserBucket: js.UndefOr[UserBucketDetails] = js.undefined
  }
  
  trait SpotDatafeedSubscription extends js.Object {
    /**
      * The Amazon S3 bucket where the Spot Instance data feed is located.
      */
    var Bucket: js.UndefOr[String] = js.undefined
    /**
      * The fault codes for the Spot Instance request, if any.
      */
    var Fault: js.UndefOr[SpotInstanceStateFault] = js.undefined
    /**
      * The AWS account ID of the account.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * The prefix that is prepended to data feed files.
      */
    var Prefix: js.UndefOr[String] = js.undefined
    /**
      * The state of the Spot Instance data feed subscription.
      */
    var State: js.UndefOr[DatafeedSubscriptionState] = js.undefined
  }
  
  trait SpotFleetLaunchSpecification extends js.Object {
    /**
      * Deprecated.
      */
    var AddressingType: js.UndefOr[String] = js.undefined
    /**
      * One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
      */
    var BlockDeviceMappings: js.UndefOr[BlockDeviceMappingList] = js.undefined
    /**
      * Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false 
      */
    var EbsOptimized: js.UndefOr[Boolean] = js.undefined
    /**
      * The IAM instance profile.
      */
    var IamInstanceProfile: js.UndefOr[IamInstanceProfileSpecification] = js.undefined
    /**
      * The ID of the AMI.
      */
    var ImageId: js.UndefOr[String] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * The ID of the kernel.
      */
    var KernelId: js.UndefOr[String] = js.undefined
    /**
      * The name of the key pair.
      */
    var KeyName: js.UndefOr[String] = js.undefined
    /**
      * Enable or disable monitoring for the instances.
      */
    var Monitoring: js.UndefOr[SpotFleetMonitoring] = js.undefined
    /**
      * One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
      */
    var NetworkInterfaces: js.UndefOr[InstanceNetworkInterfaceSpecificationList] = js.undefined
    /**
      * The placement information.
      */
    var Placement: js.UndefOr[SpotPlacement] = js.undefined
    /**
      * The ID of the RAM disk.
      */
    var RamdiskId: js.UndefOr[String] = js.undefined
    /**
      * One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
      */
    var SecurityGroups: js.UndefOr[GroupIdentifierList] = js.undefined
    /**
      * The maximum price per unit hour that you are willing to pay for a Spot Instance. If this value is not specified, the default is the Spot price specified for the fleet. To determine the Spot price per unit hour, divide the Spot price by the value of WeightedCapacity.
      */
    var SpotPrice: js.UndefOr[String] = js.undefined
    /**
      * The ID of the subnet in which to launch the instances. To specify multiple subnets, separate them using commas; for example, "subnet-a61dafcf, subnet-65ea5f08".
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * The tags to apply during creation.
      */
    var TagSpecifications: js.UndefOr[SpotFleetTagSpecificationList] = js.undefined
    /**
      * The Base64-encoded user data to make available to the instances.
      */
    var UserData: js.UndefOr[String] = js.undefined
    /**
      * The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms (instances or a performance characteristic such as vCPUs, memory, or I/O). If the target capacity divided by this value is not a whole number, we round the number of instances to the next whole number. If this value is not specified, the default is 1.
      */
    var WeightedCapacity: js.UndefOr[Double] = js.undefined
  }
  
  trait SpotFleetMonitoring extends js.Object {
    /**
      * Enables monitoring for the instance. Default: false 
      */
    var Enabled: js.UndefOr[Boolean] = js.undefined
  }
  
  trait SpotFleetRequestConfig extends js.Object {
    /**
      * The progress of the Spot Fleet request. If there is an error, the status is error. After all requests are placed, the status is pending_fulfillment. If the size of the fleet is equal to or greater than its target capacity, the status is fulfilled. If the size of the fleet is decreased, the status is pending_termination while Spot Instances are terminating.
      */
    var ActivityStatus: js.UndefOr[ActivityStatus] = js.undefined
    /**
      * The creation date and time of the request.
      */
    var CreateTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The configuration of the Spot Fleet request.
      */
    var SpotFleetRequestConfig: js.UndefOr[SpotFleetRequestConfigData] = js.undefined
    /**
      * The ID of the Spot Fleet request.
      */
    var SpotFleetRequestId: js.UndefOr[String] = js.undefined
    /**
      * The state of the Spot Fleet request.
      */
    var SpotFleetRequestState: js.UndefOr[BatchState] = js.undefined
  }
  
  trait SpotFleetRequestConfigData extends js.Object {
    /**
      * Indicates how to allocate the target capacity across the Spot pools specified by the Spot Fleet request. The default is lowestPrice.
      */
    var AllocationStrategy: js.UndefOr[AllocationStrategy] = js.undefined
    /**
      * A unique, case-sensitive identifier that you provide to ensure the idempotency of your listings. This helps to avoid duplicate listings. For more information, see Ensuring Idempotency.
      */
    var ClientToken: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether running Spot Instances should be terminated if the target capacity of the Spot Fleet request is decreased below the current size of the Spot Fleet.
      */
    var ExcessCapacityTerminationPolicy: js.UndefOr[ExcessCapacityTerminationPolicy] = js.undefined
    /**
      * The number of units fulfilled by this request compared to the set target capacity. You cannot set this value.
      */
    var FulfilledCapacity: js.UndefOr[Double] = js.undefined
    /**
      * Grants the Spot Fleet permission to terminate Spot Instances on your behalf when you cancel its Spot Fleet request using CancelSpotFleetRequests or when the Spot Fleet request expires, if you set terminateInstancesWithExpiration.
      */
    var IamFleetRole: String
    /**
      * The behavior when a Spot Instance is interrupted. The default is terminate.
      */
    var InstanceInterruptionBehavior: js.UndefOr[InstanceInterruptionBehavior] = js.undefined
    /**
      * The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot AllocationStrategy is set to lowest-price. Spot Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
      */
    var InstancePoolsToUseCount: js.UndefOr[Integer] = js.undefined
    /**
      * The launch specifications for the Spot Fleet request.
      */
    var LaunchSpecifications: js.UndefOr[LaunchSpecsList] = js.undefined
    /**
      * The launch template and overrides.
      */
    var LaunchTemplateConfigs: js.UndefOr[LaunchTemplateConfigList] = js.undefined
    /**
      * One or more Classic Load Balancers and target groups to attach to the Spot Fleet request. Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups. With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.
      */
    var LoadBalancersConfig: js.UndefOr[LoadBalancersConfig] = js.undefined
    /**
      * The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowestPrice, Spot Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, Spot Fleet uses the priority that you assign to each Spot Fleet launch template override, launching the highest priority first. If you do not specify a value, Spot Fleet defaults to lowestPrice.
      */
    var OnDemandAllocationStrategy: js.UndefOr[OnDemandAllocationStrategy] = js.undefined
    /**
      * The number of On-Demand units fulfilled by this request compared to the set target On-Demand capacity.
      */
    var OnDemandFulfilledCapacity: js.UndefOr[Double] = js.undefined
    /**
      * The number of On-Demand units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
      */
    var OnDemandTargetCapacity: js.UndefOr[Integer] = js.undefined
    /**
      * Indicates whether Spot Fleet should replace unhealthy instances.
      */
    var ReplaceUnhealthyInstances: js.UndefOr[Boolean] = js.undefined
    /**
      * The maximum price per unit hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
      */
    var SpotPrice: js.UndefOr[String] = js.undefined
    /**
      * The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
      */
    var TargetCapacity: Integer
    /**
      * Indicates whether running Spot Instances should be terminated when the Spot Fleet request expires.
      */
    var TerminateInstancesWithExpiration: js.UndefOr[Boolean] = js.undefined
    /**
      * The type of request. Indicates whether the Spot Fleet only requests the target capacity or also attempts to maintain it. When this value is request, the Spot Fleet only places the required requests. It does not attempt to replenish Spot Instances if capacity is diminished, nor does it submit requests in alternative Spot pools if capacity is not available. When this value is maintain, the Spot Fleet maintains the target capacity. The Spot Fleet places the required requests to meet capacity and automatically replenishes any interrupted instances. Default: maintain. instant is listed but is not used by Spot Fleet.
      */
    var Type: js.UndefOr[FleetType] = js.undefined
    /**
      * The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
      */
    var ValidFrom: js.UndefOr[DateTime] = js.undefined
    /**
      * The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot Instance requests are placed or able to fulfill the request. The default end date is 7 days from the current date.
      */
    var ValidUntil: js.UndefOr[DateTime] = js.undefined
  }
  
  trait SpotFleetTagSpecification extends js.Object {
    /**
      * The type of resource. Currently, the only resource type that is supported is instance.
      */
    var ResourceType: js.UndefOr[ResourceType] = js.undefined
    /**
      * The tags.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
  }
  
  trait SpotInstanceRequest extends js.Object {
    /**
      * If you specified a duration and your Spot Instance request was fulfilled, this is the fixed hourly price in effect for the Spot Instance while it runs.
      */
    var ActualBlockHourlyPrice: js.UndefOr[String] = js.undefined
    /**
      * The Availability Zone group. If you specify the same Availability Zone group for all Spot Instance requests, all Spot Instances are launched in the same Availability Zone.
      */
    var AvailabilityZoneGroup: js.UndefOr[String] = js.undefined
    /**
      * The duration for the Spot Instance, in minutes.
      */
    var BlockDurationMinutes: js.UndefOr[Integer] = js.undefined
    /**
      * The date and time when the Spot Instance request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
      */
    var CreateTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The fault codes for the Spot Instance request, if any.
      */
    var Fault: js.UndefOr[SpotInstanceStateFault] = js.undefined
    /**
      * The instance ID, if an instance has been launched to fulfill the Spot Instance request.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The behavior when a Spot Instance is interrupted.
      */
    var InstanceInterruptionBehavior: js.UndefOr[InstanceInterruptionBehavior] = js.undefined
    /**
      * The instance launch group. Launch groups are Spot Instances that launch together and terminate together.
      */
    var LaunchGroup: js.UndefOr[String] = js.undefined
    /**
      * Additional information for launching instances.
      */
    var LaunchSpecification: js.UndefOr[LaunchSpecification] = js.undefined
    /**
      * The Availability Zone in which the request is launched.
      */
    var LaunchedAvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The product description associated with the Spot Instance.
      */
    var ProductDescription: js.UndefOr[RIProductDescription] = js.undefined
    /**
      * The ID of the Spot Instance request.
      */
    var SpotInstanceRequestId: js.UndefOr[String] = js.undefined
    /**
      * The maximum price per hour that you are willing to pay for a Spot Instance.
      */
    var SpotPrice: js.UndefOr[String] = js.undefined
    /**
      * The state of the Spot Instance request. Spot status information helps track your Spot Instance requests. For more information, see Spot Status in the Amazon EC2 User Guide for Linux Instances.
      */
    var State: js.UndefOr[SpotInstanceState] = js.undefined
    /**
      * The status code and status message describing the Spot Instance request.
      */
    var Status: js.UndefOr[SpotInstanceStatus] = js.undefined
    /**
      * Any tags assigned to the resource.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The Spot Instance request type.
      */
    var Type: js.UndefOr[SpotInstanceType] = js.undefined
    /**
      * The start date of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The request becomes active at this date and time.
      */
    var ValidFrom: js.UndefOr[DateTime] = js.undefined
    /**
      * The end date of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). If this is a one-time request, it remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached. The default end date is 7 days from the current date.
      */
    var ValidUntil: js.UndefOr[DateTime] = js.undefined
  }
  
  trait SpotInstanceStateFault extends js.Object {
    /**
      * The reason code for the Spot Instance state change.
      */
    var Code: js.UndefOr[String] = js.undefined
    /**
      * The message for the Spot Instance state change.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait SpotInstanceStatus extends js.Object {
    /**
      * The status code. For a list of status codes, see Spot Status Codes in the Amazon EC2 User Guide for Linux Instances.
      */
    var Code: js.UndefOr[String] = js.undefined
    /**
      * The description for the status code.
      */
    var Message: js.UndefOr[String] = js.undefined
    /**
      * The date and time of the most recent status update, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
      */
    var UpdateTime: js.UndefOr[DateTime] = js.undefined
  }
  
  trait SpotMarketOptions extends js.Object {
    /**
      * The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
      */
    var BlockDurationMinutes: js.UndefOr[Integer] = js.undefined
    /**
      * The behavior when a Spot Instance is interrupted. The default is terminate.
      */
    var InstanceInterruptionBehavior: js.UndefOr[InstanceInterruptionBehavior] = js.undefined
    /**
      * The maximum hourly price you're willing to pay for the Spot Instances. The default is the On-Demand price.
      */
    var MaxPrice: js.UndefOr[String] = js.undefined
    /**
      * The Spot Instance request type. For RunInstances, persistent Spot Instance requests are only supported when InstanceInterruptionBehavior is set to either hibernate or stop.
      */
    var SpotInstanceType: js.UndefOr[SpotInstanceType] = js.undefined
    /**
      * The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached. The default end date is 7 days from the current date.
      */
    var ValidUntil: js.UndefOr[DateTime] = js.undefined
  }
  
  trait SpotOptions extends js.Object {
    /**
      * Indicates how to allocate the target capacity across the Spot pools specified by the Spot Fleet request. The default is lowest-price.
      */
    var AllocationStrategy: js.UndefOr[SpotAllocationStrategy] = js.undefined
    /**
      * The behavior when a Spot Instance is interrupted. The default is terminate.
      */
    var InstanceInterruptionBehavior: js.UndefOr[SpotInstanceInterruptionBehavior] = js.undefined
    /**
      * The number of Spot pools across which to allocate your target Spot capacity. Valid only when AllocationStrategy is set to lowestPrice. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
      */
    var InstancePoolsToUseCount: js.UndefOr[Integer] = js.undefined
    /**
      * The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
      */
    var MinTargetCapacity: js.UndefOr[Integer] = js.undefined
    /**
      * Indicates that the fleet launches all Spot Instances into a single Availability Zone.
      */
    var SingleAvailabilityZone: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet.
      */
    var SingleInstanceType: js.UndefOr[Boolean] = js.undefined
  }
  
  trait SpotOptionsRequest extends js.Object {
    /**
      * Indicates how to allocate the target capacity across the Spot pools specified by the Spot Fleet request. The default is lowestPrice.
      */
    var AllocationStrategy: js.UndefOr[SpotAllocationStrategy] = js.undefined
    /**
      * The behavior when a Spot Instance is interrupted. The default is terminate.
      */
    var InstanceInterruptionBehavior: js.UndefOr[SpotInstanceInterruptionBehavior] = js.undefined
    /**
      * The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot AllocationStrategy is set to lowest-price. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
      */
    var InstancePoolsToUseCount: js.UndefOr[Integer] = js.undefined
    /**
      * The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
      */
    var MinTargetCapacity: js.UndefOr[Integer] = js.undefined
    /**
      * Indicates that the fleet launches all Spot Instances into a single Availability Zone.
      */
    var SingleAvailabilityZone: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet.
      */
    var SingleInstanceType: js.UndefOr[Boolean] = js.undefined
  }
  
  trait SpotPlacement extends js.Object {
    /**
      * The Availability Zone. [Spot Fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The name of the placement group.
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for Spot Instances.
      */
    var Tenancy: js.UndefOr[Tenancy] = js.undefined
  }
  
  trait SpotPrice extends js.Object {
    /**
      * The Availability Zone.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The instance type.
      */
    var InstanceType: js.UndefOr[InstanceType] = js.undefined
    /**
      * A general description of the AMI.
      */
    var ProductDescription: js.UndefOr[RIProductDescription] = js.undefined
    /**
      * The maximum price per hour that you are willing to pay for a Spot Instance.
      */
    var SpotPrice: js.UndefOr[String] = js.undefined
    /**
      * The date and time the request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
      */
    var Timestamp: js.UndefOr[DateTime] = js.undefined
  }
  
  trait StaleIpPermission extends js.Object {
    /**
      * The start of the port range for the TCP and UDP protocols, or an ICMP type number. A value of -1 indicates all ICMP types. 
      */
    var FromPort: js.UndefOr[Integer] = js.undefined
    /**
      * The IP protocol name (for tcp, udp, and icmp) or number (see Protocol Numbers).
      */
    var IpProtocol: js.UndefOr[String] = js.undefined
    /**
      * One or more IP ranges. Not applicable for stale security group rules.
      */
    var IpRanges: js.UndefOr[IpRanges] = js.undefined
    /**
      * One or more prefix list IDs for an AWS service. Not applicable for stale security group rules.
      */
    var PrefixListIds: js.UndefOr[PrefixListIdSet] = js.undefined
    /**
      * The end of the port range for the TCP and UDP protocols, or an ICMP type number. A value of -1 indicates all ICMP types. 
      */
    var ToPort: js.UndefOr[Integer] = js.undefined
    /**
      * One or more security group pairs. Returns the ID of the referenced security group and VPC, and the ID and status of the VPC peering connection.
      */
    var UserIdGroupPairs: js.UndefOr[UserIdGroupPairSet] = js.undefined
  }
  
  trait StaleSecurityGroup extends js.Object {
    /**
      * The description of the security group.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The ID of the security group.
      */
    var GroupId: js.UndefOr[String] = js.undefined
    /**
      * The name of the security group.
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * Information about the stale inbound rules in the security group.
      */
    var StaleIpPermissions: js.UndefOr[StaleIpPermissionSet] = js.undefined
    /**
      * Information about the stale outbound rules in the security group.
      */
    var StaleIpPermissionsEgress: js.UndefOr[StaleIpPermissionSet] = js.undefined
    /**
      * The ID of the VPC for the security group.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait StartInstancesRequest extends js.Object {
    /**
      * Reserved.
      */
    var AdditionalInfo: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more instance IDs.
      */
    var InstanceIds: InstanceIdStringList
  }
  
  trait StartInstancesResult extends js.Object {
    /**
      * Information about one or more started instances.
      */
    var StartingInstances: js.UndefOr[InstanceStateChangeList] = js.undefined
  }
  
  trait StateReason extends js.Object {
    /**
      * The reason code for the state change.
      */
    var Code: js.UndefOr[String] = js.undefined
    /**
      * The message for the state change.    Server.InsufficientInstanceCapacity: There was insufficient capacity available to satisfy the launch request.    Server.InternalError: An internal error caused the instance to terminate during launch.    Server.ScheduledStop: The instance was stopped due to a scheduled retirement.    Server.SpotInstanceShutdown: The instance was stopped because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.    Server.SpotInstanceTermination: The instance was terminated because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.    Client.InstanceInitiatedShutdown: The instance was shut down using the shutdown -h command from the instance.    Client.InstanceTerminated: The instance was terminated or rebooted during AMI creation.    Client.InternalError: A client error caused the instance to terminate during launch.    Client.InvalidSnapshot.NotFound: The specified snapshot was not found.    Client.UserInitiatedHibernate: Hibernation was initiated on the instance.    Client.UserInitiatedShutdown: The instance was shut down using the Amazon EC2 API.    Client.VolumeLimitExceeded: The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your account limits.  
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait StopInstancesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances. Default: false 
      */
    var Force: js.UndefOr[Boolean] = js.undefined
    /**
      * Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide.  Default: false 
      */
    var Hibernate: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more instance IDs.
      */
    var InstanceIds: InstanceIdStringList
  }
  
  trait StopInstancesResult extends js.Object {
    /**
      * Information about one or more stopped instances.
      */
    var StoppingInstances: js.UndefOr[InstanceStateChangeList] = js.undefined
  }
  
  trait Storage extends js.Object {
    /**
      * An Amazon S3 storage location.
      */
    var S3: js.UndefOr[S3Storage] = js.undefined
  }
  
  trait StorageLocation extends js.Object {
    /**
      * The name of the S3 bucket.
      */
    var Bucket: js.UndefOr[String] = js.undefined
    /**
      * The key.
      */
    var Key: js.UndefOr[String] = js.undefined
  }
  
  trait Subnet extends js.Object {
    /**
      * Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives an IPv6 address.
      */
    var AssignIpv6AddressOnCreation: js.UndefOr[Boolean] = js.undefined
    /**
      * The Availability Zone of the subnet.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The AZ ID of the subnet.
      */
    var AvailabilityZoneId: js.UndefOr[String] = js.undefined
    /**
      * The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any stopped instances are considered unavailable.
      */
    var AvailableIpAddressCount: js.UndefOr[Integer] = js.undefined
    /**
      * The IPv4 CIDR block assigned to the subnet.
      */
    var CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether this is the default subnet for the Availability Zone.
      */
    var DefaultForAz: js.UndefOr[Boolean] = js.undefined
    /**
      * Information about the IPv6 CIDR blocks associated with the subnet.
      */
    var Ipv6CidrBlockAssociationSet: js.UndefOr[SubnetIpv6CidrBlockAssociationSet] = js.undefined
    /**
      * Indicates whether instances launched in this subnet receive a public IPv4 address.
      */
    var MapPublicIpOnLaunch: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the AWS account that owns the subnet.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * The current state of the subnet.
      */
    var State: js.UndefOr[SubnetState] = js.undefined
    /**
      * The Amazon Resource Name (ARN) of the subnet.
      */
    var SubnetArn: js.UndefOr[String] = js.undefined
    /**
      * The ID of the subnet.
      */
    var SubnetId: js.UndefOr[String] = js.undefined
    /**
      * Any tags assigned to the subnet.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the VPC the subnet is in.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait SubnetCidrBlockState extends js.Object {
    /**
      * The state of a CIDR block.
      */
    var State: js.UndefOr[SubnetCidrBlockStateCode] = js.undefined
    /**
      * A message about the status of the CIDR block, if applicable.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
  }
  
  trait SubnetIpv6CidrBlockAssociation extends js.Object {
    /**
      * The association ID for the CIDR block.
      */
    var AssociationId: js.UndefOr[String] = js.undefined
    /**
      * The IPv6 CIDR block.
      */
    var Ipv6CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * Information about the state of the CIDR block.
      */
    var Ipv6CidrBlockState: js.UndefOr[SubnetCidrBlockState] = js.undefined
  }
  
  trait SuccessfulInstanceCreditSpecificationItem extends js.Object {
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
  }
  
  trait Tag extends js.Object {
    /**
      * The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with aws:.
      */
    var Key: js.UndefOr[String] = js.undefined
    /**
      * The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.
      */
    var Value: js.UndefOr[String] = js.undefined
  }
  
  trait TagDescription extends js.Object {
    /**
      * The tag key.
      */
    var Key: js.UndefOr[String] = js.undefined
    /**
      * The ID of the resource.
      */
    var ResourceId: js.UndefOr[String] = js.undefined
    /**
      * The resource type.
      */
    var ResourceType: js.UndefOr[ResourceType] = js.undefined
    /**
      * The tag value.
      */
    var Value: js.UndefOr[String] = js.undefined
  }
  
  trait TagSpecification extends js.Object {
    /**
      * The type of resource to tag. Currently, the resource types that support tagging on creation are fleet, dedicated-host, instance, snapshot, and volume. To tag a resource after it has been created, see CreateTags.
      */
    var ResourceType: js.UndefOr[ResourceType] = js.undefined
    /**
      * The tags to apply to the resource.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
  }
  
  trait TargetCapacitySpecification extends js.Object {
    /**
      * The default TotalTargetCapacity, which is either Spot or On-Demand.
      */
    var DefaultTargetCapacityType: js.UndefOr[DefaultTargetCapacityType] = js.undefined
    /**
      * The number of On-Demand units to request.
      */
    var OnDemandTargetCapacity: js.UndefOr[Integer] = js.undefined
    /**
      * The maximum number of Spot units to launch.
      */
    var SpotTargetCapacity: js.UndefOr[Integer] = js.undefined
    /**
      * The number of units to request, filled using DefaultTargetCapacityType.
      */
    var TotalTargetCapacity: js.UndefOr[Integer] = js.undefined
  }
  
  trait TargetCapacitySpecificationRequest extends js.Object {
    /**
      * The default TotalTargetCapacity, which is either Spot or On-Demand.
      */
    var DefaultTargetCapacityType: js.UndefOr[DefaultTargetCapacityType] = js.undefined
    /**
      * The number of On-Demand units to request.
      */
    var OnDemandTargetCapacity: js.UndefOr[Integer] = js.undefined
    /**
      * The number of Spot units to request.
      */
    var SpotTargetCapacity: js.UndefOr[Integer] = js.undefined
    /**
      * The number of units to request, filled using DefaultTargetCapacityType.
      */
    var TotalTargetCapacity: Integer
  }
  
  trait TargetConfiguration extends js.Object {
    /**
      * The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
      */
    var InstanceCount: js.UndefOr[Integer] = js.undefined
    /**
      * The ID of the Convertible Reserved Instance offering.
      */
    var OfferingId: js.UndefOr[String] = js.undefined
  }
  
  trait TargetConfigurationRequest extends js.Object {
    /**
      * The number of instances the Covertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
      */
    var InstanceCount: js.UndefOr[Integer] = js.undefined
    /**
      * The Convertible Reserved Instance offering ID.
      */
    var OfferingId: String
  }
  
  trait TargetGroup extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the target group.
      */
    var Arn: js.UndefOr[String] = js.undefined
  }
  
  trait TargetGroupsConfig extends js.Object {
    /**
      * One or more target groups.
      */
    var TargetGroups: js.UndefOr[TargetGroups] = js.undefined
  }
  
  trait TargetNetwork extends js.Object {
    /**
      * The ID of the association.
      */
    var AssociationId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the Client VPN endpoint with which the target network is associated.
      */
    var ClientVpnEndpointId: js.UndefOr[String] = js.undefined
    /**
      * The IDs of the security groups applied to the target network association.
      */
    var SecurityGroups: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The current state of the target network association.
      */
    var Status: js.UndefOr[AssociationStatus] = js.undefined
    /**
      * The ID of the subnet specified as the target network.
      */
    var TargetNetworkId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the VPC in which the target network (subnet) is located.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait TargetReservationValue extends js.Object {
    /**
      * The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.
      */
    var ReservationValue: js.UndefOr[ReservationValue] = js.undefined
    /**
      * The configuration of the Convertible Reserved Instances that make up the exchange.
      */
    var TargetConfiguration: js.UndefOr[TargetConfiguration] = js.undefined
  }
  
  trait TerminateClientVpnConnectionsRequest extends js.Object {
    /**
      * The ID of the Client VPN endpoint to which the client is connected.
      */
    var ClientVpnEndpointId: String
    /**
      * The ID of the client connection to be terminated.
      */
    var ConnectionId: js.UndefOr[String] = js.undefined
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The name of the user who initiated the connection. Use this option to terminate all active connections for the specified user. This option can only be used if the user has established up to five connections.
      */
    var Username: js.UndefOr[String] = js.undefined
  }
  
  trait TerminateClientVpnConnectionsResult extends js.Object {
    /**
      * The ID of the Client VPN endpoint.
      */
    var ClientVpnEndpointId: js.UndefOr[String] = js.undefined
    /**
      * The current state of the client connections.
      */
    var ConnectionStatuses: js.UndefOr[TerminateConnectionStatusSet] = js.undefined
    /**
      * The user who established the terminated client connections.
      */
    var Username: js.UndefOr[String] = js.undefined
  }
  
  trait TerminateConnectionStatus extends js.Object {
    /**
      * The ID of the client connection.
      */
    var ConnectionId: js.UndefOr[String] = js.undefined
    /**
      * A message about the status of the client connection, if applicable.
      */
    var CurrentStatus: js.UndefOr[ClientVpnConnectionStatus] = js.undefined
    /**
      * The state of the client connection.
      */
    var PreviousStatus: js.UndefOr[ClientVpnConnectionStatus] = js.undefined
  }
  
  trait TerminateInstancesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more instance IDs. Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.
      */
    var InstanceIds: InstanceIdStringList
  }
  
  trait TerminateInstancesResult extends js.Object {
    /**
      * Information about one or more terminated instances.
      */
    var TerminatingInstances: js.UndefOr[InstanceStateChangeList] = js.undefined
  }
  
  trait TransitGateway extends js.Object {
    /**
      * The creation time.
      */
    var CreationTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The description of the transit gateway.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The transit gateway options.
      */
    var Options: js.UndefOr[TransitGatewayOptions] = js.undefined
    /**
      * The ID of the AWS account ID that owns the transit gateway.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * The state of the transit gateway.
      */
    var State: js.UndefOr[TransitGatewayState] = js.undefined
    /**
      * The tags for the transit gateway.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The Amazon Resource Name (ARN) of the transit gateway.
      */
    var TransitGatewayArn: js.UndefOr[String] = js.undefined
    /**
      * The ID of the transit gateway.
      */
    var TransitGatewayId: js.UndefOr[String] = js.undefined
  }
  
  trait TransitGatewayAssociation extends js.Object {
    /**
      * The ID of the resource.
      */
    var ResourceId: js.UndefOr[String] = js.undefined
    /**
      * The resource type.
      */
    var ResourceType: js.UndefOr[TransitGatewayAttachmentResourceType] = js.undefined
    /**
      * The state of the association.
      */
    var State: js.UndefOr[TransitGatewayAssociationState] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the transit gateway route table.
      */
    var TransitGatewayRouteTableId: js.UndefOr[String] = js.undefined
  }
  
  trait TransitGatewayAttachment extends js.Object {
    /**
      * The association.
      */
    var Association: js.UndefOr[TransitGatewayAttachmentAssociation] = js.undefined
    /**
      * The creation time.
      */
    var CreationTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The ID of the resource.
      */
    var ResourceId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the AWS account that owns the resource.
      */
    var ResourceOwnerId: js.UndefOr[String] = js.undefined
    /**
      * The resource type.
      */
    var ResourceType: js.UndefOr[TransitGatewayAttachmentResourceType] = js.undefined
    /**
      * The attachment state.
      */
    var State: js.UndefOr[TransitGatewayAttachmentState] = js.undefined
    /**
      * The tags for the attachment.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the transit gateway.
      */
    var TransitGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the AWS account that owns the transit gateway.
      */
    var TransitGatewayOwnerId: js.UndefOr[String] = js.undefined
  }
  
  trait TransitGatewayAttachmentAssociation extends js.Object {
    /**
      * The state of the association.
      */
    var State: js.UndefOr[TransitGatewayAssociationState] = js.undefined
    /**
      * The ID of the route table for the transit gateway.
      */
    var TransitGatewayRouteTableId: js.UndefOr[String] = js.undefined
  }
  
  trait TransitGatewayAttachmentPropagation extends js.Object {
    /**
      * The state of the propagation route table.
      */
    var State: js.UndefOr[TransitGatewayPropagationState] = js.undefined
    /**
      * The ID of the propagation route table.
      */
    var TransitGatewayRouteTableId: js.UndefOr[String] = js.undefined
  }
  
  trait TransitGatewayOptions extends js.Object {
    /**
      * A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.
      */
    var AmazonSideAsn: js.UndefOr[Long] = js.undefined
    /**
      * The ID of the default association route table.
      */
    var AssociationDefaultRouteTableId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether attachment requests are automatically accepted.
      */
    var AutoAcceptSharedAttachments: js.UndefOr[AutoAcceptSharedAttachmentsValue] = js.undefined
    /**
      * Indicates whether resource attachments are automatically associated with the default association route table.
      */
    var DefaultRouteTableAssociation: js.UndefOr[DefaultRouteTableAssociationValue] = js.undefined
    /**
      * Indicates whether resource attachments automatically propagate routes to the default propagation route table.
      */
    var DefaultRouteTablePropagation: js.UndefOr[DefaultRouteTablePropagationValue] = js.undefined
    /**
      * Indicates whether DNS support is enabled.
      */
    var DnsSupport: js.UndefOr[DnsSupportValue] = js.undefined
    /**
      * The ID of the default propagation route table.
      */
    var PropagationDefaultRouteTableId: js.UndefOr[String] = js.undefined
    /**
      * Indicates whether Equal Cost Multipath Protocol support is enabled.
      */
    var VpnEcmpSupport: js.UndefOr[VpnEcmpSupportValue] = js.undefined
  }
  
  trait TransitGatewayPropagation extends js.Object {
    /**
      * The ID of the resource.
      */
    var ResourceId: js.UndefOr[String] = js.undefined
    /**
      * The resource type.
      */
    var ResourceType: js.UndefOr[TransitGatewayAttachmentResourceType] = js.undefined
    /**
      * The state.
      */
    var State: js.UndefOr[TransitGatewayPropagationState] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the transit gateway route table.
      */
    var TransitGatewayRouteTableId: js.UndefOr[String] = js.undefined
  }
  
  trait TransitGatewayRequestOptions extends js.Object {
    /**
      * A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.
      */
    var AmazonSideAsn: js.UndefOr[Long] = js.undefined
    /**
      * Enable or disable automatic acceptance of attachment requests. The default is disable.
      */
    var AutoAcceptSharedAttachments: js.UndefOr[AutoAcceptSharedAttachmentsValue] = js.undefined
    /**
      * Enable or disable automatic association with the default association route table. The default is enable.
      */
    var DefaultRouteTableAssociation: js.UndefOr[DefaultRouteTableAssociationValue] = js.undefined
    /**
      * Enable or disable automatic propagation of routes to the default propagation route table. The default is enable.
      */
    var DefaultRouteTablePropagation: js.UndefOr[DefaultRouteTablePropagationValue] = js.undefined
    /**
      * Enable or disable DNS support.
      */
    var DnsSupport: js.UndefOr[DnsSupportValue] = js.undefined
    /**
      * Enable or disable Equal Cost Multipath Protocol support.
      */
    var VpnEcmpSupport: js.UndefOr[VpnEcmpSupportValue] = js.undefined
  }
  
  trait TransitGatewayRoute extends js.Object {
    /**
      * The CIDR block used for destination matches.
      */
    var DestinationCidrBlock: js.UndefOr[String] = js.undefined
    /**
      * The state of the route.
      */
    var State: js.UndefOr[TransitGatewayRouteState] = js.undefined
    /**
      * The attachments.
      */
    var TransitGatewayAttachments: js.UndefOr[TransitGatewayRouteAttachmentList] = js.undefined
    /**
      * The route type.
      */
    var Type: js.UndefOr[TransitGatewayRouteType] = js.undefined
  }
  
  trait TransitGatewayRouteAttachment extends js.Object {
    /**
      * The ID of the resource.
      */
    var ResourceId: js.UndefOr[String] = js.undefined
    /**
      * The resource type.
      */
    var ResourceType: js.UndefOr[TransitGatewayAttachmentResourceType] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: js.UndefOr[String] = js.undefined
  }
  
  trait TransitGatewayRouteTable extends js.Object {
    /**
      * The creation time.
      */
    var CreationTime: js.UndefOr[DateTime] = js.undefined
    /**
      * Indicates whether this is the default association route table for the transit gateway.
      */
    var DefaultAssociationRouteTable: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether this is the default propagation route table for the transit gateway.
      */
    var DefaultPropagationRouteTable: js.UndefOr[Boolean] = js.undefined
    /**
      * The state of the transit gateway route table.
      */
    var State: js.UndefOr[TransitGatewayRouteTableState] = js.undefined
    /**
      * Any tags assigned to the route table.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the transit gateway.
      */
    var TransitGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the transit gateway route table.
      */
    var TransitGatewayRouteTableId: js.UndefOr[String] = js.undefined
  }
  
  trait TransitGatewayRouteTableAssociation extends js.Object {
    /**
      * The ID of the resource.
      */
    var ResourceId: js.UndefOr[String] = js.undefined
    /**
      * The resource type.
      */
    var ResourceType: js.UndefOr[TransitGatewayAttachmentResourceType] = js.undefined
    /**
      * The state of the association.
      */
    var State: js.UndefOr[TransitGatewayAssociationState] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: js.UndefOr[String] = js.undefined
  }
  
  trait TransitGatewayRouteTablePropagation extends js.Object {
    /**
      * The ID of the resource.
      */
    var ResourceId: js.UndefOr[String] = js.undefined
    /**
      * The type of resource.
      */
    var ResourceType: js.UndefOr[TransitGatewayAttachmentResourceType] = js.undefined
    /**
      * The state of the resource.
      */
    var State: js.UndefOr[TransitGatewayPropagationState] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: js.UndefOr[String] = js.undefined
  }
  
  trait TransitGatewayVpcAttachment extends js.Object {
    /**
      * The creation time.
      */
    var CreationTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The VPC attachment options.
      */
    var Options: js.UndefOr[TransitGatewayVpcAttachmentOptions] = js.undefined
    /**
      * The state of the VPC attachment.
      */
    var State: js.UndefOr[TransitGatewayAttachmentState] = js.undefined
    /**
      * The IDs of the subnets.
      */
    var SubnetIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The tags for the VPC attachment.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the attachment.
      */
    var TransitGatewayAttachmentId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the transit gateway.
      */
    var TransitGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the AWS account that owns the VPC.
      */
    var VpcOwnerId: js.UndefOr[String] = js.undefined
  }
  
  trait TransitGatewayVpcAttachmentOptions extends js.Object {
    /**
      * Indicates whether DNS support is enabled.
      */
    var DnsSupport: js.UndefOr[DnsSupportValue] = js.undefined
    /**
      * Indicates whether IPv6 support is enabled.
      */
    var Ipv6Support: js.UndefOr[Ipv6SupportValue] = js.undefined
  }
  
  @js.native
  trait Types
    extends awsDashSdkLib.libServiceMod.Service {
    @JSName("config")
    var config_Types: awsDashSdkLib.libConfigMod.ConfigBase with ClientConfiguration = js.native
    /**
      * Accepts the Convertible Reserved Instance exchange quote described in the GetReservedInstancesExchangeQuote call.
      */
    def acceptReservedInstancesExchangeQuote(): awsDashSdkLib.libRequestMod.Request[AcceptReservedInstancesExchangeQuoteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def acceptReservedInstancesExchangeQuote(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AcceptReservedInstancesExchangeQuoteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AcceptReservedInstancesExchangeQuoteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Accepts the Convertible Reserved Instance exchange quote described in the GetReservedInstancesExchangeQuote call.
      */
    def acceptReservedInstancesExchangeQuote(params: AcceptReservedInstancesExchangeQuoteRequest): awsDashSdkLib.libRequestMod.Request[AcceptReservedInstancesExchangeQuoteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def acceptReservedInstancesExchangeQuote(
      params: AcceptReservedInstancesExchangeQuoteRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AcceptReservedInstancesExchangeQuoteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AcceptReservedInstancesExchangeQuoteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Accepts a request to attach a VPC to a transit gateway. The VPC attachment must be in the pendingAcceptance state. Use DescribeTransitGatewayVpcAttachments to view your pending VPC attachment requests. Use RejectTransitGatewayVpcAttachment to reject a VPC attachment request.
      */
    def acceptTransitGatewayVpcAttachment(): awsDashSdkLib.libRequestMod.Request[AcceptTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def acceptTransitGatewayVpcAttachment(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AcceptTransitGatewayVpcAttachmentResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AcceptTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Accepts a request to attach a VPC to a transit gateway. The VPC attachment must be in the pendingAcceptance state. Use DescribeTransitGatewayVpcAttachments to view your pending VPC attachment requests. Use RejectTransitGatewayVpcAttachment to reject a VPC attachment request.
      */
    def acceptTransitGatewayVpcAttachment(params: AcceptTransitGatewayVpcAttachmentRequest): awsDashSdkLib.libRequestMod.Request[AcceptTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def acceptTransitGatewayVpcAttachment(
      params: AcceptTransitGatewayVpcAttachmentRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AcceptTransitGatewayVpcAttachmentResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AcceptTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Accepts one or more interface VPC endpoint connection requests to your VPC endpoint service.
      */
    def acceptVpcEndpointConnections(): awsDashSdkLib.libRequestMod.Request[AcceptVpcEndpointConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def acceptVpcEndpointConnections(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AcceptVpcEndpointConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AcceptVpcEndpointConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Accepts one or more interface VPC endpoint connection requests to your VPC endpoint service.
      */
    def acceptVpcEndpointConnections(params: AcceptVpcEndpointConnectionsRequest): awsDashSdkLib.libRequestMod.Request[AcceptVpcEndpointConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def acceptVpcEndpointConnections(
      params: AcceptVpcEndpointConnectionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AcceptVpcEndpointConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AcceptVpcEndpointConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the pending-acceptance state, and you must be the owner of the peer VPC. Use DescribeVpcPeeringConnections to view your outstanding VPC peering connection requests. For an inter-region VPC peering connection request, you must accept the VPC peering connection in the region of the accepter VPC.
      */
    def acceptVpcPeeringConnection(): awsDashSdkLib.libRequestMod.Request[AcceptVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def acceptVpcPeeringConnection(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AcceptVpcPeeringConnectionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AcceptVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the pending-acceptance state, and you must be the owner of the peer VPC. Use DescribeVpcPeeringConnections to view your outstanding VPC peering connection requests. For an inter-region VPC peering connection request, you must accept the VPC peering connection in the region of the accepter VPC.
      */
    def acceptVpcPeeringConnection(params: AcceptVpcPeeringConnectionRequest): awsDashSdkLib.libRequestMod.Request[AcceptVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def acceptVpcPeeringConnection(
      params: AcceptVpcPeeringConnectionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AcceptVpcPeeringConnectionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AcceptVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Advertises an IPv4 address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP). You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time. We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise it from AWS. To minimize down time, you can configure your AWS resources to use an address from a BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current location and start advertising it through AWS. It can take a few minutes before traffic to the specified addresses starts routing to AWS because of BGP propagation delays. To stop advertising the BYOIP CIDR, use WithdrawByoipCidr.
      */
    def advertiseByoipCidr(): awsDashSdkLib.libRequestMod.Request[AdvertiseByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def advertiseByoipCidr(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AdvertiseByoipCidrResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AdvertiseByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Advertises an IPv4 address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP). You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time. We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise it from AWS. To minimize down time, you can configure your AWS resources to use an address from a BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current location and start advertising it through AWS. It can take a few minutes before traffic to the specified addresses starts routing to AWS because of BGP propagation delays. To stop advertising the BYOIP CIDR, use WithdrawByoipCidr.
      */
    def advertiseByoipCidr(params: AdvertiseByoipCidrRequest): awsDashSdkLib.libRequestMod.Request[AdvertiseByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def advertiseByoipCidr(
      params: AdvertiseByoipCidrRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AdvertiseByoipCidrResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AdvertiseByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Allocates an Elastic IP address to your AWS account. After you allocate the Elastic IP address you can associate it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address pool and can be allocated to a different AWS account. You can allocate an Elastic IP address from an address pool owned by AWS or from an address pool created from a public IPv4 address range that you have brought to AWS for use with your AWS resources using bring your own IP addresses (BYOIP). For more information, see Bring Your Own IP Addresses (BYOIP) in the Amazon Elastic Compute Cloud User Guide. [EC2-VPC] If you release an Elastic IP address, you might be able to recover it. You cannot recover an Elastic IP address that you released after it is allocated to another AWS account. You cannot recover an Elastic IP address for EC2-Classic. To attempt to recover an Elastic IP address that you released, specify it in this operation. An Elastic IP address is for use either in the EC2-Classic platform or in a VPC. By default, you can allocate 5 Elastic IP addresses for EC2-Classic per region and 5 Elastic IP addresses for EC2-VPC per region. For more information, see Elastic IP Addresses in the Amazon Elastic Compute Cloud User Guide.
      */
    def allocateAddress(): awsDashSdkLib.libRequestMod.Request[AllocateAddressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def allocateAddress(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AllocateAddressResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AllocateAddressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Allocates an Elastic IP address to your AWS account. After you allocate the Elastic IP address you can associate it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address pool and can be allocated to a different AWS account. You can allocate an Elastic IP address from an address pool owned by AWS or from an address pool created from a public IPv4 address range that you have brought to AWS for use with your AWS resources using bring your own IP addresses (BYOIP). For more information, see Bring Your Own IP Addresses (BYOIP) in the Amazon Elastic Compute Cloud User Guide. [EC2-VPC] If you release an Elastic IP address, you might be able to recover it. You cannot recover an Elastic IP address that you released after it is allocated to another AWS account. You cannot recover an Elastic IP address for EC2-Classic. To attempt to recover an Elastic IP address that you released, specify it in this operation. An Elastic IP address is for use either in the EC2-Classic platform or in a VPC. By default, you can allocate 5 Elastic IP addresses for EC2-Classic per region and 5 Elastic IP addresses for EC2-VPC per region. For more information, see Elastic IP Addresses in the Amazon Elastic Compute Cloud User Guide.
      */
    def allocateAddress(params: AllocateAddressRequest): awsDashSdkLib.libRequestMod.Request[AllocateAddressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def allocateAddress(
      params: AllocateAddressRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AllocateAddressResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AllocateAddressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Allocates a Dedicated Host to your account. At a minimum, specify the instance size type, Availability Zone, and quantity of hosts to allocate.
      */
    def allocateHosts(): awsDashSdkLib.libRequestMod.Request[AllocateHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def allocateHosts(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AllocateHostsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AllocateHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Allocates a Dedicated Host to your account. At a minimum, specify the instance size type, Availability Zone, and quantity of hosts to allocate.
      */
    def allocateHosts(params: AllocateHostsRequest): awsDashSdkLib.libRequestMod.Request[AllocateHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def allocateHosts(
      params: AllocateHostsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AllocateHostsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AllocateHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing security groups with the specified security groups.
      */
    def applySecurityGroupsToClientVpnTargetNetwork(): awsDashSdkLib.libRequestMod.Request[
        ApplySecurityGroupsToClientVpnTargetNetworkResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def applySecurityGroupsToClientVpnTargetNetwork(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ApplySecurityGroupsToClientVpnTargetNetworkResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        ApplySecurityGroupsToClientVpnTargetNetworkResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing security groups with the specified security groups.
      */
    def applySecurityGroupsToClientVpnTargetNetwork(params: ApplySecurityGroupsToClientVpnTargetNetworkRequest): awsDashSdkLib.libRequestMod.Request[
        ApplySecurityGroupsToClientVpnTargetNetworkResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def applySecurityGroupsToClientVpnTargetNetwork(
      params: ApplySecurityGroupsToClientVpnTargetNetworkRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ApplySecurityGroupsToClientVpnTargetNetworkResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        ApplySecurityGroupsToClientVpnTargetNetworkResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Assigns one or more IPv6 addresses to the specified network interface. You can specify one or more specific IPv6 addresses, or you can specify the number of IPv6 addresses to be automatically assigned from within the subnet's IPv6 CIDR block range. You can assign as many IPv6 addresses to a network interface as you can assign private IPv4 addresses, and the limit varies per instance type. For information, see IP Addresses Per Network Interface Per Instance Type in the Amazon Elastic Compute Cloud User Guide.
      */
    def assignIpv6Addresses(): awsDashSdkLib.libRequestMod.Request[AssignIpv6AddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def assignIpv6Addresses(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssignIpv6AddressesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssignIpv6AddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Assigns one or more IPv6 addresses to the specified network interface. You can specify one or more specific IPv6 addresses, or you can specify the number of IPv6 addresses to be automatically assigned from within the subnet's IPv6 CIDR block range. You can assign as many IPv6 addresses to a network interface as you can assign private IPv4 addresses, and the limit varies per instance type. For information, see IP Addresses Per Network Interface Per Instance Type in the Amazon Elastic Compute Cloud User Guide.
      */
    def assignIpv6Addresses(params: AssignIpv6AddressesRequest): awsDashSdkLib.libRequestMod.Request[AssignIpv6AddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def assignIpv6Addresses(
      params: AssignIpv6AddressesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssignIpv6AddressesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssignIpv6AddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Assigns one or more secondary private IP addresses to the specified network interface. You can specify one or more specific secondary IP addresses, or you can specify the number of secondary IP addresses to be automatically assigned within the subnet's CIDR block range. The number of secondary IP addresses that you can assign to an instance varies by instance type. For information about instance types, see Instance Types in the Amazon Elastic Compute Cloud User Guide. For more information about Elastic IP addresses, see Elastic IP Addresses in the Amazon Elastic Compute Cloud User Guide. When you move a secondary private IP address to another network interface, any Elastic IP address that is associated with the IP address is also moved. Remapping an IP address is an asynchronous operation. When you move an IP address from one network interface to another, check network/interfaces/macs/mac/local-ipv4s in the instance metadata to confirm that the remapping is complete.
      */
    def assignPrivateIpAddresses(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def assignPrivateIpAddresses(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Assigns one or more secondary private IP addresses to the specified network interface. You can specify one or more specific secondary IP addresses, or you can specify the number of secondary IP addresses to be automatically assigned within the subnet's CIDR block range. The number of secondary IP addresses that you can assign to an instance varies by instance type. For information about instance types, see Instance Types in the Amazon Elastic Compute Cloud User Guide. For more information about Elastic IP addresses, see Elastic IP Addresses in the Amazon Elastic Compute Cloud User Guide. When you move a secondary private IP address to another network interface, any Elastic IP address that is associated with the IP address is also moved. Remapping an IP address is an asynchronous operation. When you move an IP address from one network interface to another, check network/interfaces/macs/mac/local-ipv4s in the instance metadata to confirm that the remapping is complete.
      */
    def assignPrivateIpAddresses(params: AssignPrivateIpAddressesRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def assignPrivateIpAddresses(
      params: AssignPrivateIpAddressesRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates an Elastic IP address with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account. An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see Elastic IP Addresses in the Amazon Elastic Compute Cloud User Guide. [EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance. If you associate an Elastic IP address with an instance that has an existing Elastic IP address, the existing address is disassociated from the instance, but remains allocated to your account. [VPC in an EC2-Classic account] If you don't specify a private IP address, the Elastic IP address is associated with the primary IP address. If the Elastic IP address is already associated with a different instance or a network interface, you get an error unless you allow reassociation. You cannot associate an Elastic IP address with an instance or network interface that has an existing Elastic IP address.  This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the Elastic IP Addresses section of Amazon EC2 Pricing. 
      */
    def associateAddress(): awsDashSdkLib.libRequestMod.Request[AssociateAddressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateAddress(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateAddressResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateAddressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates an Elastic IP address with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account. An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see Elastic IP Addresses in the Amazon Elastic Compute Cloud User Guide. [EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance. If you associate an Elastic IP address with an instance that has an existing Elastic IP address, the existing address is disassociated from the instance, but remains allocated to your account. [VPC in an EC2-Classic account] If you don't specify a private IP address, the Elastic IP address is associated with the primary IP address. If the Elastic IP address is already associated with a different instance or a network interface, you get an error unless you allow reassociation. You cannot associate an Elastic IP address with an instance or network interface that has an existing Elastic IP address.  This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the Elastic IP Addresses section of Amazon EC2 Pricing. 
      */
    def associateAddress(params: AssociateAddressRequest): awsDashSdkLib.libRequestMod.Request[AssociateAddressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateAddress(
      params: AssociateAddressRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateAddressResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateAddressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.
      */
    def associateClientVpnTargetNetwork(): awsDashSdkLib.libRequestMod.Request[AssociateClientVpnTargetNetworkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateClientVpnTargetNetwork(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateClientVpnTargetNetworkResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateClientVpnTargetNetworkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.
      */
    def associateClientVpnTargetNetwork(params: AssociateClientVpnTargetNetworkRequest): awsDashSdkLib.libRequestMod.Request[AssociateClientVpnTargetNetworkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateClientVpnTargetNetwork(
      params: AssociateClientVpnTargetNetworkRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateClientVpnTargetNetworkResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateClientVpnTargetNetworkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates a set of DHCP options (that you've previously created) with the specified VPC, or associates no DHCP options with the VPC. After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don't need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance. For more information, see DHCP Options Sets in the Amazon Virtual Private Cloud User Guide.
      */
    def associateDhcpOptions(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateDhcpOptions(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates a set of DHCP options (that you've previously created) with the specified VPC, or associates no DHCP options with the VPC. After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don't need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance. For more information, see DHCP Options Sets in the Amazon Virtual Private Cloud User Guide.
      */
    def associateDhcpOptions(params: AssociateDhcpOptionsRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateDhcpOptions(
      params: AssociateDhcpOptionsRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates an IAM instance profile with a running or stopped instance. You cannot associate more than one IAM instance profile with an instance.
      */
    def associateIamInstanceProfile(): awsDashSdkLib.libRequestMod.Request[AssociateIamInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateIamInstanceProfile(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateIamInstanceProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateIamInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates an IAM instance profile with a running or stopped instance. You cannot associate more than one IAM instance profile with an instance.
      */
    def associateIamInstanceProfile(params: AssociateIamInstanceProfileRequest): awsDashSdkLib.libRequestMod.Request[AssociateIamInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateIamInstanceProfile(
      params: AssociateIamInstanceProfileRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateIamInstanceProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateIamInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates a subnet with a route table. The subnet and route table must be in the same VPC. This association causes traffic originating from the subnet to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table from the subnet later. A route table can be associated with multiple subnets. For more information, see Route Tables in the Amazon Virtual Private Cloud User Guide.
      */
    def associateRouteTable(): awsDashSdkLib.libRequestMod.Request[AssociateRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateRouteTable(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateRouteTableResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates a subnet with a route table. The subnet and route table must be in the same VPC. This association causes traffic originating from the subnet to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table from the subnet later. A route table can be associated with multiple subnets. For more information, see Route Tables in the Amazon Virtual Private Cloud User Guide.
      */
    def associateRouteTable(params: AssociateRouteTableRequest): awsDashSdkLib.libRequestMod.Request[AssociateRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateRouteTable(
      params: AssociateRouteTableRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateRouteTableResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR block with your subnet. An IPv6 CIDR block must have a prefix length of /64.
      */
    def associateSubnetCidrBlock(): awsDashSdkLib.libRequestMod.Request[AssociateSubnetCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateSubnetCidrBlock(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateSubnetCidrBlockResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateSubnetCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR block with your subnet. An IPv6 CIDR block must have a prefix length of /64.
      */
    def associateSubnetCidrBlock(params: AssociateSubnetCidrBlockRequest): awsDashSdkLib.libRequestMod.Request[AssociateSubnetCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateSubnetCidrBlock(
      params: AssociateSubnetCidrBlockRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateSubnetCidrBlockResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateSubnetCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates the specified attachment with the specified transit gateway route table. You can associate only one route table with an attachment.
      */
    def associateTransitGatewayRouteTable(): awsDashSdkLib.libRequestMod.Request[AssociateTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateTransitGatewayRouteTable(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateTransitGatewayRouteTableResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates the specified attachment with the specified transit gateway route table. You can associate only one route table with an attachment.
      */
    def associateTransitGatewayRouteTable(params: AssociateTransitGatewayRouteTableRequest): awsDashSdkLib.libRequestMod.Request[AssociateTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateTransitGatewayRouteTable(
      params: AssociateTransitGatewayRouteTableRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateTransitGatewayRouteTableResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block, or you can associate an Amazon-provided IPv6 CIDR block. The IPv6 CIDR block size is fixed at /56. For more information about associating CIDR blocks with your VPC and applicable restrictions, see VPC and Subnet Sizing in the Amazon Virtual Private Cloud User Guide.
      */
    def associateVpcCidrBlock(): awsDashSdkLib.libRequestMod.Request[AssociateVpcCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateVpcCidrBlock(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateVpcCidrBlockResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateVpcCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block, or you can associate an Amazon-provided IPv6 CIDR block. The IPv6 CIDR block size is fixed at /56. For more information about associating CIDR blocks with your VPC and applicable restrictions, see VPC and Subnet Sizing in the Amazon Virtual Private Cloud User Guide.
      */
    def associateVpcCidrBlock(params: AssociateVpcCidrBlockRequest): awsDashSdkLib.libRequestMod.Request[AssociateVpcCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def associateVpcCidrBlock(
      params: AssociateVpcCidrBlockRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AssociateVpcCidrBlockResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AssociateVpcCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC's security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You can only link an instance that's in the running state. An instance is automatically unlinked from a VPC when it's stopped - you can link it to the VPC again when you restart it. After you've linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again. Linking your instance to a VPC is sometimes referred to as attaching your instance.
      */
    def attachClassicLinkVpc(): awsDashSdkLib.libRequestMod.Request[AttachClassicLinkVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def attachClassicLinkVpc(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AttachClassicLinkVpcResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AttachClassicLinkVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC's security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You can only link an instance that's in the running state. An instance is automatically unlinked from a VPC when it's stopped - you can link it to the VPC again when you restart it. After you've linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again. Linking your instance to a VPC is sometimes referred to as attaching your instance.
      */
    def attachClassicLinkVpc(params: AttachClassicLinkVpcRequest): awsDashSdkLib.libRequestMod.Request[AttachClassicLinkVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def attachClassicLinkVpc(
      params: AttachClassicLinkVpcRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AttachClassicLinkVpcResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AttachClassicLinkVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Attaches an internet gateway to a VPC, enabling connectivity between the internet and the VPC. For more information about your VPC and internet gateway, see the Amazon Virtual Private Cloud User Guide.
      */
    def attachInternetGateway(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def attachInternetGateway(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Attaches an internet gateway to a VPC, enabling connectivity between the internet and the VPC. For more information about your VPC and internet gateway, see the Amazon Virtual Private Cloud User Guide.
      */
    def attachInternetGateway(params: AttachInternetGatewayRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def attachInternetGateway(
      params: AttachInternetGatewayRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Attaches a network interface to an instance.
      */
    def attachNetworkInterface(): awsDashSdkLib.libRequestMod.Request[AttachNetworkInterfaceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def attachNetworkInterface(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AttachNetworkInterfaceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AttachNetworkInterfaceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Attaches a network interface to an instance.
      */
    def attachNetworkInterface(params: AttachNetworkInterfaceRequest): awsDashSdkLib.libRequestMod.Request[AttachNetworkInterfaceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def attachNetworkInterface(
      params: AttachNetworkInterfaceRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AttachNetworkInterfaceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AttachNetworkInterfaceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Attaches an EBS volume to a running or stopped instance and exposes it to the instance with the specified device name. Encrypted EBS volumes may only be attached to instances that support Amazon EBS encryption. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide. For a list of supported device names, see Attaching an EBS Volume to an Instance. Any device names that aren't reserved for instance store volumes can be used for EBS volumes. For more information, see Amazon EC2 Instance Store in the Amazon Elastic Compute Cloud User Guide. If a volume has an AWS Marketplace product code:   The volume can be attached only to a stopped instance.   AWS Marketplace product codes are copied from the volume to the instance.   You must be subscribed to the product.   The instance type and operating system of the instance must support the product. For example, you can't detach a volume from a Windows instance and attach it to a Linux instance.   For more information about EBS volumes, see Attaching Amazon EBS Volumes in the Amazon Elastic Compute Cloud User Guide.
      */
    def attachVolume(): awsDashSdkLib.libRequestMod.Request[VolumeAttachment, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def attachVolume(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ VolumeAttachment, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[VolumeAttachment, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Attaches an EBS volume to a running or stopped instance and exposes it to the instance with the specified device name. Encrypted EBS volumes may only be attached to instances that support Amazon EBS encryption. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide. For a list of supported device names, see Attaching an EBS Volume to an Instance. Any device names that aren't reserved for instance store volumes can be used for EBS volumes. For more information, see Amazon EC2 Instance Store in the Amazon Elastic Compute Cloud User Guide. If a volume has an AWS Marketplace product code:   The volume can be attached only to a stopped instance.   AWS Marketplace product codes are copied from the volume to the instance.   You must be subscribed to the product.   The instance type and operating system of the instance must support the product. For example, you can't detach a volume from a Windows instance and attach it to a Linux instance.   For more information about EBS volumes, see Attaching Amazon EBS Volumes in the Amazon Elastic Compute Cloud User Guide.
      */
    def attachVolume(params: AttachVolumeRequest): awsDashSdkLib.libRequestMod.Request[VolumeAttachment, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def attachVolume(
      params: AttachVolumeRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ VolumeAttachment, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[VolumeAttachment, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Attaches a virtual private gateway to a VPC. You can attach one virtual private gateway to one VPC at a time. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def attachVpnGateway(): awsDashSdkLib.libRequestMod.Request[AttachVpnGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def attachVpnGateway(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AttachVpnGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AttachVpnGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Attaches a virtual private gateway to a VPC. You can attach one virtual private gateway to one VPC at a time. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def attachVpnGateway(params: AttachVpnGatewayRequest): awsDashSdkLib.libRequestMod.Request[AttachVpnGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def attachVpnGateway(
      params: AttachVpnGatewayRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AttachVpnGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AttachVpnGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as firewall rules that grant access to networks. You must configure ingress authorization rules to enable clients to access resources in AWS or on-premises networks.
      */
    def authorizeClientVpnIngress(): awsDashSdkLib.libRequestMod.Request[AuthorizeClientVpnIngressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def authorizeClientVpnIngress(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AuthorizeClientVpnIngressResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AuthorizeClientVpnIngressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as firewall rules that grant access to networks. You must configure ingress authorization rules to enable clients to access resources in AWS or on-premises networks.
      */
    def authorizeClientVpnIngress(params: AuthorizeClientVpnIngressRequest): awsDashSdkLib.libRequestMod.Request[AuthorizeClientVpnIngressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def authorizeClientVpnIngress(
      params: AuthorizeClientVpnIngressRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ AuthorizeClientVpnIngressResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[AuthorizeClientVpnIngressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * [EC2-VPC only] Adds one or more egress rules to a security group for use with a VPC. Specifically, this action permits instances to send traffic to one or more destination IPv4 or IPv6 CIDR address ranges, or to one or more destination security groups for the same VPC. This action doesn't apply to security groups for use in EC2-Classic. For more information, see Security Groups for Your VPC in the Amazon Virtual Private Cloud User Guide. For more information about security group limits, see Amazon VPC Limits. Each rule consists of the protocol (for example, TCP), plus either a CIDR range or a source group. For the TCP and UDP protocols, you must also specify the destination port or port range. For the ICMP protocol, you must also specify the ICMP type and code. You can use -1 for the type or code to mean all types or all codes. You can optionally specify a description for the rule. Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.
      */
    def authorizeSecurityGroupEgress(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def authorizeSecurityGroupEgress(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * [EC2-VPC only] Adds one or more egress rules to a security group for use with a VPC. Specifically, this action permits instances to send traffic to one or more destination IPv4 or IPv6 CIDR address ranges, or to one or more destination security groups for the same VPC. This action doesn't apply to security groups for use in EC2-Classic. For more information, see Security Groups for Your VPC in the Amazon Virtual Private Cloud User Guide. For more information about security group limits, see Amazon VPC Limits. Each rule consists of the protocol (for example, TCP), plus either a CIDR range or a source group. For the TCP and UDP protocols, you must also specify the destination port or port range. For the ICMP protocol, you must also specify the ICMP type and code. You can use -1 for the type or code to mean all types or all codes. You can optionally specify a description for the rule. Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.
      */
    def authorizeSecurityGroupEgress(params: AuthorizeSecurityGroupEgressRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def authorizeSecurityGroupEgress(
      params: AuthorizeSecurityGroupEgressRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Adds one or more ingress rules to a security group. Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur. [EC2-Classic] This action gives one or more IPv4 CIDR address ranges permission to access a security group in your account, or gives one or more security groups (called the source groups) permission to access a security group for your account. A source group can be for your own AWS account, or another. You can have up to 100 rules per group. [EC2-VPC] This action gives one or more IPv4 or IPv6 CIDR address ranges permission to access a security group in your VPC, or gives one or more other security groups (called the source groups) permission to access a security group for your VPC. The security groups must all be for the same VPC or a peer VPC in a VPC peering connection. For more information about VPC security group limits, see Amazon VPC Limits. You can optionally specify a description for the security group rule.
      */
    def authorizeSecurityGroupIngress(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def authorizeSecurityGroupIngress(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Adds one or more ingress rules to a security group. Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur. [EC2-Classic] This action gives one or more IPv4 CIDR address ranges permission to access a security group in your account, or gives one or more security groups (called the source groups) permission to access a security group for your account. A source group can be for your own AWS account, or another. You can have up to 100 rules per group. [EC2-VPC] This action gives one or more IPv4 or IPv6 CIDR address ranges permission to access a security group in your VPC, or gives one or more other security groups (called the source groups) permission to access a security group for your VPC. The security groups must all be for the same VPC or a peer VPC in a VPC peering connection. For more information about VPC security group limits, see Amazon VPC Limits. You can optionally specify a description for the security group rule.
      */
    def authorizeSecurityGroupIngress(params: AuthorizeSecurityGroupIngressRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def authorizeSecurityGroupIngress(
      params: AuthorizeSecurityGroupIngressRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Bundles an Amazon instance store-backed Windows instance. During bundling, only the root device volume (C:\) is bundled. Data on other instance store volumes is not preserved.  This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS. 
      */
    def bundleInstance(): awsDashSdkLib.libRequestMod.Request[BundleInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def bundleInstance(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ BundleInstanceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[BundleInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Bundles an Amazon instance store-backed Windows instance. During bundling, only the root device volume (C:\) is bundled. Data on other instance store volumes is not preserved.  This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS. 
      */
    def bundleInstance(params: BundleInstanceRequest): awsDashSdkLib.libRequestMod.Request[BundleInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def bundleInstance(
      params: BundleInstanceRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ BundleInstanceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[BundleInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels a bundling operation for an instance store-backed Windows instance.
      */
    def cancelBundleTask(): awsDashSdkLib.libRequestMod.Request[CancelBundleTaskResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelBundleTask(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CancelBundleTaskResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CancelBundleTaskResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels a bundling operation for an instance store-backed Windows instance.
      */
    def cancelBundleTask(params: CancelBundleTaskRequest): awsDashSdkLib.libRequestMod.Request[CancelBundleTaskResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelBundleTask(
      params: CancelBundleTaskRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CancelBundleTaskResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CancelBundleTaskResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation's state to cancelled. Instances running in the reserved capacity continue running until you stop them. Stopped instances that target the Capacity Reservation can no longer launch. Modify these instances to either target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation that has matching attributes and sufficient capacity.
      */
    def cancelCapacityReservation(): awsDashSdkLib.libRequestMod.Request[CancelCapacityReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelCapacityReservation(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CancelCapacityReservationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CancelCapacityReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation's state to cancelled. Instances running in the reserved capacity continue running until you stop them. Stopped instances that target the Capacity Reservation can no longer launch. Modify these instances to either target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation that has matching attributes and sufficient capacity.
      */
    def cancelCapacityReservation(params: CancelCapacityReservationRequest): awsDashSdkLib.libRequestMod.Request[CancelCapacityReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelCapacityReservation(
      params: CancelCapacityReservationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CancelCapacityReservationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CancelCapacityReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception. For more information, see Importing a Virtual Machine Using the Amazon EC2 CLI.
      */
    def cancelConversionTask(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelConversionTask(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception. For more information, see Importing a Virtual Machine Using the Amazon EC2 CLI.
      */
    def cancelConversionTask(params: CancelConversionRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelConversionTask(
      params: CancelConversionRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.
      */
    def cancelExportTask(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelExportTask(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.
      */
    def cancelExportTask(params: CancelExportTaskRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelExportTask(
      params: CancelExportTaskRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels an in-process import virtual machine or import snapshot task.
      */
    def cancelImportTask(): awsDashSdkLib.libRequestMod.Request[CancelImportTaskResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelImportTask(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CancelImportTaskResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CancelImportTaskResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels an in-process import virtual machine or import snapshot task.
      */
    def cancelImportTask(params: CancelImportTaskRequest): awsDashSdkLib.libRequestMod.Request[CancelImportTaskResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelImportTask(
      params: CancelImportTaskRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CancelImportTaskResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CancelImportTaskResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace. For more information, see Reserved Instance Marketplace in the Amazon Elastic Compute Cloud User Guide.
      */
    def cancelReservedInstancesListing(): awsDashSdkLib.libRequestMod.Request[CancelReservedInstancesListingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelReservedInstancesListing(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CancelReservedInstancesListingResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CancelReservedInstancesListingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace. For more information, see Reserved Instance Marketplace in the Amazon Elastic Compute Cloud User Guide.
      */
    def cancelReservedInstancesListing(params: CancelReservedInstancesListingRequest): awsDashSdkLib.libRequestMod.Request[CancelReservedInstancesListingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelReservedInstancesListing(
      params: CancelReservedInstancesListingRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CancelReservedInstancesListingResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CancelReservedInstancesListingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels the specified Spot Fleet requests. After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances. You must specify whether the Spot Fleet should also terminate its Spot Instances. If you terminate the instances, the Spot Fleet request enters the cancelled_terminating state. Otherwise, the Spot Fleet request enters the cancelled_running state and the instances continue to run until they are interrupted or you terminate them manually.
      */
    def cancelSpotFleetRequests(): awsDashSdkLib.libRequestMod.Request[CancelSpotFleetRequestsResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelSpotFleetRequests(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CancelSpotFleetRequestsResponse, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CancelSpotFleetRequestsResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels the specified Spot Fleet requests. After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances. You must specify whether the Spot Fleet should also terminate its Spot Instances. If you terminate the instances, the Spot Fleet request enters the cancelled_terminating state. Otherwise, the Spot Fleet request enters the cancelled_running state and the instances continue to run until they are interrupted or you terminate them manually.
      */
    def cancelSpotFleetRequests(params: CancelSpotFleetRequestsRequest): awsDashSdkLib.libRequestMod.Request[CancelSpotFleetRequestsResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelSpotFleetRequests(
      params: CancelSpotFleetRequestsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CancelSpotFleetRequestsResponse, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CancelSpotFleetRequestsResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels one or more Spot Instance requests.  Canceling a Spot Instance request does not terminate running Spot Instances associated with the request. 
      */
    def cancelSpotInstanceRequests(): awsDashSdkLib.libRequestMod.Request[CancelSpotInstanceRequestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelSpotInstanceRequests(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CancelSpotInstanceRequestsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CancelSpotInstanceRequestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Cancels one or more Spot Instance requests.  Canceling a Spot Instance request does not terminate running Spot Instances associated with the request. 
      */
    def cancelSpotInstanceRequests(params: CancelSpotInstanceRequestsRequest): awsDashSdkLib.libRequestMod.Request[CancelSpotInstanceRequestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def cancelSpotInstanceRequests(
      params: CancelSpotInstanceRequestsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CancelSpotInstanceRequestsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CancelSpotInstanceRequestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner must verify whether another user's instance is eligible for support.
      */
    def confirmProductInstance(): awsDashSdkLib.libRequestMod.Request[ConfirmProductInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def confirmProductInstance(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ConfirmProductInstanceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ConfirmProductInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner must verify whether another user's instance is eligible for support.
      */
    def confirmProductInstance(params: ConfirmProductInstanceRequest): awsDashSdkLib.libRequestMod.Request[ConfirmProductInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def confirmProductInstance(
      params: ConfirmProductInstanceRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ConfirmProductInstanceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ConfirmProductInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Copies the specified Amazon FPGA Image (AFI) to the current region.
      */
    def copyFpgaImage(): awsDashSdkLib.libRequestMod.Request[CopyFpgaImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def copyFpgaImage(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CopyFpgaImageResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CopyFpgaImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Copies the specified Amazon FPGA Image (AFI) to the current region.
      */
    def copyFpgaImage(params: CopyFpgaImageRequest): awsDashSdkLib.libRequestMod.Request[CopyFpgaImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def copyFpgaImage(
      params: CopyFpgaImageRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CopyFpgaImageResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CopyFpgaImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Initiates the copy of an AMI from the specified source region to the current region. You specify the destination region by using its endpoint when making the request. Copies of encrypted backing snapshots for the AMI are encrypted. Copies of unencrypted backing snapshots remain unencrypted, unless you set Encrypted during the copy operation. You cannot create an unencrypted copy of an encrypted backing snapshot. For more information about the prerequisites and limits when copying an AMI, see Copying an AMI in the Amazon Elastic Compute Cloud User Guide.
      */
    def copyImage(): awsDashSdkLib.libRequestMod.Request[CopyImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def copyImage(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ CopyImageResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[CopyImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Initiates the copy of an AMI from the specified source region to the current region. You specify the destination region by using its endpoint when making the request. Copies of encrypted backing snapshots for the AMI are encrypted. Copies of unencrypted backing snapshots remain unencrypted, unless you set Encrypted during the copy operation. You cannot create an unencrypted copy of an encrypted backing snapshot. For more information about the prerequisites and limits when copying an AMI, see Copying an AMI in the Amazon Elastic Compute Cloud User Guide.
      */
    def copyImage(params: CopyImageRequest): awsDashSdkLib.libRequestMod.Request[CopyImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def copyImage(
      params: CopyImageRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ CopyImageResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[CopyImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy the snapshot within the same region or from one region to another. You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs). The snapshot is copied to the regional endpoint that you send the HTTP request to. Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted snapshots remain unencrypted, unless the Encrypted flag is specified during the snapshot copy operation. By default, encrypted snapshot copies use the default AWS Key Management Service (AWS KMS) customer master key (CMK); however, you can specify a non-default CMK with the KmsKeyId parameter. To copy an encrypted snapshot that has been shared from another account, you must have permissions for the CMK used to encrypt the snapshot. Snapshots created by copying another snapshot have an arbitrary volume ID that should not be used for any purpose. For more information, see Copying an Amazon EBS Snapshot in the Amazon Elastic Compute Cloud User Guide.
      */
    def copySnapshot(): awsDashSdkLib.libRequestMod.Request[CopySnapshotResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def copySnapshot(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CopySnapshotResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CopySnapshotResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy the snapshot within the same region or from one region to another. You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs). The snapshot is copied to the regional endpoint that you send the HTTP request to. Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted snapshots remain unencrypted, unless the Encrypted flag is specified during the snapshot copy operation. By default, encrypted snapshot copies use the default AWS Key Management Service (AWS KMS) customer master key (CMK); however, you can specify a non-default CMK with the KmsKeyId parameter. To copy an encrypted snapshot that has been shared from another account, you must have permissions for the CMK used to encrypt the snapshot. Snapshots created by copying another snapshot have an arbitrary volume ID that should not be used for any purpose. For more information, see Copying an Amazon EBS Snapshot in the Amazon Elastic Compute Cloud User Guide.
      */
    def copySnapshot(params: CopySnapshotRequest): awsDashSdkLib.libRequestMod.Request[CopySnapshotResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def copySnapshot(
      params: CopySnapshotRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CopySnapshotResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CopySnapshotResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a new Capacity Reservation with the specified attributes. Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage. By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it. For more information, see Capacity Reservations in the Amazon Elastic Compute Cloud User Guide. Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try again at a later time, try in a different Availability Zone, or request a smaller capacity reservation. If your application is flexible across instance types and sizes, try to create a Capacity Reservation with different instance attributes. Your request could also fail if the requested quantity exceeds your On-Demand Instance limit for the selected instance type. If your request fails due to limit constraints, increase your On-Demand Instance limit for the required instance type and try again. For more information about increasing your instance limits, see Amazon EC2 Service Limits in the Amazon Elastic Compute Cloud User Guide.
      */
    def createCapacityReservation(): awsDashSdkLib.libRequestMod.Request[CreateCapacityReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createCapacityReservation(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateCapacityReservationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateCapacityReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a new Capacity Reservation with the specified attributes. Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage. By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it. For more information, see Capacity Reservations in the Amazon Elastic Compute Cloud User Guide. Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try again at a later time, try in a different Availability Zone, or request a smaller capacity reservation. If your application is flexible across instance types and sizes, try to create a Capacity Reservation with different instance attributes. Your request could also fail if the requested quantity exceeds your On-Demand Instance limit for the selected instance type. If your request fails due to limit constraints, increase your On-Demand Instance limit for the required instance type and try again. For more information about increasing your instance limits, see Amazon EC2 Service Limits in the Amazon Elastic Compute Cloud User Guide.
      */
    def createCapacityReservation(params: CreateCapacityReservationRequest): awsDashSdkLib.libRequestMod.Request[CreateCapacityReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createCapacityReservation(
      params: CreateCapacityReservationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateCapacityReservationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateCapacityReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions are terminated.
      */
    def createClientVpnEndpoint(): awsDashSdkLib.libRequestMod.Request[CreateClientVpnEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createClientVpnEndpoint(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateClientVpnEndpointResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateClientVpnEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions are terminated.
      */
    def createClientVpnEndpoint(params: CreateClientVpnEndpointRequest): awsDashSdkLib.libRequestMod.Request[CreateClientVpnEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createClientVpnEndpoint(
      params: CreateClientVpnEndpointRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateClientVpnEndpointResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateClientVpnEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.
      */
    def createClientVpnRoute(): awsDashSdkLib.libRequestMod.Request[CreateClientVpnRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createClientVpnRoute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateClientVpnRouteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateClientVpnRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.
      */
    def createClientVpnRoute(params: CreateClientVpnRouteRequest): awsDashSdkLib.libRequestMod.Request[CreateClientVpnRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createClientVpnRoute(
      params: CreateClientVpnRouteRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateClientVpnRouteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateClientVpnRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Provides information to AWS about your VPN customer gateway device. The customer gateway is the appliance at your end of the VPN connection. (The device on the AWS side of the VPN connection is the virtual private gateway.) You must provide the Internet-routable IP address of the customer gateway's external interface. The IP address must be static and may be behind a device performing network address translation (NAT). For devices that use Border Gateway Protocol (BGP), you can also provide the device's BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don't have an ASN already, you can use a private ASN (in the 64512 - 65534 range).  Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with the exception of 7224, which is reserved in the us-east-1 region, and 9059, which is reserved in the eu-west-1 region.  For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.  You cannot create more than one customer gateway with the same VPN type, IP address, and BGP ASN parameter values. If you run an identical request more than one time, the first request creates the customer gateway, and subsequent requests return information about the existing customer gateway. The subsequent requests do not create new customer gateway resources. 
      */
    def createCustomerGateway(): awsDashSdkLib.libRequestMod.Request[CreateCustomerGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createCustomerGateway(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateCustomerGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateCustomerGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Provides information to AWS about your VPN customer gateway device. The customer gateway is the appliance at your end of the VPN connection. (The device on the AWS side of the VPN connection is the virtual private gateway.) You must provide the Internet-routable IP address of the customer gateway's external interface. The IP address must be static and may be behind a device performing network address translation (NAT). For devices that use Border Gateway Protocol (BGP), you can also provide the device's BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don't have an ASN already, you can use a private ASN (in the 64512 - 65534 range).  Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with the exception of 7224, which is reserved in the us-east-1 region, and 9059, which is reserved in the eu-west-1 region.  For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.  You cannot create more than one customer gateway with the same VPN type, IP address, and BGP ASN parameter values. If you run an identical request more than one time, the first request creates the customer gateway, and subsequent requests return information about the existing customer gateway. The subsequent requests do not create new customer gateway resources. 
      */
    def createCustomerGateway(params: CreateCustomerGatewayRequest): awsDashSdkLib.libRequestMod.Request[CreateCustomerGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createCustomerGateway(
      params: CreateCustomerGatewayRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateCustomerGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateCustomerGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a default subnet with a size /20 IPv4 CIDR block in the specified Availability Zone in your default VPC. You can have only one default subnet per Availability Zone. For more information, see Creating a Default Subnet in the Amazon Virtual Private Cloud User Guide.
      */
    def createDefaultSubnet(): awsDashSdkLib.libRequestMod.Request[CreateDefaultSubnetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createDefaultSubnet(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateDefaultSubnetResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateDefaultSubnetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a default subnet with a size /20 IPv4 CIDR block in the specified Availability Zone in your default VPC. You can have only one default subnet per Availability Zone. For more information, see Creating a Default Subnet in the Amazon Virtual Private Cloud User Guide.
      */
    def createDefaultSubnet(params: CreateDefaultSubnetRequest): awsDashSdkLib.libRequestMod.Request[CreateDefaultSubnetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createDefaultSubnet(
      params: CreateDefaultSubnetRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateDefaultSubnetResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateDefaultSubnetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a default VPC with a size /16 IPv4 CIDR block and a default subnet in each Availability Zone. For more information about the components of a default VPC, see Default VPC and Default Subnets in the Amazon Virtual Private Cloud User Guide. You cannot specify the components of the default VPC yourself. If you deleted your previous default VPC, you can create a default VPC. You cannot have more than one default VPC per Region. If your account supports EC2-Classic, you cannot use this action to create a default VPC in a Region that supports EC2-Classic. If you want a default VPC in a Region that supports EC2-Classic, see "I really want a default VPC for my existing EC2 account. Is that possible?" in the Default VPCs FAQ.
      */
    def createDefaultVpc(): awsDashSdkLib.libRequestMod.Request[CreateDefaultVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createDefaultVpc(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateDefaultVpcResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateDefaultVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a default VPC with a size /16 IPv4 CIDR block and a default subnet in each Availability Zone. For more information about the components of a default VPC, see Default VPC and Default Subnets in the Amazon Virtual Private Cloud User Guide. You cannot specify the components of the default VPC yourself. If you deleted your previous default VPC, you can create a default VPC. You cannot have more than one default VPC per Region. If your account supports EC2-Classic, you cannot use this action to create a default VPC in a Region that supports EC2-Classic. If you want a default VPC in a Region that supports EC2-Classic, see "I really want a default VPC for my existing EC2 account. Is that possible?" in the Default VPCs FAQ.
      */
    def createDefaultVpc(params: CreateDefaultVpcRequest): awsDashSdkLib.libRequestMod.Request[CreateDefaultVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createDefaultVpc(
      params: CreateDefaultVpcRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateDefaultVpcResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateDefaultVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a set of DHCP options for your VPC. After creating the set, you must associate it with the VPC, causing all existing and new instances that you launch in the VPC to use this set of DHCP options. The following are the individual DHCP options you can specify. For more information about the options, see RFC 2132.    domain-name-servers - The IP addresses of up to four domain name servers, or AmazonProvidedDNS. The default DHCP option set specifies AmazonProvidedDNS. If specifying more than one domain name server, specify the IP addresses in a single parameter, separated by commas. ITo have your instance to receive a custom DNS hostname as specified in domain-name, you must set domain-name-servers to a custom DNS server.    domain-name - If you're using AmazonProvidedDNS in us-east-1, specify ec2.internal. If you're using AmazonProvidedDNS in another region, specify region.compute.internal (for example, ap-northeast-1.compute.internal). Otherwise, specify a domain name (for example, MyCompany.com). This value is used to complete unqualified DNS hostnames. Important: Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP options set is associated with a VPC that has instances with multiple operating systems, specify only one domain name.    ntp-servers - The IP addresses of up to four Network Time Protocol (NTP) servers.    netbios-name-servers - The IP addresses of up to four NetBIOS name servers.    netbios-node-type - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2 (broadcast and multicast are not currently supported). For more information about these node types, see RFC 2132.   Your VPC automatically starts out with a set of DHCP options that includes only a DNS server that we provide (AmazonProvidedDNS). If you create a set of options, and if your VPC has an internet gateway, make sure to set the domain-name-servers option either to AmazonProvidedDNS or to a domain name server of your choice. For more information, see DHCP Options Sets in the Amazon Virtual Private Cloud User Guide.
      */
    def createDhcpOptions(): awsDashSdkLib.libRequestMod.Request[CreateDhcpOptionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createDhcpOptions(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateDhcpOptionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateDhcpOptionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a set of DHCP options for your VPC. After creating the set, you must associate it with the VPC, causing all existing and new instances that you launch in the VPC to use this set of DHCP options. The following are the individual DHCP options you can specify. For more information about the options, see RFC 2132.    domain-name-servers - The IP addresses of up to four domain name servers, or AmazonProvidedDNS. The default DHCP option set specifies AmazonProvidedDNS. If specifying more than one domain name server, specify the IP addresses in a single parameter, separated by commas. ITo have your instance to receive a custom DNS hostname as specified in domain-name, you must set domain-name-servers to a custom DNS server.    domain-name - If you're using AmazonProvidedDNS in us-east-1, specify ec2.internal. If you're using AmazonProvidedDNS in another region, specify region.compute.internal (for example, ap-northeast-1.compute.internal). Otherwise, specify a domain name (for example, MyCompany.com). This value is used to complete unqualified DNS hostnames. Important: Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP options set is associated with a VPC that has instances with multiple operating systems, specify only one domain name.    ntp-servers - The IP addresses of up to four Network Time Protocol (NTP) servers.    netbios-name-servers - The IP addresses of up to four NetBIOS name servers.    netbios-node-type - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2 (broadcast and multicast are not currently supported). For more information about these node types, see RFC 2132.   Your VPC automatically starts out with a set of DHCP options that includes only a DNS server that we provide (AmazonProvidedDNS). If you create a set of options, and if your VPC has an internet gateway, make sure to set the domain-name-servers option either to AmazonProvidedDNS or to a domain name server of your choice. For more information, see DHCP Options Sets in the Amazon Virtual Private Cloud User Guide.
      */
    def createDhcpOptions(params: CreateDhcpOptionsRequest): awsDashSdkLib.libRequestMod.Request[CreateDhcpOptionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createDhcpOptions(
      params: CreateDhcpOptionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateDhcpOptionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateDhcpOptionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * [IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only internet gateway is used to enable outbound communication over IPv6 from instances in your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6 connection with your instance.
      */
    def createEgressOnlyInternetGateway(): awsDashSdkLib.libRequestMod.Request[CreateEgressOnlyInternetGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createEgressOnlyInternetGateway(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateEgressOnlyInternetGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateEgressOnlyInternetGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * [IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only internet gateway is used to enable outbound communication over IPv6 from instances in your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6 connection with your instance.
      */
    def createEgressOnlyInternetGateway(params: CreateEgressOnlyInternetGatewayRequest): awsDashSdkLib.libRequestMod.Request[CreateEgressOnlyInternetGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createEgressOnlyInternetGateway(
      params: CreateEgressOnlyInternetGatewayRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateEgressOnlyInternetGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateEgressOnlyInternetGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Launches an EC2 Fleet. You can create a single EC2 Fleet that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet. For more information, see Launching an EC2 Fleet in the Amazon Elastic Compute Cloud User Guide.
      */
    def createFleet(): awsDashSdkLib.libRequestMod.Request[CreateFleetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createFleet(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateFleetResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateFleetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Launches an EC2 Fleet. You can create a single EC2 Fleet that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet. For more information, see Launching an EC2 Fleet in the Amazon Elastic Compute Cloud User Guide.
      */
    def createFleet(params: CreateFleetRequest): awsDashSdkLib.libRequestMod.Request[CreateFleetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createFleet(
      params: CreateFleetRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateFleetResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateFleetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates one or more flow logs to capture information about IP traffic for a specific network interface, subnet, or VPC.  Flow log data for a monitored network interface is recorded as flow log records, which are log events consisting of fields that describe the traffic flow. For more information, see Flow Log Records in the Amazon Virtual Private Cloud User Guide. When publishing to CloudWatch Logs, flow log records are published to a log group, and each network interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all of the monitored network interfaces are published to a single log file object that is stored in the specified bucket. For more information, see VPC Flow Logs in the Amazon Virtual Private Cloud User Guide.
      */
    def createFlowLogs(): awsDashSdkLib.libRequestMod.Request[CreateFlowLogsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createFlowLogs(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateFlowLogsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateFlowLogsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates one or more flow logs to capture information about IP traffic for a specific network interface, subnet, or VPC.  Flow log data for a monitored network interface is recorded as flow log records, which are log events consisting of fields that describe the traffic flow. For more information, see Flow Log Records in the Amazon Virtual Private Cloud User Guide. When publishing to CloudWatch Logs, flow log records are published to a log group, and each network interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all of the monitored network interfaces are published to a single log file object that is stored in the specified bucket. For more information, see VPC Flow Logs in the Amazon Virtual Private Cloud User Guide.
      */
    def createFlowLogs(params: CreateFlowLogsRequest): awsDashSdkLib.libRequestMod.Request[CreateFlowLogsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createFlowLogs(
      params: CreateFlowLogsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateFlowLogsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateFlowLogsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP). The create operation is asynchronous. To verify that the AFI is ready for use, check the output logs. An AFI contains the FPGA bitstream that is ready to download to an FPGA. You can securely deploy an AFI on one or more FPGA-accelerated instances. For more information, see the AWS FPGA Hardware Development Kit.
      */
    def createFpgaImage(): awsDashSdkLib.libRequestMod.Request[CreateFpgaImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createFpgaImage(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateFpgaImageResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateFpgaImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP). The create operation is asynchronous. To verify that the AFI is ready for use, check the output logs. An AFI contains the FPGA bitstream that is ready to download to an FPGA. You can securely deploy an AFI on one or more FPGA-accelerated instances. For more information, see the AWS FPGA Hardware Development Kit.
      */
    def createFpgaImage(params: CreateFpgaImageRequest): awsDashSdkLib.libRequestMod.Request[CreateFpgaImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createFpgaImage(
      params: CreateFpgaImageRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateFpgaImageResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateFpgaImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped. If you customized your instance with instance store volumes or EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes. For more information, see Creating Amazon EBS-Backed Linux AMIs in the Amazon Elastic Compute Cloud User Guide.
      */
    def createImage(): awsDashSdkLib.libRequestMod.Request[CreateImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createImage(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateImageResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped. If you customized your instance with instance store volumes or EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes. For more information, see Creating Amazon EBS-Backed Linux AMIs in the Amazon Elastic Compute Cloud User Guide.
      */
    def createImage(params: CreateImageRequest): awsDashSdkLib.libRequestMod.Request[CreateImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createImage(
      params: CreateImageRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateImageResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Exports a running or stopped instance to an S3 bucket. For information about the supported operating systems, image formats, and known limitations for the types of instances you can export, see Exporting an Instance as a VM Using VM Import/Export in the VM Import/Export User Guide.
      */
    def createInstanceExportTask(): awsDashSdkLib.libRequestMod.Request[CreateInstanceExportTaskResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createInstanceExportTask(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateInstanceExportTaskResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateInstanceExportTaskResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Exports a running or stopped instance to an S3 bucket. For information about the supported operating systems, image formats, and known limitations for the types of instances you can export, see Exporting an Instance as a VM Using VM Import/Export in the VM Import/Export User Guide.
      */
    def createInstanceExportTask(params: CreateInstanceExportTaskRequest): awsDashSdkLib.libRequestMod.Request[CreateInstanceExportTaskResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createInstanceExportTask(
      params: CreateInstanceExportTaskRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateInstanceExportTaskResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateInstanceExportTaskResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an internet gateway for use with a VPC. After creating the internet gateway, you attach it to a VPC using AttachInternetGateway. For more information about your VPC and internet gateway, see the Amazon Virtual Private Cloud User Guide.
      */
    def createInternetGateway(): awsDashSdkLib.libRequestMod.Request[CreateInternetGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createInternetGateway(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateInternetGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateInternetGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an internet gateway for use with a VPC. After creating the internet gateway, you attach it to a VPC using AttachInternetGateway. For more information about your VPC and internet gateway, see the Amazon Virtual Private Cloud User Guide.
      */
    def createInternetGateway(params: CreateInternetGatewayRequest): awsDashSdkLib.libRequestMod.Request[CreateInternetGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createInternetGateway(
      params: CreateInternetGatewayRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateInternetGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateInternetGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key. If a key with the specified name already exists, Amazon EC2 returns an error. You can have up to five thousand key pairs per region. The key pair returned to you is available only in the region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any region using ImportKeyPair. For more information, see Key Pairs in the Amazon Elastic Compute Cloud User Guide.
      */
    def createKeyPair(): awsDashSdkLib.libRequestMod.Request[KeyPair, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createKeyPair(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ KeyPair, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[KeyPair, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key. If a key with the specified name already exists, Amazon EC2 returns an error. You can have up to five thousand key pairs per region. The key pair returned to you is available only in the region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any region using ImportKeyPair. For more information, see Key Pairs in the Amazon Elastic Compute Cloud User Guide.
      */
    def createKeyPair(params: CreateKeyPairRequest): awsDashSdkLib.libRequestMod.Request[KeyPair, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createKeyPair(
      params: CreateKeyPairRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ KeyPair, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[KeyPair, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a launch template. A launch template contains the parameters to launch an instance. When you launch an instance using RunInstances, you can specify a launch template instead of providing the launch parameters in the request.
      */
    def createLaunchTemplate(): awsDashSdkLib.libRequestMod.Request[CreateLaunchTemplateResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createLaunchTemplate(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateLaunchTemplateResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateLaunchTemplateResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a launch template. A launch template contains the parameters to launch an instance. When you launch an instance using RunInstances, you can specify a launch template instead of providing the launch parameters in the request.
      */
    def createLaunchTemplate(params: CreateLaunchTemplateRequest): awsDashSdkLib.libRequestMod.Request[CreateLaunchTemplateResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createLaunchTemplate(
      params: CreateLaunchTemplateRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateLaunchTemplateResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateLaunchTemplateResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a new version for a launch template. You can specify an existing version of launch template from which to base the new version. Launch template versions are numbered in the order in which they are created. You cannot specify, change, or replace the numbering of launch template versions.
      */
    def createLaunchTemplateVersion(): awsDashSdkLib.libRequestMod.Request[CreateLaunchTemplateVersionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createLaunchTemplateVersion(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateLaunchTemplateVersionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateLaunchTemplateVersionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a new version for a launch template. You can specify an existing version of launch template from which to base the new version. Launch template versions are numbered in the order in which they are created. You cannot specify, change, or replace the numbering of launch template versions.
      */
    def createLaunchTemplateVersion(params: CreateLaunchTemplateVersionRequest): awsDashSdkLib.libRequestMod.Request[CreateLaunchTemplateVersionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createLaunchTemplateVersion(
      params: CreateLaunchTemplateVersionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateLaunchTemplateVersionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateLaunchTemplateVersionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a NAT gateway in the specified public subnet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. Internet-bound traffic from a private subnet can be routed to the NAT gateway, therefore enabling instances in the private subnet to connect to the internet. For more information, see NAT Gateways in the Amazon Virtual Private Cloud User Guide.
      */
    def createNatGateway(): awsDashSdkLib.libRequestMod.Request[CreateNatGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createNatGateway(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateNatGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateNatGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a NAT gateway in the specified public subnet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. Internet-bound traffic from a private subnet can be routed to the NAT gateway, therefore enabling instances in the private subnet to connect to the internet. For more information, see NAT Gateways in the Amazon Virtual Private Cloud User Guide.
      */
    def createNatGateway(params: CreateNatGatewayRequest): awsDashSdkLib.libRequestMod.Request[CreateNatGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createNatGateway(
      params: CreateNatGatewayRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateNatGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateNatGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC. For more information, see Network ACLs in the Amazon Virtual Private Cloud User Guide.
      */
    def createNetworkAcl(): awsDashSdkLib.libRequestMod.Request[CreateNetworkAclResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createNetworkAcl(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateNetworkAclResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateNetworkAclResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC. For more information, see Network ACLs in the Amazon Virtual Private Cloud User Guide.
      */
    def createNetworkAcl(params: CreateNetworkAclRequest): awsDashSdkLib.libRequestMod.Request[CreateNetworkAclResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createNetworkAcl(
      params: CreateNetworkAclRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateNetworkAclResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateNetworkAclResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of ingress rules and a separate set of egress rules. We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules. After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one. For more information about network ACLs, see Network ACLs in the Amazon Virtual Private Cloud User Guide.
      */
    def createNetworkAclEntry(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createNetworkAclEntry(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of ingress rules and a separate set of egress rules. We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules. After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one. For more information about network ACLs, see Network ACLs in the Amazon Virtual Private Cloud User Guide.
      */
    def createNetworkAclEntry(params: CreateNetworkAclEntryRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createNetworkAclEntry(
      params: CreateNetworkAclEntryRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a network interface in the specified subnet. For more information about network interfaces, see Elastic Network Interfaces in the Amazon Virtual Private Cloud User Guide.
      */
    def createNetworkInterface(): awsDashSdkLib.libRequestMod.Request[CreateNetworkInterfaceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createNetworkInterface(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateNetworkInterfaceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateNetworkInterfaceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a network interface in the specified subnet. For more information about network interfaces, see Elastic Network Interfaces in the Amazon Virtual Private Cloud User Guide.
      */
    def createNetworkInterface(params: CreateNetworkInterfaceRequest): awsDashSdkLib.libRequestMod.Request[CreateNetworkInterfaceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createNetworkInterface(
      params: CreateNetworkInterfaceRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateNetworkInterfaceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateNetworkInterfaceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Grants an AWS-authorized account permission to attach the specified network interface to an instance in their account. You can grant permission to a single AWS account only, and only one account at a time.
      */
    def createNetworkInterfacePermission(): awsDashSdkLib.libRequestMod.Request[CreateNetworkInterfacePermissionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createNetworkInterfacePermission(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateNetworkInterfacePermissionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateNetworkInterfacePermissionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Grants an AWS-authorized account permission to attach the specified network interface to an instance in their account. You can grant permission to a single AWS account only, and only one account at a time.
      */
    def createNetworkInterfacePermission(params: CreateNetworkInterfacePermissionRequest): awsDashSdkLib.libRequestMod.Request[CreateNetworkInterfacePermissionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createNetworkInterfacePermission(
      params: CreateNetworkInterfacePermissionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateNetworkInterfacePermissionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateNetworkInterfacePermissionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a placement group in which to launch instances. The strategy of the placement group determines how the instances are organized within the group.  A cluster placement group is a logical grouping of instances within a single Availability Zone that benefit from low network latency, high network throughput. A spread placement group places instances on distinct hardware. A partition placement group places groups of instances in different partitions, where instances in one partition do not share the same hardware with instances in another partition. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
      */
    def createPlacementGroup(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createPlacementGroup(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a placement group in which to launch instances. The strategy of the placement group determines how the instances are organized within the group.  A cluster placement group is a logical grouping of instances within a single Availability Zone that benefit from low network latency, high network throughput. A spread placement group places instances on distinct hardware. A partition placement group places groups of instances in different partitions, where instances in one partition do not share the same hardware with instances in another partition. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
      */
    def createPlacementGroup(params: CreatePlacementGroupRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createPlacementGroup(
      params: CreatePlacementGroupRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your Standard Reserved Instances, you can use the DescribeReservedInstances operation.  Only Standard Reserved Instances with a capacity reservation can be sold in the Reserved Instance Marketplace. Convertible Reserved Instances and Standard Reserved Instances with a regional benefit cannot be sold.  The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances. To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the DescribeReservedInstancesListings operation. For more information, see Reserved Instance Marketplace in the Amazon Elastic Compute Cloud User Guide.
      */
    def createReservedInstancesListing(): awsDashSdkLib.libRequestMod.Request[CreateReservedInstancesListingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createReservedInstancesListing(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateReservedInstancesListingResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateReservedInstancesListingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your Standard Reserved Instances, you can use the DescribeReservedInstances operation.  Only Standard Reserved Instances with a capacity reservation can be sold in the Reserved Instance Marketplace. Convertible Reserved Instances and Standard Reserved Instances with a regional benefit cannot be sold.  The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances. To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the DescribeReservedInstancesListings operation. For more information, see Reserved Instance Marketplace in the Amazon Elastic Compute Cloud User Guide.
      */
    def createReservedInstancesListing(params: CreateReservedInstancesListingRequest): awsDashSdkLib.libRequestMod.Request[CreateReservedInstancesListingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createReservedInstancesListing(
      params: CreateReservedInstancesListingRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateReservedInstancesListingResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateReservedInstancesListingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a route in a route table within a VPC. You must specify one of the following targets: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, or egress-only internet gateway. When determining how to route traffic, we use the route with the most specific match. For example, traffic is destined for the IPv4 address 192.0.2.3, and the route table includes the following two IPv4 routes:    192.0.2.0/24 (goes to some target A)    192.0.2.0/28 (goes to some target B)   Both routes apply to the traffic destined for 192.0.2.3. However, the second route in the list covers a smaller number of IP addresses and is therefore more specific, so we use that route to determine where to target the traffic. For more information about route tables, see Route Tables in the Amazon Virtual Private Cloud User Guide.
      */
    def createRoute(): awsDashSdkLib.libRequestMod.Request[CreateRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createRoute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateRouteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a route in a route table within a VPC. You must specify one of the following targets: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, or egress-only internet gateway. When determining how to route traffic, we use the route with the most specific match. For example, traffic is destined for the IPv4 address 192.0.2.3, and the route table includes the following two IPv4 routes:    192.0.2.0/24 (goes to some target A)    192.0.2.0/28 (goes to some target B)   Both routes apply to the traffic destined for 192.0.2.3. However, the second route in the list covers a smaller number of IP addresses and is therefore more specific, so we use that route to determine where to target the traffic. For more information about route tables, see Route Tables in the Amazon Virtual Private Cloud User Guide.
      */
    def createRoute(params: CreateRouteRequest): awsDashSdkLib.libRequestMod.Request[CreateRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createRoute(
      params: CreateRouteRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateRouteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet. For more information, see Route Tables in the Amazon Virtual Private Cloud User Guide.
      */
    def createRouteTable(): awsDashSdkLib.libRequestMod.Request[CreateRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createRouteTable(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateRouteTableResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet. For more information, see Route Tables in the Amazon Virtual Private Cloud User Guide.
      */
    def createRouteTable(params: CreateRouteTableRequest): awsDashSdkLib.libRequestMod.Request[CreateRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createRouteTable(
      params: CreateRouteTableRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateRouteTableResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a security group. A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see Amazon EC2 Security Groups in the Amazon Elastic Compute Cloud User Guide and Security Groups for Your VPC in the Amazon Virtual Private Cloud User Guide.  EC2-Classic: You can have up to 500 security groups. EC2-VPC: You can create up to 500 security groups per VPC.  When you create a security group, you specify a friendly name of your choice. You can have a security group for use in EC2-Classic with the same name as a security group for use in a VPC. However, you can't have two security groups for use in EC2-Classic with the same name or two security groups for use in a VPC with the same name. You have a default security group for use in EC2-Classic and a default security group for use in your VPC. If you don't specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other. You can add or remove rules from your security groups using AuthorizeSecurityGroupIngress, AuthorizeSecurityGroupEgress, RevokeSecurityGroupIngress, and RevokeSecurityGroupEgress.
      */
    def createSecurityGroup(): awsDashSdkLib.libRequestMod.Request[CreateSecurityGroupResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createSecurityGroup(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateSecurityGroupResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateSecurityGroupResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a security group. A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see Amazon EC2 Security Groups in the Amazon Elastic Compute Cloud User Guide and Security Groups for Your VPC in the Amazon Virtual Private Cloud User Guide.  EC2-Classic: You can have up to 500 security groups. EC2-VPC: You can create up to 500 security groups per VPC.  When you create a security group, you specify a friendly name of your choice. You can have a security group for use in EC2-Classic with the same name as a security group for use in a VPC. However, you can't have two security groups for use in EC2-Classic with the same name or two security groups for use in a VPC with the same name. You have a default security group for use in EC2-Classic and a default security group for use in your VPC. If you don't specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other. You can add or remove rules from your security groups using AuthorizeSecurityGroupIngress, AuthorizeSecurityGroupEgress, RevokeSecurityGroupIngress, and RevokeSecurityGroupEgress.
      */
    def createSecurityGroup(params: CreateSecurityGroupRequest): awsDashSdkLib.libRequestMod.Request[CreateSecurityGroupResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createSecurityGroup(
      params: CreateSecurityGroupRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateSecurityGroupResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateSecurityGroupResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for backups, to make copies of EBS volumes, and to save data before shutting down an instance. When a snapshot is created, any AWS Marketplace product codes that are associated with the source volume are propagated to the snapshot. You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your EBS volume at the time the snapshot command is issued; this may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is pending. To create a snapshot for EBS volumes that serve as root devices, you should stop the instance before taking the snapshot. Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected. You can tag your snapshots during creation. For more information, see Tagging Your Amazon EC2 Resources in the Amazon Elastic Compute Cloud User Guide. For more information, see Amazon Elastic Block Store and Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
      */
    def createSnapshot(): awsDashSdkLib.libRequestMod.Request[Snapshot, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createSnapshot(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ Snapshot, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[Snapshot, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for backups, to make copies of EBS volumes, and to save data before shutting down an instance. When a snapshot is created, any AWS Marketplace product codes that are associated with the source volume are propagated to the snapshot. You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your EBS volume at the time the snapshot command is issued; this may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is pending. To create a snapshot for EBS volumes that serve as root devices, you should stop the instance before taking the snapshot. Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected. You can tag your snapshots during creation. For more information, see Tagging Your Amazon EC2 Resources in the Amazon Elastic Compute Cloud User Guide. For more information, see Amazon Elastic Block Store and Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
      */
    def createSnapshot(params: CreateSnapshotRequest): awsDashSdkLib.libRequestMod.Request[Snapshot, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createSnapshot(
      params: CreateSnapshotRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ Snapshot, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[Snapshot, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs. You can create one data feed per AWS account. For more information, see Spot Instance Data Feed in the Amazon EC2 User Guide for Linux Instances.
      */
    def createSpotDatafeedSubscription(): awsDashSdkLib.libRequestMod.Request[CreateSpotDatafeedSubscriptionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createSpotDatafeedSubscription(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateSpotDatafeedSubscriptionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateSpotDatafeedSubscriptionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs. You can create one data feed per AWS account. For more information, see Spot Instance Data Feed in the Amazon EC2 User Guide for Linux Instances.
      */
    def createSpotDatafeedSubscription(params: CreateSpotDatafeedSubscriptionRequest): awsDashSdkLib.libRequestMod.Request[CreateSpotDatafeedSubscriptionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createSpotDatafeedSubscription(
      params: CreateSpotDatafeedSubscriptionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateSpotDatafeedSubscriptionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateSpotDatafeedSubscriptionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a subnet in an existing VPC. When you create each subnet, you provide the VPC ID and IPv4 CIDR block for the subnet. After you create a subnet, you can't change its CIDR block. The size of the subnet's IPv4 CIDR block can be the same as a VPC's IPv4 CIDR block, or a subset of a VPC's IPv4 CIDR block. If you create more than one subnet in a VPC, the subnets' CIDR blocks must not overlap. The smallest IPv4 subnet (and VPC) you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses). If you've associated an IPv6 CIDR block with your VPC, you can create a subnet with an IPv6 CIDR block that uses a /64 prefix length.   AWS reserves both the first four and the last IPv4 address in each subnet's CIDR block. They're not available for use.  If you add more than one subnet to a VPC, they're set up in a star topology with a logical router in the middle. If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP address doesn't change if you stop and restart the instance (unlike a similar instance launched outside a VPC, which gets a new IP address when restarted). It's therefore possible to have a subnet with no running instances (they're all stopped), but no remaining IP addresses available. For more information about subnets, see Your VPC and Subnets in the Amazon Virtual Private Cloud User Guide.
      */
    def createSubnet(): awsDashSdkLib.libRequestMod.Request[CreateSubnetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createSubnet(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateSubnetResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateSubnetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a subnet in an existing VPC. When you create each subnet, you provide the VPC ID and IPv4 CIDR block for the subnet. After you create a subnet, you can't change its CIDR block. The size of the subnet's IPv4 CIDR block can be the same as a VPC's IPv4 CIDR block, or a subset of a VPC's IPv4 CIDR block. If you create more than one subnet in a VPC, the subnets' CIDR blocks must not overlap. The smallest IPv4 subnet (and VPC) you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses). If you've associated an IPv6 CIDR block with your VPC, you can create a subnet with an IPv6 CIDR block that uses a /64 prefix length.   AWS reserves both the first four and the last IPv4 address in each subnet's CIDR block. They're not available for use.  If you add more than one subnet to a VPC, they're set up in a star topology with a logical router in the middle. If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP address doesn't change if you stop and restart the instance (unlike a similar instance launched outside a VPC, which gets a new IP address when restarted). It's therefore possible to have a subnet with no running instances (they're all stopped), but no remaining IP addresses available. For more information about subnets, see Your VPC and Subnets in the Amazon Virtual Private Cloud User Guide.
      */
    def createSubnet(params: CreateSubnetRequest): awsDashSdkLib.libRequestMod.Request[CreateSubnetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createSubnet(
      params: CreateSubnetRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateSubnetResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateSubnetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Adds or overwrites one or more tags for the specified Amazon EC2 resource or resources. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource. For more information about tags, see Tagging Your Resources in the Amazon Elastic Compute Cloud User Guide. For more information about creating IAM policies that control users' access to resources based on tags, see Supported Resource-Level Permissions for Amazon EC2 API Actions in the Amazon Elastic Compute Cloud User Guide.
      */
    def createTags(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createTags(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Adds or overwrites one or more tags for the specified Amazon EC2 resource or resources. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource. For more information about tags, see Tagging Your Resources in the Amazon Elastic Compute Cloud User Guide. For more information about creating IAM policies that control users' access to resources based on tags, see Supported Resource-Level Permissions for Amazon EC2 API Actions in the Amazon Elastic Compute Cloud User Guide.
      */
    def createTags(params: CreateTagsRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createTags(
      params: CreateTagsRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a transit gateway. You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks. After the transit gateway enters the available state, you can attach your VPCs and VPN connections to the transit gateway. To attach your VPCs, use CreateTransitGatewayVpcAttachment. To attach a VPN connection, use CreateCustomerGateway to create a customer gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to CreateVpnConnection. When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table and the default propagation route table. You can use CreateTransitGatewayRouteTable to create additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table. You can use EnableTransitGatewayRouteTablePropagation to propagate routes from a resource attachment to a transit gateway route table. If you disable automatic associations, you can use AssociateTransitGatewayRouteTable to associate a resource attachment with a transit gateway route table.
      */
    def createTransitGateway(): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createTransitGateway(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateTransitGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a transit gateway. You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks. After the transit gateway enters the available state, you can attach your VPCs and VPN connections to the transit gateway. To attach your VPCs, use CreateTransitGatewayVpcAttachment. To attach a VPN connection, use CreateCustomerGateway to create a customer gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to CreateVpnConnection. When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table and the default propagation route table. You can use CreateTransitGatewayRouteTable to create additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table. You can use EnableTransitGatewayRouteTablePropagation to propagate routes from a resource attachment to a transit gateway route table. If you disable automatic associations, you can use AssociateTransitGatewayRouteTable to associate a resource attachment with a transit gateway route table.
      */
    def createTransitGateway(params: CreateTransitGatewayRequest): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createTransitGateway(
      params: CreateTransitGatewayRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateTransitGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a static route for the specified transit gateway route table.
      */
    def createTransitGatewayRoute(): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createTransitGatewayRoute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateTransitGatewayRouteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a static route for the specified transit gateway route table.
      */
    def createTransitGatewayRoute(params: CreateTransitGatewayRouteRequest): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createTransitGatewayRoute(
      params: CreateTransitGatewayRouteRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateTransitGatewayRouteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a route table for the specified transit gateway.
      */
    def createTransitGatewayRouteTable(): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createTransitGatewayRouteTable(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateTransitGatewayRouteTableResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a route table for the specified transit gateway.
      */
    def createTransitGatewayRouteTable(params: CreateTransitGatewayRouteTableRequest): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createTransitGatewayRouteTable(
      params: CreateTransitGatewayRouteTableRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateTransitGatewayRouteTableResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Attaches the specified VPC to the specified transit gateway. If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached, the new VPC CIDR range is not propagated to the default propagation route table. To send VPC traffic to an attached transit gateway, add a route to the VPC route table using CreateRoute.
      */
    def createTransitGatewayVpcAttachment(): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createTransitGatewayVpcAttachment(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateTransitGatewayVpcAttachmentResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Attaches the specified VPC to the specified transit gateway. If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached, the new VPC CIDR range is not propagated to the default propagation route table. To send VPC traffic to an attached transit gateway, add a route to the VPC route table using CreateRoute.
      */
    def createTransitGatewayVpcAttachment(params: CreateTransitGatewayVpcAttachmentRequest): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createTransitGatewayVpcAttachment(
      params: CreateTransitGatewayVpcAttachmentRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateTransitGatewayVpcAttachmentResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an EBS volume that can be attached to an instance in the same Availability Zone. The volume is created in the regional endpoint that you send the HTTP request to. For more information see Regions and Endpoints. You can create a new empty volume or restore a volume from an EBS snapshot. Any AWS Marketplace product codes from the snapshot are propagated to the volume. You can create encrypted volumes with the Encrypted parameter. Encrypted volumes may only be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically encrypted. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide. You can tag your volumes during creation. For more information, see Tagging Your Amazon EC2 Resources in the Amazon Elastic Compute Cloud User Guide. For more information, see Creating an Amazon EBS Volume in the Amazon Elastic Compute Cloud User Guide.
      */
    def createVolume(): awsDashSdkLib.libRequestMod.Request[Volume, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVolume(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ Volume, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[Volume, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an EBS volume that can be attached to an instance in the same Availability Zone. The volume is created in the regional endpoint that you send the HTTP request to. For more information see Regions and Endpoints. You can create a new empty volume or restore a volume from an EBS snapshot. Any AWS Marketplace product codes from the snapshot are propagated to the volume. You can create encrypted volumes with the Encrypted parameter. Encrypted volumes may only be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically encrypted. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide. You can tag your volumes during creation. For more information, see Tagging Your Amazon EC2 Resources in the Amazon Elastic Compute Cloud User Guide. For more information, see Creating an Amazon EBS Volume in the Amazon Elastic Compute Cloud User Guide.
      */
    def createVolume(params: CreateVolumeRequest): awsDashSdkLib.libRequestMod.Request[Volume, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVolume(
      params: CreateVolumeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ Volume, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[Volume, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses). For more information about how large to make your VPC, see Your VPC and Subnets in the Amazon Virtual Private Cloud User Guide. You can optionally request an Amazon-provided IPv6 CIDR block for the VPC. The IPv6 CIDR block uses a /56 prefix length, and is allocated from Amazon's pool of IPv6 addresses. You cannot choose the IPv6 range for your VPC. By default, each instance you launch in the VPC has the default DHCP options, which include only a default DNS server that we provide (AmazonProvidedDNS). For more information, see DHCP Options Sets in the Amazon Virtual Private Cloud User Guide. You can specify the instance tenancy value for the VPC when you create it. You can't change this value for the VPC after you create it. For more information, see Dedicated Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def createVpc(): awsDashSdkLib.libRequestMod.Request[CreateVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpc(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ CreateVpcResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses). For more information about how large to make your VPC, see Your VPC and Subnets in the Amazon Virtual Private Cloud User Guide. You can optionally request an Amazon-provided IPv6 CIDR block for the VPC. The IPv6 CIDR block uses a /56 prefix length, and is allocated from Amazon's pool of IPv6 addresses. You cannot choose the IPv6 range for your VPC. By default, each instance you launch in the VPC has the default DHCP options, which include only a default DNS server that we provide (AmazonProvidedDNS). For more information, see DHCP Options Sets in the Amazon Virtual Private Cloud User Guide. You can specify the instance tenancy value for the VPC when you create it. You can't change this value for the VPC after you create it. For more information, see Dedicated Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def createVpc(params: CreateVpcRequest): awsDashSdkLib.libRequestMod.Request[CreateVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpc(
      params: CreateVpcRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ CreateVpcResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a VPC endpoint for a specified service. An endpoint enables you to create a private connection between your VPC and the service. The service may be provided by AWS, an AWS Marketplace partner, or another AWS account. For more information, see VPC Endpoints in the Amazon Virtual Private Cloud User Guide. A gateway endpoint serves as a target for a route in your route table for traffic destined for the AWS service. You can specify an endpoint policy to attach to the endpoint that will control access to the service from your VPC. You can also specify the VPC route tables that use the endpoint. An interface endpoint is a network interface in your subnet that serves as an endpoint for communicating with the specified service. You can specify the subnets in which to create an endpoint, and the security groups to associate with the endpoint network interface. Use DescribeVpcEndpointServices to get a list of supported services.
      */
    def createVpcEndpoint(): awsDashSdkLib.libRequestMod.Request[CreateVpcEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpcEndpoint(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVpcEndpointResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpcEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a VPC endpoint for a specified service. An endpoint enables you to create a private connection between your VPC and the service. The service may be provided by AWS, an AWS Marketplace partner, or another AWS account. For more information, see VPC Endpoints in the Amazon Virtual Private Cloud User Guide. A gateway endpoint serves as a target for a route in your route table for traffic destined for the AWS service. You can specify an endpoint policy to attach to the endpoint that will control access to the service from your VPC. You can also specify the VPC route tables that use the endpoint. An interface endpoint is a network interface in your subnet that serves as an endpoint for communicating with the specified service. You can specify the subnets in which to create an endpoint, and the security groups to associate with the endpoint network interface. Use DescribeVpcEndpointServices to get a list of supported services.
      */
    def createVpcEndpoint(params: CreateVpcEndpointRequest): awsDashSdkLib.libRequestMod.Request[CreateVpcEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpcEndpoint(
      params: CreateVpcEndpointRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVpcEndpointResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpcEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a connection notification for a specified VPC endpoint or VPC endpoint service. A connection notification notifies you of specific endpoint events. You must create an SNS topic to receive notifications. For more information, see Create a Topic in the Amazon Simple Notification Service Developer Guide. You can create a connection notification for interface endpoints only.
      */
    def createVpcEndpointConnectionNotification(): awsDashSdkLib.libRequestMod.Request[CreateVpcEndpointConnectionNotificationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpcEndpointConnectionNotification(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVpcEndpointConnectionNotificationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpcEndpointConnectionNotificationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a connection notification for a specified VPC endpoint or VPC endpoint service. A connection notification notifies you of specific endpoint events. You must create an SNS topic to receive notifications. For more information, see Create a Topic in the Amazon Simple Notification Service Developer Guide. You can create a connection notification for interface endpoints only.
      */
    def createVpcEndpointConnectionNotification(params: CreateVpcEndpointConnectionNotificationRequest): awsDashSdkLib.libRequestMod.Request[CreateVpcEndpointConnectionNotificationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpcEndpointConnectionNotification(
      params: CreateVpcEndpointConnectionNotificationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVpcEndpointConnectionNotificationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpcEndpointConnectionNotificationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a VPC endpoint service configuration to which service consumers (AWS accounts, IAM users, and IAM roles) can connect. Service consumers can create an interface VPC endpoint to connect to your service. To create an endpoint service configuration, you must first create a Network Load Balancer for your service. For more information, see VPC Endpoint Services in the Amazon Virtual Private Cloud User Guide. 
      */
    def createVpcEndpointServiceConfiguration(): awsDashSdkLib.libRequestMod.Request[CreateVpcEndpointServiceConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpcEndpointServiceConfiguration(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVpcEndpointServiceConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpcEndpointServiceConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a VPC endpoint service configuration to which service consumers (AWS accounts, IAM users, and IAM roles) can connect. Service consumers can create an interface VPC endpoint to connect to your service. To create an endpoint service configuration, you must first create a Network Load Balancer for your service. For more information, see VPC Endpoint Services in the Amazon Virtual Private Cloud User Guide. 
      */
    def createVpcEndpointServiceConfiguration(params: CreateVpcEndpointServiceConfigurationRequest): awsDashSdkLib.libRequestMod.Request[CreateVpcEndpointServiceConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpcEndpointServiceConfiguration(
      params: CreateVpcEndpointServiceConfigurationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVpcEndpointServiceConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpcEndpointServiceConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Requests a VPC peering connection between two VPCs: a requester VPC that you own and an accepter VPC with which to create the connection. The accepter VPC can belong to another AWS account and can be in a different Region to the requester VPC. The requester VPC and accepter VPC cannot have overlapping CIDR blocks.  Limitations and rules apply to a VPC peering connection. For more information, see the limitations section in the VPC Peering Guide.  The owner of the accepter VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected. If you create a VPC peering connection request between VPCs with overlapping CIDR blocks, the VPC peering connection has a status of failed.
      */
    def createVpcPeeringConnection(): awsDashSdkLib.libRequestMod.Request[CreateVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpcPeeringConnection(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVpcPeeringConnectionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Requests a VPC peering connection between two VPCs: a requester VPC that you own and an accepter VPC with which to create the connection. The accepter VPC can belong to another AWS account and can be in a different Region to the requester VPC. The requester VPC and accepter VPC cannot have overlapping CIDR blocks.  Limitations and rules apply to a VPC peering connection. For more information, see the limitations section in the VPC Peering Guide.  The owner of the accepter VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected. If you create a VPC peering connection request between VPCs with overlapping CIDR blocks, the VPC peering connection has a status of failed.
      */
    def createVpcPeeringConnection(params: CreateVpcPeeringConnectionRequest): awsDashSdkLib.libRequestMod.Request[CreateVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpcPeeringConnection(
      params: CreateVpcPeeringConnectionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVpcPeeringConnectionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a VPN connection between an existing virtual private gateway and a VPN customer gateway. The only supported connection type is ipsec.1. The response includes information that you need to give to your network administrator to configure your customer gateway.  We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway.  If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call. This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def createVpnConnection(): awsDashSdkLib.libRequestMod.Request[CreateVpnConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpnConnection(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVpnConnectionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpnConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a VPN connection between an existing virtual private gateway and a VPN customer gateway. The only supported connection type is ipsec.1. The response includes information that you need to give to your network administrator to configure your customer gateway.  We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway.  If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call. This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def createVpnConnection(params: CreateVpnConnectionRequest): awsDashSdkLib.libRequestMod.Request[CreateVpnConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpnConnection(
      params: CreateVpnConnectionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVpnConnectionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpnConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def createVpnConnectionRoute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpnConnectionRoute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def createVpnConnectionRoute(params: CreateVpnConnectionRouteRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpnConnectionRoute(
      params: CreateVpnConnectionRouteRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def createVpnGateway(): awsDashSdkLib.libRequestMod.Request[CreateVpnGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpnGateway(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVpnGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpnGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def createVpnGateway(params: CreateVpnGatewayRequest): awsDashSdkLib.libRequestMod.Request[CreateVpnGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVpnGateway(
      params: CreateVpnGatewayRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVpnGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVpnGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified Client VPN endpoint. You must disassociate all target networks before you can delete a Client VPN endpoint.
      */
    def deleteClientVpnEndpoint(): awsDashSdkLib.libRequestMod.Request[DeleteClientVpnEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteClientVpnEndpoint(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteClientVpnEndpointResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteClientVpnEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified Client VPN endpoint. You must disassociate all target networks before you can delete a Client VPN endpoint.
      */
    def deleteClientVpnEndpoint(params: DeleteClientVpnEndpointRequest): awsDashSdkLib.libRequestMod.Request[DeleteClientVpnEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteClientVpnEndpoint(
      params: DeleteClientVpnEndpointRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteClientVpnEndpointResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteClientVpnEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using the CreateClientVpnRoute action. You cannot delete routes that were automatically added when associating a subnet. To remove routes that have been automatically added, disassociate the target subnet from the Client VPN endpoint.
      */
    def deleteClientVpnRoute(): awsDashSdkLib.libRequestMod.Request[DeleteClientVpnRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteClientVpnRoute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteClientVpnRouteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteClientVpnRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using the CreateClientVpnRoute action. You cannot delete routes that were automatically added when associating a subnet. To remove routes that have been automatically added, disassociate the target subnet from the Client VPN endpoint.
      */
    def deleteClientVpnRoute(params: DeleteClientVpnRouteRequest): awsDashSdkLib.libRequestMod.Request[DeleteClientVpnRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteClientVpnRoute(
      params: DeleteClientVpnRouteRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteClientVpnRouteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteClientVpnRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.
      */
    def deleteCustomerGateway(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteCustomerGateway(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.
      */
    def deleteCustomerGateway(params: DeleteCustomerGatewayRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteCustomerGateway(
      params: DeleteCustomerGatewayRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.
      */
    def deleteDhcpOptions(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteDhcpOptions(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.
      */
    def deleteDhcpOptions(params: DeleteDhcpOptionsRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteDhcpOptions(
      params: DeleteDhcpOptionsRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes an egress-only internet gateway.
      */
    def deleteEgressOnlyInternetGateway(): awsDashSdkLib.libRequestMod.Request[DeleteEgressOnlyInternetGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteEgressOnlyInternetGateway(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteEgressOnlyInternetGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteEgressOnlyInternetGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes an egress-only internet gateway.
      */
    def deleteEgressOnlyInternetGateway(params: DeleteEgressOnlyInternetGatewayRequest): awsDashSdkLib.libRequestMod.Request[DeleteEgressOnlyInternetGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteEgressOnlyInternetGateway(
      params: DeleteEgressOnlyInternetGatewayRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteEgressOnlyInternetGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteEgressOnlyInternetGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified EC2 Fleet. After you delete an EC2 Fleet, it launches no new instances. You must specify whether an EC2 Fleet should also terminate its instances. If you terminate the instances, the EC2 Fleet enters the deleted_terminating state. Otherwise, the EC2 Fleet enters the deleted_running state, and the instances continue to run until they are interrupted or you terminate them manually. 
      */
    def deleteFleets(): awsDashSdkLib.libRequestMod.Request[DeleteFleetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteFleets(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteFleetsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteFleetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified EC2 Fleet. After you delete an EC2 Fleet, it launches no new instances. You must specify whether an EC2 Fleet should also terminate its instances. If you terminate the instances, the EC2 Fleet enters the deleted_terminating state. Otherwise, the EC2 Fleet enters the deleted_running state, and the instances continue to run until they are interrupted or you terminate them manually. 
      */
    def deleteFleets(params: DeleteFleetsRequest): awsDashSdkLib.libRequestMod.Request[DeleteFleetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteFleets(
      params: DeleteFleetsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteFleetsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteFleetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes one or more flow logs.
      */
    def deleteFlowLogs(): awsDashSdkLib.libRequestMod.Request[DeleteFlowLogsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteFlowLogs(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteFlowLogsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteFlowLogsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes one or more flow logs.
      */
    def deleteFlowLogs(params: DeleteFlowLogsRequest): awsDashSdkLib.libRequestMod.Request[DeleteFlowLogsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteFlowLogs(
      params: DeleteFlowLogsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteFlowLogsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteFlowLogsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified Amazon FPGA Image (AFI).
      */
    def deleteFpgaImage(): awsDashSdkLib.libRequestMod.Request[DeleteFpgaImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteFpgaImage(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteFpgaImageResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteFpgaImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified Amazon FPGA Image (AFI).
      */
    def deleteFpgaImage(params: DeleteFpgaImageRequest): awsDashSdkLib.libRequestMod.Request[DeleteFpgaImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteFpgaImage(
      params: DeleteFpgaImageRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteFpgaImageResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteFpgaImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified internet gateway. You must detach the internet gateway from the VPC before you can delete it.
      */
    def deleteInternetGateway(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteInternetGateway(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified internet gateway. You must detach the internet gateway from the VPC before you can delete it.
      */
    def deleteInternetGateway(params: DeleteInternetGatewayRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteInternetGateway(
      params: DeleteInternetGatewayRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified key pair, by removing the public key from Amazon EC2.
      */
    def deleteKeyPair(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteKeyPair(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified key pair, by removing the public key from Amazon EC2.
      */
    def deleteKeyPair(params: DeleteKeyPairRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteKeyPair(
      params: DeleteKeyPairRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a launch template. Deleting a launch template deletes all of its versions.
      */
    def deleteLaunchTemplate(): awsDashSdkLib.libRequestMod.Request[DeleteLaunchTemplateResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteLaunchTemplate(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteLaunchTemplateResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteLaunchTemplateResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a launch template. Deleting a launch template deletes all of its versions.
      */
    def deleteLaunchTemplate(params: DeleteLaunchTemplateRequest): awsDashSdkLib.libRequestMod.Request[DeleteLaunchTemplateResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteLaunchTemplate(
      params: DeleteLaunchTemplateRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteLaunchTemplateResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteLaunchTemplateResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes one or more versions of a launch template. You cannot delete the default version of a launch template; you must first assign a different version as the default. If the default version is the only version for the launch template, you must delete the entire launch template using DeleteLaunchTemplate.
      */
    def deleteLaunchTemplateVersions(): awsDashSdkLib.libRequestMod.Request[DeleteLaunchTemplateVersionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteLaunchTemplateVersions(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteLaunchTemplateVersionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteLaunchTemplateVersionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes one or more versions of a launch template. You cannot delete the default version of a launch template; you must first assign a different version as the default. If the default version is the only version for the launch template, you must delete the entire launch template using DeleteLaunchTemplate.
      */
    def deleteLaunchTemplateVersions(params: DeleteLaunchTemplateVersionsRequest): awsDashSdkLib.libRequestMod.Request[DeleteLaunchTemplateVersionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteLaunchTemplateVersions(
      params: DeleteLaunchTemplateVersionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteLaunchTemplateVersionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteLaunchTemplateVersionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified NAT gateway. Deleting a NAT gateway disassociates its Elastic IP address, but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway routes in your route tables.
      */
    def deleteNatGateway(): awsDashSdkLib.libRequestMod.Request[DeleteNatGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteNatGateway(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteNatGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteNatGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified NAT gateway. Deleting a NAT gateway disassociates its Elastic IP address, but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway routes in your route tables.
      */
    def deleteNatGateway(params: DeleteNatGatewayRequest): awsDashSdkLib.libRequestMod.Request[DeleteNatGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteNatGateway(
      params: DeleteNatGatewayRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteNatGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteNatGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified network ACL. You can't delete the ACL if it's associated with any subnets. You can't delete the default network ACL.
      */
    def deleteNetworkAcl(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteNetworkAcl(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified network ACL. You can't delete the ACL if it's associated with any subnets. You can't delete the default network ACL.
      */
    def deleteNetworkAcl(params: DeleteNetworkAclRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteNetworkAcl(
      params: DeleteNetworkAclRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified ingress or egress entry (rule) from the specified network ACL.
      */
    def deleteNetworkAclEntry(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteNetworkAclEntry(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified ingress or egress entry (rule) from the specified network ACL.
      */
    def deleteNetworkAclEntry(params: DeleteNetworkAclEntryRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteNetworkAclEntry(
      params: DeleteNetworkAclEntryRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified network interface. You must detach the network interface before you can delete it.
      */
    def deleteNetworkInterface(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteNetworkInterface(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified network interface. You must detach the network interface before you can delete it.
      */
    def deleteNetworkInterface(params: DeleteNetworkInterfaceRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteNetworkInterface(
      params: DeleteNetworkInterfaceRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a permission for a network interface. By default, you cannot delete the permission if the account for which you're removing the permission has attached the network interface to an instance. However, you can force delete the permission, regardless of any attachment.
      */
    def deleteNetworkInterfacePermission(): awsDashSdkLib.libRequestMod.Request[DeleteNetworkInterfacePermissionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteNetworkInterfacePermission(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteNetworkInterfacePermissionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteNetworkInterfacePermissionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a permission for a network interface. By default, you cannot delete the permission if the account for which you're removing the permission has attached the network interface to an instance. However, you can force delete the permission, regardless of any attachment.
      */
    def deleteNetworkInterfacePermission(params: DeleteNetworkInterfacePermissionRequest): awsDashSdkLib.libRequestMod.Request[DeleteNetworkInterfacePermissionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteNetworkInterfacePermission(
      params: DeleteNetworkInterfacePermissionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteNetworkInterfacePermissionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteNetworkInterfacePermissionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
      */
    def deletePlacementGroup(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deletePlacementGroup(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
      */
    def deletePlacementGroup(params: DeletePlacementGroupRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deletePlacementGroup(
      params: DeletePlacementGroupRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified route from the specified route table.
      */
    def deleteRoute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteRoute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified route from the specified route table.
      */
    def deleteRoute(params: DeleteRouteRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteRoute(
      params: DeleteRouteRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can't delete the main route table.
      */
    def deleteRouteTable(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteRouteTable(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can't delete the main route table.
      */
    def deleteRouteTable(params: DeleteRouteTableRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteRouteTable(
      params: DeleteRouteTableRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a security group. If you attempt to delete a security group that is associated with an instance, or is referenced by another security group, the operation fails with InvalidGroup.InUse in EC2-Classic or DependencyViolation in EC2-VPC.
      */
    def deleteSecurityGroup(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteSecurityGroup(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a security group. If you attempt to delete a security group that is associated with an instance, or is referenced by another security group, the operation fails with InvalidGroup.InUse in EC2-Classic or DependencyViolation in EC2-VPC.
      */
    def deleteSecurityGroup(params: DeleteSecurityGroupRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteSecurityGroup(
      params: DeleteSecurityGroupRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified snapshot. When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume. You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first de-register the AMI before you can delete the snapshot. For more information, see Deleting an Amazon EBS Snapshot in the Amazon Elastic Compute Cloud User Guide.
      */
    def deleteSnapshot(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteSnapshot(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified snapshot. When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume. You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first de-register the AMI before you can delete the snapshot. For more information, see Deleting an Amazon EBS Snapshot in the Amazon Elastic Compute Cloud User Guide.
      */
    def deleteSnapshot(params: DeleteSnapshotRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteSnapshot(
      params: DeleteSnapshotRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the data feed for Spot Instances.
      */
    def deleteSpotDatafeedSubscription(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteSpotDatafeedSubscription(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the data feed for Spot Instances.
      */
    def deleteSpotDatafeedSubscription(params: DeleteSpotDatafeedSubscriptionRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteSpotDatafeedSubscription(
      params: DeleteSpotDatafeedSubscriptionRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.
      */
    def deleteSubnet(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteSubnet(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.
      */
    def deleteSubnet(params: DeleteSubnetRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteSubnet(
      params: DeleteSubnetRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified set of tags from the specified set of resources. To list the current tags, use DescribeTags. For more information about tags, see Tagging Your Resources in the Amazon Elastic Compute Cloud User Guide.
      */
    def deleteTags(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteTags(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified set of tags from the specified set of resources. To list the current tags, use DescribeTags. For more information about tags, see Tagging Your Resources in the Amazon Elastic Compute Cloud User Guide.
      */
    def deleteTags(params: DeleteTagsRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteTags(
      params: DeleteTagsRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified transit gateway.
      */
    def deleteTransitGateway(): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteTransitGateway(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteTransitGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified transit gateway.
      */
    def deleteTransitGateway(params: DeleteTransitGatewayRequest): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteTransitGateway(
      params: DeleteTransitGatewayRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteTransitGatewayResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified route from the specified transit gateway route table.
      */
    def deleteTransitGatewayRoute(): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteTransitGatewayRoute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteTransitGatewayRouteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified route from the specified transit gateway route table.
      */
    def deleteTransitGatewayRoute(params: DeleteTransitGatewayRouteRequest): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteTransitGatewayRoute(
      params: DeleteTransitGatewayRouteRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteTransitGatewayRouteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified transit gateway route table. You must disassociate the route table from any transit gateway route tables before you can delete it.
      */
    def deleteTransitGatewayRouteTable(): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteTransitGatewayRouteTable(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteTransitGatewayRouteTableResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified transit gateway route table. You must disassociate the route table from any transit gateway route tables before you can delete it.
      */
    def deleteTransitGatewayRouteTable(params: DeleteTransitGatewayRouteTableRequest): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteTransitGatewayRouteTable(
      params: DeleteTransitGatewayRouteTableRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteTransitGatewayRouteTableResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified VPC attachment.
      */
    def deleteTransitGatewayVpcAttachment(): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteTransitGatewayVpcAttachment(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteTransitGatewayVpcAttachmentResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified VPC attachment.
      */
    def deleteTransitGatewayVpcAttachment(params: DeleteTransitGatewayVpcAttachmentRequest): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteTransitGatewayVpcAttachment(
      params: DeleteTransitGatewayVpcAttachmentRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteTransitGatewayVpcAttachmentResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified EBS volume. The volume must be in the available state (not attached to an instance). The volume can remain in the deleting state for several minutes. For more information, see Deleting an Amazon EBS Volume in the Amazon Elastic Compute Cloud User Guide.
      */
    def deleteVolume(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVolume(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified EBS volume. The volume must be in the available state (not attached to an instance). The volume can remain in the deleting state for several minutes. For more information, see Deleting an Amazon EBS Volume in the Amazon Elastic Compute Cloud User Guide.
      */
    def deleteVolume(params: DeleteVolumeRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVolume(
      params: DeleteVolumeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on.
      */
    def deleteVpc(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpc(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on.
      */
    def deleteVpc(params: DeleteVpcRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpc(
      params: DeleteVpcRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes one or more VPC endpoint connection notifications.
      */
    def deleteVpcEndpointConnectionNotifications(): awsDashSdkLib.libRequestMod.Request[DeleteVpcEndpointConnectionNotificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpcEndpointConnectionNotifications(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteVpcEndpointConnectionNotificationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteVpcEndpointConnectionNotificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes one or more VPC endpoint connection notifications.
      */
    def deleteVpcEndpointConnectionNotifications(params: DeleteVpcEndpointConnectionNotificationsRequest): awsDashSdkLib.libRequestMod.Request[DeleteVpcEndpointConnectionNotificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpcEndpointConnectionNotifications(
      params: DeleteVpcEndpointConnectionNotificationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteVpcEndpointConnectionNotificationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteVpcEndpointConnectionNotificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes one or more VPC endpoint service configurations in your account. Before you delete the endpoint service configuration, you must reject any Available or PendingAcceptance interface endpoint connections that are attached to the service.
      */
    def deleteVpcEndpointServiceConfigurations(): awsDashSdkLib.libRequestMod.Request[DeleteVpcEndpointServiceConfigurationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpcEndpointServiceConfigurations(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteVpcEndpointServiceConfigurationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteVpcEndpointServiceConfigurationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes one or more VPC endpoint service configurations in your account. Before you delete the endpoint service configuration, you must reject any Available or PendingAcceptance interface endpoint connections that are attached to the service.
      */
    def deleteVpcEndpointServiceConfigurations(params: DeleteVpcEndpointServiceConfigurationsRequest): awsDashSdkLib.libRequestMod.Request[DeleteVpcEndpointServiceConfigurationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpcEndpointServiceConfigurations(
      params: DeleteVpcEndpointServiceConfigurationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteVpcEndpointServiceConfigurationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteVpcEndpointServiceConfigurationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes one or more specified VPC endpoints. Deleting a gateway endpoint also deletes the endpoint routes in the route tables that were associated with the endpoint. Deleting an interface endpoint deletes the endpoint network interfaces.
      */
    def deleteVpcEndpoints(): awsDashSdkLib.libRequestMod.Request[DeleteVpcEndpointsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpcEndpoints(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteVpcEndpointsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteVpcEndpointsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes one or more specified VPC endpoints. Deleting a gateway endpoint also deletes the endpoint routes in the route tables that were associated with the endpoint. Deleting an interface endpoint deletes the endpoint network interfaces.
      */
    def deleteVpcEndpoints(params: DeleteVpcEndpointsRequest): awsDashSdkLib.libRequestMod.Request[DeleteVpcEndpointsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpcEndpoints(
      params: DeleteVpcEndpointsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteVpcEndpointsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteVpcEndpointsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the accepter VPC can delete the VPC peering connection if it's in the active state. The owner of the requester VPC can delete a VPC peering connection in the pending-acceptance state. You cannot delete a VPC peering connection that's in the failed state.
      */
    def deleteVpcPeeringConnection(): awsDashSdkLib.libRequestMod.Request[DeleteVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpcPeeringConnection(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteVpcPeeringConnectionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the accepter VPC can delete the VPC peering connection if it's in the active state. The owner of the requester VPC can delete a VPC peering connection in the pending-acceptance state. You cannot delete a VPC peering connection that's in the failed state.
      */
    def deleteVpcPeeringConnection(params: DeleteVpcPeeringConnectionRequest): awsDashSdkLib.libRequestMod.Request[DeleteVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpcPeeringConnection(
      params: DeleteVpcPeeringConnectionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteVpcPeeringConnectionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified VPN connection. If you're deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway using the new configuration information returned with the new VPN connection ID.
      */
    def deleteVpnConnection(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpnConnection(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified VPN connection. If you're deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway using the new configuration information returned with the new VPN connection ID.
      */
    def deleteVpnConnection(params: DeleteVpnConnectionRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpnConnection(
      params: DeleteVpnConnectionRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.
      */
    def deleteVpnConnectionRoute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpnConnectionRoute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.
      */
    def deleteVpnConnectionRoute(params: DeleteVpnConnectionRouteRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpnConnectionRoute(
      params: DeleteVpnConnectionRouteRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified virtual private gateway. We recommend that before you delete a virtual private gateway, you detach it from the VPC and delete the VPN connection. Note that you don't need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.
      */
    def deleteVpnGateway(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpnGateway(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the specified virtual private gateway. We recommend that before you delete a virtual private gateway, you detach it from the VPC and delete the VPN connection. Note that you don't need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.
      */
    def deleteVpnGateway(params: DeleteVpnGatewayRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVpnGateway(
      params: DeleteVpnGatewayRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Releases the specified address range that you provisioned for use with your AWS resources through bring your own IP addresses (BYOIP) and deletes the corresponding address pool. Before you can release an address range, you must stop advertising it using WithdrawByoipCidr and you must not have any IP addresses allocated from its address range.
      */
    def deprovisionByoipCidr(): awsDashSdkLib.libRequestMod.Request[DeprovisionByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deprovisionByoipCidr(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeprovisionByoipCidrResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeprovisionByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Releases the specified address range that you provisioned for use with your AWS resources through bring your own IP addresses (BYOIP) and deletes the corresponding address pool. Before you can release an address range, you must stop advertising it using WithdrawByoipCidr and you must not have any IP addresses allocated from its address range.
      */
    def deprovisionByoipCidr(params: DeprovisionByoipCidrRequest): awsDashSdkLib.libRequestMod.Request[DeprovisionByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deprovisionByoipCidr(
      params: DeprovisionByoipCidrRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeprovisionByoipCidrResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeprovisionByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deregisters the specified AMI. After you deregister an AMI, it can't be used to launch new instances; however, it doesn't affect any instances that you've already launched from the AMI. You'll continue to incur usage costs for those instances until you terminate them. When you deregister an Amazon EBS-backed AMI, it doesn't affect the snapshot that was created for the root volume of the instance during the AMI creation process. When you deregister an instance store-backed AMI, it doesn't affect the files that you uploaded to Amazon S3 when you created the AMI.
      */
    def deregisterImage(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deregisterImage(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deregisters the specified AMI. After you deregister an AMI, it can't be used to launch new instances; however, it doesn't affect any instances that you've already launched from the AMI. You'll continue to incur usage costs for those instances until you terminate them. When you deregister an Amazon EBS-backed AMI, it doesn't affect the snapshot that was created for the root volume of the instance during the AMI creation process. When you deregister an instance store-backed AMI, it doesn't affect the files that you uploaded to Amazon S3 when you created the AMI.
      */
    def deregisterImage(params: DeregisterImageRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deregisterImage(
      params: DeregisterImageRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes attributes of your AWS account. The following are the supported account attributes:    supported-platforms: Indicates whether your account can launch instances into EC2-Classic and EC2-VPC, or only into EC2-VPC.    default-vpc: The ID of the default VPC for your account, or none.    max-instances: The maximum number of On-Demand Instances that you can run.    vpc-max-security-groups-per-interface: The maximum number of security groups that you can assign to a network interface.    max-elastic-ips: The maximum number of Elastic IP addresses that you can allocate for use with EC2-Classic.     vpc-max-elastic-ips: The maximum number of Elastic IP addresses that you can allocate for use with EC2-VPC.  
      */
    def describeAccountAttributes(): awsDashSdkLib.libRequestMod.Request[DescribeAccountAttributesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeAccountAttributes(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeAccountAttributesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeAccountAttributesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes attributes of your AWS account. The following are the supported account attributes:    supported-platforms: Indicates whether your account can launch instances into EC2-Classic and EC2-VPC, or only into EC2-VPC.    default-vpc: The ID of the default VPC for your account, or none.    max-instances: The maximum number of On-Demand Instances that you can run.    vpc-max-security-groups-per-interface: The maximum number of security groups that you can assign to a network interface.    max-elastic-ips: The maximum number of Elastic IP addresses that you can allocate for use with EC2-Classic.     vpc-max-elastic-ips: The maximum number of Elastic IP addresses that you can allocate for use with EC2-VPC.  
      */
    def describeAccountAttributes(params: DescribeAccountAttributesRequest): awsDashSdkLib.libRequestMod.Request[DescribeAccountAttributesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeAccountAttributes(
      params: DescribeAccountAttributesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeAccountAttributesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeAccountAttributesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your Elastic IP addresses. An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see Elastic IP Addresses in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeAddresses(): awsDashSdkLib.libRequestMod.Request[DescribeAddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeAddresses(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeAddressesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeAddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your Elastic IP addresses. An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see Elastic IP Addresses in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeAddresses(params: DescribeAddressesRequest): awsDashSdkLib.libRequestMod.Request[DescribeAddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeAddresses(
      params: DescribeAddressesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeAddressesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeAddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the longer ID format settings for all resource types in a specific region. This request is useful for performing a quick audit to determine whether a specific region is fully opted in for longer IDs (17-character IDs). This request only returns information about resource types that support longer IDs. The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.
      */
    def describeAggregateIdFormat(): awsDashSdkLib.libRequestMod.Request[DescribeAggregateIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeAggregateIdFormat(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeAggregateIdFormatResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeAggregateIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the longer ID format settings for all resource types in a specific region. This request is useful for performing a quick audit to determine whether a specific region is fully opted in for longer IDs (17-character IDs). This request only returns information about resource types that support longer IDs. The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.
      */
    def describeAggregateIdFormat(params: DescribeAggregateIdFormatRequest): awsDashSdkLib.libRequestMod.Request[DescribeAggregateIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeAggregateIdFormat(
      params: DescribeAggregateIdFormatRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeAggregateIdFormatResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeAggregateIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of the Availability Zones that are available to you. The results include zones only for the region you're currently using. If there is an event impacting an Availability Zone, you can use this request to view the state and any provided message for that Availability Zone. For more information, see Regions and Availability Zones in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeAvailabilityZones(): awsDashSdkLib.libRequestMod.Request[DescribeAvailabilityZonesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeAvailabilityZones(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeAvailabilityZonesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeAvailabilityZonesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of the Availability Zones that are available to you. The results include zones only for the region you're currently using. If there is an event impacting an Availability Zone, you can use this request to view the state and any provided message for that Availability Zone. For more information, see Regions and Availability Zones in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeAvailabilityZones(params: DescribeAvailabilityZonesRequest): awsDashSdkLib.libRequestMod.Request[DescribeAvailabilityZonesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeAvailabilityZones(
      params: DescribeAvailabilityZonesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeAvailabilityZonesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeAvailabilityZonesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your bundling tasks.  Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use RegisterImage with the Amazon S3 bucket name and image manifest name you provided to the bundle task. 
      */
    def describeBundleTasks(): awsDashSdkLib.libRequestMod.Request[DescribeBundleTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeBundleTasks(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeBundleTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeBundleTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your bundling tasks.  Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use RegisterImage with the Amazon S3 bucket name and image manifest name you provided to the bundle task. 
      */
    def describeBundleTasks(params: DescribeBundleTasksRequest): awsDashSdkLib.libRequestMod.Request[DescribeBundleTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeBundleTasks(
      params: DescribeBundleTasksRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeBundleTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeBundleTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the IP address ranges that were specified in calls to ProvisionByoipCidr. To describe the address pools that were created when you provisioned the address ranges, use DescribePublicIpv4Pools.
      */
    def describeByoipCidrs(): awsDashSdkLib.libRequestMod.Request[DescribeByoipCidrsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeByoipCidrs(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeByoipCidrsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeByoipCidrsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the IP address ranges that were specified in calls to ProvisionByoipCidr. To describe the address pools that were created when you provisioned the address ranges, use DescribePublicIpv4Pools.
      */
    def describeByoipCidrs(params: DescribeByoipCidrsRequest): awsDashSdkLib.libRequestMod.Request[DescribeByoipCidrsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeByoipCidrs(
      params: DescribeByoipCidrsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeByoipCidrsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeByoipCidrsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the AWS Region that you're currently using.
      */
    def describeCapacityReservations(): awsDashSdkLib.libRequestMod.Request[DescribeCapacityReservationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeCapacityReservations(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeCapacityReservationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeCapacityReservationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the AWS Region that you're currently using.
      */
    def describeCapacityReservations(params: DescribeCapacityReservationsRequest): awsDashSdkLib.libRequestMod.Request[DescribeCapacityReservationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeCapacityReservations(
      params: DescribeCapacityReservationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeCapacityReservationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeCapacityReservationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your linked EC2-Classic instances. This request only returns information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot use this request to return information about other instances.
      */
    def describeClassicLinkInstances(): awsDashSdkLib.libRequestMod.Request[DescribeClassicLinkInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeClassicLinkInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeClassicLinkInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeClassicLinkInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your linked EC2-Classic instances. This request only returns information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot use this request to return information about other instances.
      */
    def describeClassicLinkInstances(params: DescribeClassicLinkInstancesRequest): awsDashSdkLib.libRequestMod.Request[DescribeClassicLinkInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeClassicLinkInstances(
      params: DescribeClassicLinkInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeClassicLinkInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeClassicLinkInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the authorization rules for a specified Client VPN endpoint.
      */
    def describeClientVpnAuthorizationRules(): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnAuthorizationRulesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeClientVpnAuthorizationRules(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeClientVpnAuthorizationRulesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnAuthorizationRulesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the authorization rules for a specified Client VPN endpoint.
      */
    def describeClientVpnAuthorizationRules(params: DescribeClientVpnAuthorizationRulesRequest): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnAuthorizationRulesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeClientVpnAuthorizationRules(
      params: DescribeClientVpnAuthorizationRulesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeClientVpnAuthorizationRulesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnAuthorizationRulesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes active client connections and connections that have been terminated within the last 60 minutes for the specified Client VPN endpoint.
      */
    def describeClientVpnConnections(): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeClientVpnConnections(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeClientVpnConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes active client connections and connections that have been terminated within the last 60 minutes for the specified Client VPN endpoint.
      */
    def describeClientVpnConnections(params: DescribeClientVpnConnectionsRequest): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeClientVpnConnections(
      params: DescribeClientVpnConnectionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeClientVpnConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more Client VPN endpoints in the account.
      */
    def describeClientVpnEndpoints(): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnEndpointsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeClientVpnEndpoints(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeClientVpnEndpointsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnEndpointsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more Client VPN endpoints in the account.
      */
    def describeClientVpnEndpoints(params: DescribeClientVpnEndpointsRequest): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnEndpointsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeClientVpnEndpoints(
      params: DescribeClientVpnEndpointsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeClientVpnEndpointsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnEndpointsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the routes for the specified Client VPN endpoint.
      */
    def describeClientVpnRoutes(): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnRoutesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeClientVpnRoutes(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeClientVpnRoutesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnRoutesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the routes for the specified Client VPN endpoint.
      */
    def describeClientVpnRoutes(params: DescribeClientVpnRoutesRequest): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnRoutesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeClientVpnRoutes(
      params: DescribeClientVpnRoutesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeClientVpnRoutesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnRoutesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the target networks associated with the specified Client VPN endpoint.
      */
    def describeClientVpnTargetNetworks(): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnTargetNetworksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeClientVpnTargetNetworks(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeClientVpnTargetNetworksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnTargetNetworksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the target networks associated with the specified Client VPN endpoint.
      */
    def describeClientVpnTargetNetworks(params: DescribeClientVpnTargetNetworksRequest): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnTargetNetworksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeClientVpnTargetNetworks(
      params: DescribeClientVpnTargetNetworksRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeClientVpnTargetNetworksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeClientVpnTargetNetworksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your conversion tasks. For more information, see the VM Import/Export User Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
      */
    def describeConversionTasks(): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeConversionTasks(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeConversionTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your conversion tasks. For more information, see the VM Import/Export User Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
      */
    def describeConversionTasks(params: DescribeConversionTasksRequest): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeConversionTasks(
      params: DescribeConversionTasksRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeConversionTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your VPN customer gateways. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def describeCustomerGateways(): awsDashSdkLib.libRequestMod.Request[DescribeCustomerGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeCustomerGateways(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeCustomerGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeCustomerGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your VPN customer gateways. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def describeCustomerGateways(params: DescribeCustomerGatewaysRequest): awsDashSdkLib.libRequestMod.Request[DescribeCustomerGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeCustomerGateways(
      params: DescribeCustomerGatewaysRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeCustomerGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeCustomerGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your DHCP options sets. For more information, see DHCP Options Sets in the Amazon Virtual Private Cloud User Guide.
      */
    def describeDhcpOptions(): awsDashSdkLib.libRequestMod.Request[DescribeDhcpOptionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeDhcpOptions(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeDhcpOptionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeDhcpOptionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your DHCP options sets. For more information, see DHCP Options Sets in the Amazon Virtual Private Cloud User Guide.
      */
    def describeDhcpOptions(params: DescribeDhcpOptionsRequest): awsDashSdkLib.libRequestMod.Request[DescribeDhcpOptionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeDhcpOptions(
      params: DescribeDhcpOptionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeDhcpOptionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeDhcpOptionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your egress-only internet gateways.
      */
    def describeEgressOnlyInternetGateways(): awsDashSdkLib.libRequestMod.Request[DescribeEgressOnlyInternetGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeEgressOnlyInternetGateways(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeEgressOnlyInternetGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeEgressOnlyInternetGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your egress-only internet gateways.
      */
    def describeEgressOnlyInternetGateways(params: DescribeEgressOnlyInternetGatewaysRequest): awsDashSdkLib.libRequestMod.Request[DescribeEgressOnlyInternetGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeEgressOnlyInternetGateways(
      params: DescribeEgressOnlyInternetGatewaysRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeEgressOnlyInternetGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeEgressOnlyInternetGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the Elastic Graphics accelerator associated with your instances. For more information about Elastic Graphics, see Amazon Elastic Graphics.
      */
    def describeElasticGpus(): awsDashSdkLib.libRequestMod.Request[DescribeElasticGpusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeElasticGpus(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeElasticGpusResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeElasticGpusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the Elastic Graphics accelerator associated with your instances. For more information about Elastic Graphics, see Amazon Elastic Graphics.
      */
    def describeElasticGpus(params: DescribeElasticGpusRequest): awsDashSdkLib.libRequestMod.Request[DescribeElasticGpusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeElasticGpus(
      params: DescribeElasticGpusRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeElasticGpusResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeElasticGpusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your export tasks.
      */
    def describeExportTasks(): awsDashSdkLib.libRequestMod.Request[DescribeExportTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeExportTasks(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeExportTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeExportTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your export tasks.
      */
    def describeExportTasks(params: DescribeExportTasksRequest): awsDashSdkLib.libRequestMod.Request[DescribeExportTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeExportTasks(
      params: DescribeExportTasksRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeExportTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeExportTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the events for the specified EC2 Fleet during the specified time.
      */
    def describeFleetHistory(): awsDashSdkLib.libRequestMod.Request[DescribeFleetHistoryResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeFleetHistory(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeFleetHistoryResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeFleetHistoryResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the events for the specified EC2 Fleet during the specified time.
      */
    def describeFleetHistory(params: DescribeFleetHistoryRequest): awsDashSdkLib.libRequestMod.Request[DescribeFleetHistoryResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeFleetHistory(
      params: DescribeFleetHistoryRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeFleetHistoryResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeFleetHistoryResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the running instances for the specified EC2 Fleet.
      */
    def describeFleetInstances(): awsDashSdkLib.libRequestMod.Request[DescribeFleetInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeFleetInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeFleetInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeFleetInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the running instances for the specified EC2 Fleet.
      */
    def describeFleetInstances(params: DescribeFleetInstancesRequest): awsDashSdkLib.libRequestMod.Request[DescribeFleetInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeFleetInstances(
      params: DescribeFleetInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeFleetInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeFleetInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your EC2 Fleets.
      */
    def describeFleets(): awsDashSdkLib.libRequestMod.Request[DescribeFleetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeFleets(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeFleetsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeFleetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your EC2 Fleets.
      */
    def describeFleets(params: DescribeFleetsRequest): awsDashSdkLib.libRequestMod.Request[DescribeFleetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeFleets(
      params: DescribeFleetsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeFleetsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeFleetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more flow logs. To view the information in your flow logs (the log streams for the network interfaces), you must use the CloudWatch Logs console or the CloudWatch Logs API.
      */
    def describeFlowLogs(): awsDashSdkLib.libRequestMod.Request[DescribeFlowLogsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeFlowLogs(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeFlowLogsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeFlowLogsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more flow logs. To view the information in your flow logs (the log streams for the network interfaces), you must use the CloudWatch Logs console or the CloudWatch Logs API.
      */
    def describeFlowLogs(params: DescribeFlowLogsRequest): awsDashSdkLib.libRequestMod.Request[DescribeFlowLogsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeFlowLogs(
      params: DescribeFlowLogsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeFlowLogsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeFlowLogsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified attribute of the specified Amazon FPGA Image (AFI).
      */
    def describeFpgaImageAttribute(): awsDashSdkLib.libRequestMod.Request[DescribeFpgaImageAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeFpgaImageAttribute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeFpgaImageAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeFpgaImageAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified attribute of the specified Amazon FPGA Image (AFI).
      */
    def describeFpgaImageAttribute(params: DescribeFpgaImageAttributeRequest): awsDashSdkLib.libRequestMod.Request[DescribeFpgaImageAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeFpgaImageAttribute(
      params: DescribeFpgaImageAttributeRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeFpgaImageAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeFpgaImageAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more available Amazon FPGA Images (AFIs). These include public AFIs, private AFIs that you own, and AFIs owned by other AWS accounts for which you have load permissions.
      */
    def describeFpgaImages(): awsDashSdkLib.libRequestMod.Request[DescribeFpgaImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeFpgaImages(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeFpgaImagesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeFpgaImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more available Amazon FPGA Images (AFIs). These include public AFIs, private AFIs that you own, and AFIs owned by other AWS accounts for which you have load permissions.
      */
    def describeFpgaImages(params: DescribeFpgaImagesRequest): awsDashSdkLib.libRequestMod.Request[DescribeFpgaImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeFpgaImages(
      params: DescribeFpgaImagesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeFpgaImagesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeFpgaImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the Dedicated Host reservations that are available to purchase. The results describe all the Dedicated Host reservation offerings, including offerings that may not match the instance family and Region of your Dedicated Hosts. When purchasing an offering, ensure that the instance family and Region of the offering matches that of the Dedicated Hosts with which it is to be associated. For more information about supported instance types, see Dedicated Hosts Overview in the Amazon Elastic Compute Cloud User Guide. 
      */
    def describeHostReservationOfferings(): awsDashSdkLib.libRequestMod.Request[DescribeHostReservationOfferingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeHostReservationOfferings(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeHostReservationOfferingsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeHostReservationOfferingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the Dedicated Host reservations that are available to purchase. The results describe all the Dedicated Host reservation offerings, including offerings that may not match the instance family and Region of your Dedicated Hosts. When purchasing an offering, ensure that the instance family and Region of the offering matches that of the Dedicated Hosts with which it is to be associated. For more information about supported instance types, see Dedicated Hosts Overview in the Amazon Elastic Compute Cloud User Guide. 
      */
    def describeHostReservationOfferings(params: DescribeHostReservationOfferingsRequest): awsDashSdkLib.libRequestMod.Request[DescribeHostReservationOfferingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeHostReservationOfferings(
      params: DescribeHostReservationOfferingsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeHostReservationOfferingsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeHostReservationOfferingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes reservations that are associated with Dedicated Hosts in your account.
      */
    def describeHostReservations(): awsDashSdkLib.libRequestMod.Request[DescribeHostReservationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeHostReservations(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeHostReservationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeHostReservationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes reservations that are associated with Dedicated Hosts in your account.
      */
    def describeHostReservations(params: DescribeHostReservationsRequest): awsDashSdkLib.libRequestMod.Request[DescribeHostReservationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeHostReservations(
      params: DescribeHostReservationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeHostReservationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeHostReservationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your Dedicated Hosts. The results describe only the Dedicated Hosts in the Region you're currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released are listed with the state released.
      */
    def describeHosts(): awsDashSdkLib.libRequestMod.Request[DescribeHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeHosts(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeHostsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your Dedicated Hosts. The results describe only the Dedicated Hosts in the Region you're currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released are listed with the state released.
      */
    def describeHosts(params: DescribeHostsRequest): awsDashSdkLib.libRequestMod.Request[DescribeHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeHosts(
      params: DescribeHostsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeHostsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes your IAM instance profile associations.
      */
    def describeIamInstanceProfileAssociations(): awsDashSdkLib.libRequestMod.Request[DescribeIamInstanceProfileAssociationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeIamInstanceProfileAssociations(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeIamInstanceProfileAssociationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeIamInstanceProfileAssociationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes your IAM instance profile associations.
      */
    def describeIamInstanceProfileAssociations(params: DescribeIamInstanceProfileAssociationsRequest): awsDashSdkLib.libRequestMod.Request[DescribeIamInstanceProfileAssociationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeIamInstanceProfileAssociations(
      params: DescribeIamInstanceProfileAssociationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeIamInstanceProfileAssociationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeIamInstanceProfileAssociationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the ID format settings for your resources on a per-region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.  These settings apply to the IAM user who makes the request; they do not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the ModifyIdFormat command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant Describe command for the resource type.
      */
    def describeIdFormat(): awsDashSdkLib.libRequestMod.Request[DescribeIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeIdFormat(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeIdFormatResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the ID format settings for your resources on a per-region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.  These settings apply to the IAM user who makes the request; they do not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the ModifyIdFormat command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant Describe command for the resource type.
      */
    def describeIdFormat(params: DescribeIdFormatRequest): awsDashSdkLib.libRequestMod.Request[DescribeIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeIdFormat(
      params: DescribeIdFormatRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeIdFormatResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. For more information, see Resource IDs in the Amazon Elastic Compute Cloud User Guide.  The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.  These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.
      */
    def describeIdentityIdFormat(): awsDashSdkLib.libRequestMod.Request[DescribeIdentityIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeIdentityIdFormat(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeIdentityIdFormatResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeIdentityIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. For more information, see Resource IDs in the Amazon Elastic Compute Cloud User Guide.  The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.  These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.
      */
    def describeIdentityIdFormat(params: DescribeIdentityIdFormatRequest): awsDashSdkLib.libRequestMod.Request[DescribeIdentityIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeIdentityIdFormat(
      params: DescribeIdentityIdFormatRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeIdentityIdFormatResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeIdentityIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.
      */
    def describeImageAttribute(): awsDashSdkLib.libRequestMod.Request[ImageAttribute, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeImageAttribute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ ImageAttribute, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[ImageAttribute, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.
      */
    def describeImageAttribute(params: DescribeImageAttributeRequest): awsDashSdkLib.libRequestMod.Request[ImageAttribute, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeImageAttribute(
      params: DescribeImageAttributeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ ImageAttribute, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[ImageAttribute, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of the images (AMIs, AKIs, and ARIs) available to you. Images available to you include public images, private images that you own, and private images owned by other AWS accounts but for which you have explicit launch permissions.  Deregistered images are included in the returned results for an unspecified interval after deregistration. 
      */
    def describeImages(): awsDashSdkLib.libRequestMod.Request[DescribeImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeImages(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeImagesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of the images (AMIs, AKIs, and ARIs) available to you. Images available to you include public images, private images that you own, and private images owned by other AWS accounts but for which you have explicit launch permissions.  Deregistered images are included in the returned results for an unspecified interval after deregistration. 
      */
    def describeImages(params: DescribeImagesRequest): awsDashSdkLib.libRequestMod.Request[DescribeImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeImages(
      params: DescribeImagesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeImagesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Displays details about an import virtual machine or import snapshot tasks that are already created.
      */
    def describeImportImageTasks(): awsDashSdkLib.libRequestMod.Request[DescribeImportImageTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeImportImageTasks(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeImportImageTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeImportImageTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Displays details about an import virtual machine or import snapshot tasks that are already created.
      */
    def describeImportImageTasks(params: DescribeImportImageTasksRequest): awsDashSdkLib.libRequestMod.Request[DescribeImportImageTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeImportImageTasks(
      params: DescribeImportImageTasksRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeImportImageTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeImportImageTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes your import snapshot tasks.
      */
    def describeImportSnapshotTasks(): awsDashSdkLib.libRequestMod.Request[DescribeImportSnapshotTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeImportSnapshotTasks(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeImportSnapshotTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeImportSnapshotTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes your import snapshot tasks.
      */
    def describeImportSnapshotTasks(params: DescribeImportSnapshotTasksRequest): awsDashSdkLib.libRequestMod.Request[DescribeImportSnapshotTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeImportSnapshotTasks(
      params: DescribeImportSnapshotTasksRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeImportSnapshotTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeImportSnapshotTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified attribute of the specified instance. You can specify only one attribute at a time. Valid attribute values are: instanceType | kernel | ramdisk | userData | disableApiTermination | instanceInitiatedShutdownBehavior | rootDeviceName | blockDeviceMapping | productCodes | sourceDestCheck | groupSet | ebsOptimized | sriovNetSupport 
      */
    def describeInstanceAttribute(): awsDashSdkLib.libRequestMod.Request[InstanceAttribute, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeInstanceAttribute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ InstanceAttribute, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[InstanceAttribute, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified attribute of the specified instance. You can specify only one attribute at a time. Valid attribute values are: instanceType | kernel | ramdisk | userData | disableApiTermination | instanceInitiatedShutdownBehavior | rootDeviceName | blockDeviceMapping | productCodes | sourceDestCheck | groupSet | ebsOptimized | sriovNetSupport 
      */
    def describeInstanceAttribute(params: DescribeInstanceAttributeRequest): awsDashSdkLib.libRequestMod.Request[InstanceAttribute, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeInstanceAttribute(
      params: DescribeInstanceAttributeRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ InstanceAttribute, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[InstanceAttribute, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the credit option for CPU usage of one or more of your T2 or T3 instances. The credit options are standard and unlimited. If you do not specify an instance ID, Amazon EC2 returns T2 and T3 instances with the unlimited credit option, as well as instances that were previously configured as T2 or T3 with the unlimited credit option. For example, if you resize a T2 instance, while it is configured as unlimited, to an M4 instance, Amazon EC2 returns the M4 instance. If you specify one or more instance IDs, Amazon EC2 returns the credit option (standard or unlimited) of those instances. If you specify an instance ID that is not valid, such as an instance that is not a T2 or T3 instance, an error is returned. Recently terminated instances might appear in the returned results. This interval is usually less than one hour. If an Availability Zone is experiencing a service disruption and you specify instance IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs in an unaffected zone, the call works normally. For more information, see Burstable Performance Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeInstanceCreditSpecifications(): awsDashSdkLib.libRequestMod.Request[DescribeInstanceCreditSpecificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeInstanceCreditSpecifications(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstanceCreditSpecificationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstanceCreditSpecificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the credit option for CPU usage of one or more of your T2 or T3 instances. The credit options are standard and unlimited. If you do not specify an instance ID, Amazon EC2 returns T2 and T3 instances with the unlimited credit option, as well as instances that were previously configured as T2 or T3 with the unlimited credit option. For example, if you resize a T2 instance, while it is configured as unlimited, to an M4 instance, Amazon EC2 returns the M4 instance. If you specify one or more instance IDs, Amazon EC2 returns the credit option (standard or unlimited) of those instances. If you specify an instance ID that is not valid, such as an instance that is not a T2 or T3 instance, an error is returned. Recently terminated instances might appear in the returned results. This interval is usually less than one hour. If an Availability Zone is experiencing a service disruption and you specify instance IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs in an unaffected zone, the call works normally. For more information, see Burstable Performance Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeInstanceCreditSpecifications(params: DescribeInstanceCreditSpecificationsRequest): awsDashSdkLib.libRequestMod.Request[DescribeInstanceCreditSpecificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeInstanceCreditSpecifications(
      params: DescribeInstanceCreditSpecificationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstanceCreditSpecificationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstanceCreditSpecificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the status of one or more instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances. Instance status includes the following components:    Status checks - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see Status Checks for Your Instances and Troubleshooting Instances with Failed Status Checks in the Amazon Elastic Compute Cloud User Guide.    Scheduled events - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see Scheduled Events for Your Instances in the Amazon Elastic Compute Cloud User Guide.    Instance state - You can manage your instances from the moment you launch them through their termination. For more information, see Instance Lifecycle in the Amazon Elastic Compute Cloud User Guide.  
      */
    def describeInstanceStatus(): awsDashSdkLib.libRequestMod.Request[DescribeInstanceStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeInstanceStatus(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstanceStatusResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstanceStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the status of one or more instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances. Instance status includes the following components:    Status checks - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see Status Checks for Your Instances and Troubleshooting Instances with Failed Status Checks in the Amazon Elastic Compute Cloud User Guide.    Scheduled events - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see Scheduled Events for Your Instances in the Amazon Elastic Compute Cloud User Guide.    Instance state - You can manage your instances from the moment you launch them through their termination. For more information, see Instance Lifecycle in the Amazon Elastic Compute Cloud User Guide.  
      */
    def describeInstanceStatus(params: DescribeInstanceStatusRequest): awsDashSdkLib.libRequestMod.Request[DescribeInstanceStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeInstanceStatus(
      params: DescribeInstanceStatusRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstanceStatusResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstanceStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your instances. If you specify one or more instance IDs, Amazon EC2 returns information for those instances. If you do not specify instance IDs, Amazon EC2 returns information for all relevant instances. If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the returned results. Recently terminated instances might appear in the returned results. This interval is usually less than one hour. If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.
      */
    def describeInstances(): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your instances. If you specify one or more instance IDs, Amazon EC2 returns information for those instances. If you do not specify instance IDs, Amazon EC2 returns information for all relevant instances. If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the returned results. Recently terminated instances might appear in the returned results. This interval is usually less than one hour. If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.
      */
    def describeInstances(params: DescribeInstancesRequest): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeInstances(
      params: DescribeInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your internet gateways.
      */
    def describeInternetGateways(): awsDashSdkLib.libRequestMod.Request[DescribeInternetGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeInternetGateways(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInternetGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInternetGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your internet gateways.
      */
    def describeInternetGateways(params: DescribeInternetGatewaysRequest): awsDashSdkLib.libRequestMod.Request[DescribeInternetGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeInternetGateways(
      params: DescribeInternetGatewaysRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInternetGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInternetGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your key pairs. For more information about key pairs, see Key Pairs in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeKeyPairs(): awsDashSdkLib.libRequestMod.Request[DescribeKeyPairsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeKeyPairs(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeKeyPairsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeKeyPairsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your key pairs. For more information about key pairs, see Key Pairs in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeKeyPairs(params: DescribeKeyPairsRequest): awsDashSdkLib.libRequestMod.Request[DescribeKeyPairsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeKeyPairs(
      params: DescribeKeyPairsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeKeyPairsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeKeyPairsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more versions of a specified launch template. You can describe all versions, individual versions, or a range of versions.
      */
    def describeLaunchTemplateVersions(): awsDashSdkLib.libRequestMod.Request[DescribeLaunchTemplateVersionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeLaunchTemplateVersions(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeLaunchTemplateVersionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeLaunchTemplateVersionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more versions of a specified launch template. You can describe all versions, individual versions, or a range of versions.
      */
    def describeLaunchTemplateVersions(params: DescribeLaunchTemplateVersionsRequest): awsDashSdkLib.libRequestMod.Request[DescribeLaunchTemplateVersionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeLaunchTemplateVersions(
      params: DescribeLaunchTemplateVersionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeLaunchTemplateVersionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeLaunchTemplateVersionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more launch templates.
      */
    def describeLaunchTemplates(): awsDashSdkLib.libRequestMod.Request[DescribeLaunchTemplatesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeLaunchTemplates(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeLaunchTemplatesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeLaunchTemplatesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more launch templates.
      */
    def describeLaunchTemplates(params: DescribeLaunchTemplatesRequest): awsDashSdkLib.libRequestMod.Request[DescribeLaunchTemplatesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeLaunchTemplates(
      params: DescribeLaunchTemplatesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeLaunchTemplatesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeLaunchTemplatesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes your Elastic IP addresses that are being moved to the EC2-VPC platform, or that are being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.
      */
    def describeMovingAddresses(): awsDashSdkLib.libRequestMod.Request[DescribeMovingAddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeMovingAddresses(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeMovingAddressesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeMovingAddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes your Elastic IP addresses that are being moved to the EC2-VPC platform, or that are being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.
      */
    def describeMovingAddresses(params: DescribeMovingAddressesRequest): awsDashSdkLib.libRequestMod.Request[DescribeMovingAddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeMovingAddresses(
      params: DescribeMovingAddressesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeMovingAddressesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeMovingAddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your NAT gateways.
      */
    def describeNatGateways(): awsDashSdkLib.libRequestMod.Request[DescribeNatGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeNatGateways(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNatGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNatGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your NAT gateways.
      */
    def describeNatGateways(params: DescribeNatGatewaysRequest): awsDashSdkLib.libRequestMod.Request[DescribeNatGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeNatGateways(
      params: DescribeNatGatewaysRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNatGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNatGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your network ACLs. For more information, see Network ACLs in the Amazon Virtual Private Cloud User Guide.
      */
    def describeNetworkAcls(): awsDashSdkLib.libRequestMod.Request[DescribeNetworkAclsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeNetworkAcls(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNetworkAclsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNetworkAclsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your network ACLs. For more information, see Network ACLs in the Amazon Virtual Private Cloud User Guide.
      */
    def describeNetworkAcls(params: DescribeNetworkAclsRequest): awsDashSdkLib.libRequestMod.Request[DescribeNetworkAclsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeNetworkAcls(
      params: DescribeNetworkAclsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNetworkAclsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNetworkAclsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes a network interface attribute. You can specify only one attribute at a time.
      */
    def describeNetworkInterfaceAttribute(): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfaceAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeNetworkInterfaceAttribute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNetworkInterfaceAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfaceAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes a network interface attribute. You can specify only one attribute at a time.
      */
    def describeNetworkInterfaceAttribute(params: DescribeNetworkInterfaceAttributeRequest): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfaceAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeNetworkInterfaceAttribute(
      params: DescribeNetworkInterfaceAttributeRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNetworkInterfaceAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfaceAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the permissions for your network interfaces. 
      */
    def describeNetworkInterfacePermissions(): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfacePermissionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeNetworkInterfacePermissions(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNetworkInterfacePermissionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfacePermissionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the permissions for your network interfaces. 
      */
    def describeNetworkInterfacePermissions(params: DescribeNetworkInterfacePermissionsRequest): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfacePermissionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeNetworkInterfacePermissions(
      params: DescribeNetworkInterfacePermissionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNetworkInterfacePermissionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfacePermissionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your network interfaces.
      */
    def describeNetworkInterfaces(): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfacesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeNetworkInterfaces(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNetworkInterfacesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfacesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your network interfaces.
      */
    def describeNetworkInterfaces(params: DescribeNetworkInterfacesRequest): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfacesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeNetworkInterfaces(
      params: DescribeNetworkInterfacesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNetworkInterfacesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfacesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your placement groups. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
      */
    def describePlacementGroups(): awsDashSdkLib.libRequestMod.Request[DescribePlacementGroupsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describePlacementGroups(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribePlacementGroupsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribePlacementGroupsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your placement groups. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
      */
    def describePlacementGroups(params: DescribePlacementGroupsRequest): awsDashSdkLib.libRequestMod.Request[DescribePlacementGroupsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describePlacementGroups(
      params: DescribePlacementGroupsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribePlacementGroupsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribePlacementGroupsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes available AWS services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service. A prefix list ID is required for creating an outbound security group rule that allows traffic from a VPC to access an AWS service through a gateway VPC endpoint. Currently, the services that support this action are Amazon S3 and Amazon DynamoDB.
      */
    def describePrefixLists(): awsDashSdkLib.libRequestMod.Request[DescribePrefixListsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describePrefixLists(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribePrefixListsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribePrefixListsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes available AWS services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service. A prefix list ID is required for creating an outbound security group rule that allows traffic from a VPC to access an AWS service through a gateway VPC endpoint. Currently, the services that support this action are Amazon S3 and Amazon DynamoDB.
      */
    def describePrefixLists(params: DescribePrefixListsRequest): awsDashSdkLib.libRequestMod.Request[DescribePrefixListsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describePrefixLists(
      params: DescribePrefixListsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribePrefixListsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribePrefixListsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the ID format settings for the root user and all IAM roles and IAM users that have explicitly specified a longer ID (17-character ID) preference.  By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they explicitly override the settings. This request is useful for identifying those IAM users and IAM roles that have overridden the default ID settings. The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. 
      */
    def describePrincipalIdFormat(): awsDashSdkLib.libRequestMod.Request[DescribePrincipalIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describePrincipalIdFormat(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribePrincipalIdFormatResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribePrincipalIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the ID format settings for the root user and all IAM roles and IAM users that have explicitly specified a longer ID (17-character ID) preference.  By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they explicitly override the settings. This request is useful for identifying those IAM users and IAM roles that have overridden the default ID settings. The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. 
      */
    def describePrincipalIdFormat(params: DescribePrincipalIdFormatRequest): awsDashSdkLib.libRequestMod.Request[DescribePrincipalIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describePrincipalIdFormat(
      params: DescribePrincipalIdFormatRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribePrincipalIdFormatResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribePrincipalIdFormatResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified IPv4 address pools.
      */
    def describePublicIpv4Pools(): awsDashSdkLib.libRequestMod.Request[DescribePublicIpv4PoolsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describePublicIpv4Pools(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribePublicIpv4PoolsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribePublicIpv4PoolsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified IPv4 address pools.
      */
    def describePublicIpv4Pools(params: DescribePublicIpv4PoolsRequest): awsDashSdkLib.libRequestMod.Request[DescribePublicIpv4PoolsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describePublicIpv4Pools(
      params: DescribePublicIpv4PoolsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribePublicIpv4PoolsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribePublicIpv4PoolsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more regions that are currently available to you. For a list of the regions supported by Amazon EC2, see Regions and Endpoints.
      */
    def describeRegions(): awsDashSdkLib.libRequestMod.Request[DescribeRegionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeRegions(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeRegionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeRegionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more regions that are currently available to you. For a list of the regions supported by Amazon EC2, see Regions and Endpoints.
      */
    def describeRegions(params: DescribeRegionsRequest): awsDashSdkLib.libRequestMod.Request[DescribeRegionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeRegions(
      params: DescribeRegionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeRegionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeRegionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of the Reserved Instances that you purchased. For more information about Reserved Instances, see Reserved Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeReservedInstances(): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeReservedInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeReservedInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of the Reserved Instances that you purchased. For more information about Reserved Instances, see Reserved Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeReservedInstances(params: DescribeReservedInstancesRequest): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeReservedInstances(
      params: DescribeReservedInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeReservedInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes your account's Reserved Instance listings in the Reserved Instance Marketplace. The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances. As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase. As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you're searching for with what's available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase. For more information, see Reserved Instance Marketplace in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeReservedInstancesListings(): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesListingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeReservedInstancesListings(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeReservedInstancesListingsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesListingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes your account's Reserved Instance listings in the Reserved Instance Marketplace. The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances. As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase. As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you're searching for with what's available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase. For more information, see Reserved Instance Marketplace in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeReservedInstancesListings(params: DescribeReservedInstancesListingsRequest): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesListingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeReservedInstancesListings(
      params: DescribeReservedInstancesListingsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeReservedInstancesListingsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesListingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned. For more information, see Modifying Reserved Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeReservedInstancesModifications(): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesModificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeReservedInstancesModifications(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeReservedInstancesModificationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesModificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned. For more information, see Modifying Reserved Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeReservedInstancesModifications(params: DescribeReservedInstancesModificationsRequest): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesModificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeReservedInstancesModifications(
      params: DescribeReservedInstancesModificationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeReservedInstancesModificationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesModificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used. If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances. For more information, see Reserved Instance Marketplace in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeReservedInstancesOfferings(): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesOfferingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeReservedInstancesOfferings(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeReservedInstancesOfferingsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesOfferingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used. If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances. For more information, see Reserved Instance Marketplace in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeReservedInstancesOfferings(params: DescribeReservedInstancesOfferingsRequest): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesOfferingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeReservedInstancesOfferings(
      params: DescribeReservedInstancesOfferingsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeReservedInstancesOfferingsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeReservedInstancesOfferingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your route tables. Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations. For more information, see Route Tables in the Amazon Virtual Private Cloud User Guide.
      */
    def describeRouteTables(): awsDashSdkLib.libRequestMod.Request[DescribeRouteTablesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeRouteTables(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeRouteTablesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeRouteTablesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your route tables. Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations. For more information, see Route Tables in the Amazon Virtual Private Cloud User Guide.
      */
    def describeRouteTables(params: DescribeRouteTablesRequest): awsDashSdkLib.libRequestMod.Request[DescribeRouteTablesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeRouteTables(
      params: DescribeRouteTablesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeRouteTablesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeRouteTablesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Finds available schedules that meet the specified criteria. You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours. After you find a schedule that meets your needs, call PurchaseScheduledInstances to purchase Scheduled Instances with that schedule.
      */
    def describeScheduledInstanceAvailability(): awsDashSdkLib.libRequestMod.Request[DescribeScheduledInstanceAvailabilityResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeScheduledInstanceAvailability(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeScheduledInstanceAvailabilityResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeScheduledInstanceAvailabilityResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Finds available schedules that meet the specified criteria. You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours. After you find a schedule that meets your needs, call PurchaseScheduledInstances to purchase Scheduled Instances with that schedule.
      */
    def describeScheduledInstanceAvailability(params: DescribeScheduledInstanceAvailabilityRequest): awsDashSdkLib.libRequestMod.Request[DescribeScheduledInstanceAvailabilityResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeScheduledInstanceAvailability(
      params: DescribeScheduledInstanceAvailabilityRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeScheduledInstanceAvailabilityResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeScheduledInstanceAvailabilityResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your Scheduled Instances.
      */
    def describeScheduledInstances(): awsDashSdkLib.libRequestMod.Request[DescribeScheduledInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeScheduledInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeScheduledInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeScheduledInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your Scheduled Instances.
      */
    def describeScheduledInstances(params: DescribeScheduledInstancesRequest): awsDashSdkLib.libRequestMod.Request[DescribeScheduledInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeScheduledInstances(
      params: DescribeScheduledInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeScheduledInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeScheduledInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * [EC2-VPC only] Describes the VPCs on the other side of a VPC peering connection that are referencing the security groups you've specified in this request.
      */
    def describeSecurityGroupReferences(): awsDashSdkLib.libRequestMod.Request[DescribeSecurityGroupReferencesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSecurityGroupReferences(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSecurityGroupReferencesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSecurityGroupReferencesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * [EC2-VPC only] Describes the VPCs on the other side of a VPC peering connection that are referencing the security groups you've specified in this request.
      */
    def describeSecurityGroupReferences(params: DescribeSecurityGroupReferencesRequest): awsDashSdkLib.libRequestMod.Request[DescribeSecurityGroupReferencesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSecurityGroupReferences(
      params: DescribeSecurityGroupReferencesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSecurityGroupReferencesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSecurityGroupReferencesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your security groups. A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see Amazon EC2 Security Groups in the Amazon Elastic Compute Cloud User Guide and Security Groups for Your VPC in the Amazon Virtual Private Cloud User Guide.
      */
    def describeSecurityGroups(): awsDashSdkLib.libRequestMod.Request[DescribeSecurityGroupsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSecurityGroups(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSecurityGroupsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSecurityGroupsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your security groups. A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see Amazon EC2 Security Groups in the Amazon Elastic Compute Cloud User Guide and Security Groups for Your VPC in the Amazon Virtual Private Cloud User Guide.
      */
    def describeSecurityGroups(params: DescribeSecurityGroupsRequest): awsDashSdkLib.libRequestMod.Request[DescribeSecurityGroupsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSecurityGroups(
      params: DescribeSecurityGroupsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSecurityGroupsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSecurityGroupsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time. For more information about EBS snapshots, see Amazon EBS Snapshots in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeSnapshotAttribute(): awsDashSdkLib.libRequestMod.Request[DescribeSnapshotAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSnapshotAttribute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSnapshotAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSnapshotAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time. For more information about EBS snapshots, see Amazon EBS Snapshots in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeSnapshotAttribute(params: DescribeSnapshotAttributeRequest): awsDashSdkLib.libRequestMod.Request[DescribeSnapshotAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSnapshotAttribute(
      params: DescribeSnapshotAttributeRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSnapshotAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSnapshotAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of the EBS snapshots available to you. Available snapshots include public snapshots available for any AWS account to launch, private snapshots that you own, and private snapshots owned by another AWS account but for which you've been given explicit create volume permissions. The create volume permissions fall into the following categories:    public: The owner of the snapshot granted create volume permissions for the snapshot to the all group. All AWS accounts have create volume permissions for these snapshots.    explicit: The owner of the snapshot granted create volume permissions to a specific AWS account.    implicit: An AWS account has implicit create volume permissions for all snapshots it owns.   The list of snapshots returned can be modified by specifying snapshot IDs, snapshot owners, or AWS accounts with create volume permissions. If no options are specified, Amazon EC2 returns all snapshots for which you have create volume permissions. If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results. If you specify one or more snapshot owners using the OwnerIds option, only snapshots from the specified owners and for which you have access are returned. The results can include the AWS account IDs of the specified owners, amazon for snapshots owned by Amazon, or self for snapshots that you own. If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify AWS account IDs (if you own the snapshots), self for snapshots for which you own or have explicit permissions, or all for public snapshots. If you are describing a long list of snapshots, you can paginate the output to make the list more manageable. The MaxResults parameter sets the maximum number of results returned in a single page. If the list of results exceeds your MaxResults value, then that number of results is returned along with a NextToken value that can be passed to a subsequent DescribeSnapshots request to retrieve the remaining results. For more information about EBS snapshots, see Amazon EBS Snapshots in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeSnapshots(): awsDashSdkLib.libRequestMod.Request[DescribeSnapshotsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSnapshots(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSnapshotsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSnapshotsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of the EBS snapshots available to you. Available snapshots include public snapshots available for any AWS account to launch, private snapshots that you own, and private snapshots owned by another AWS account but for which you've been given explicit create volume permissions. The create volume permissions fall into the following categories:    public: The owner of the snapshot granted create volume permissions for the snapshot to the all group. All AWS accounts have create volume permissions for these snapshots.    explicit: The owner of the snapshot granted create volume permissions to a specific AWS account.    implicit: An AWS account has implicit create volume permissions for all snapshots it owns.   The list of snapshots returned can be modified by specifying snapshot IDs, snapshot owners, or AWS accounts with create volume permissions. If no options are specified, Amazon EC2 returns all snapshots for which you have create volume permissions. If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results. If you specify one or more snapshot owners using the OwnerIds option, only snapshots from the specified owners and for which you have access are returned. The results can include the AWS account IDs of the specified owners, amazon for snapshots owned by Amazon, or self for snapshots that you own. If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify AWS account IDs (if you own the snapshots), self for snapshots for which you own or have explicit permissions, or all for public snapshots. If you are describing a long list of snapshots, you can paginate the output to make the list more manageable. The MaxResults parameter sets the maximum number of results returned in a single page. If the list of results exceeds your MaxResults value, then that number of results is returned along with a NextToken value that can be passed to a subsequent DescribeSnapshots request to retrieve the remaining results. For more information about EBS snapshots, see Amazon EBS Snapshots in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeSnapshots(params: DescribeSnapshotsRequest): awsDashSdkLib.libRequestMod.Request[DescribeSnapshotsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSnapshots(
      params: DescribeSnapshotsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSnapshotsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSnapshotsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the data feed for Spot Instances. For more information, see Spot Instance Data Feed in the Amazon EC2 User Guide for Linux Instances.
      */
    def describeSpotDatafeedSubscription(): awsDashSdkLib.libRequestMod.Request[DescribeSpotDatafeedSubscriptionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSpotDatafeedSubscription(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotDatafeedSubscriptionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotDatafeedSubscriptionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the data feed for Spot Instances. For more information, see Spot Instance Data Feed in the Amazon EC2 User Guide for Linux Instances.
      */
    def describeSpotDatafeedSubscription(params: DescribeSpotDatafeedSubscriptionRequest): awsDashSdkLib.libRequestMod.Request[DescribeSpotDatafeedSubscriptionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSpotDatafeedSubscription(
      params: DescribeSpotDatafeedSubscriptionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotDatafeedSubscriptionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotDatafeedSubscriptionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the running instances for the specified Spot Fleet.
      */
    def describeSpotFleetInstances(): awsDashSdkLib.libRequestMod.Request[DescribeSpotFleetInstancesResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSpotFleetInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotFleetInstancesResponse, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotFleetInstancesResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the running instances for the specified Spot Fleet.
      */
    def describeSpotFleetInstances(params: DescribeSpotFleetInstancesRequest): awsDashSdkLib.libRequestMod.Request[DescribeSpotFleetInstancesResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSpotFleetInstances(
      params: DescribeSpotFleetInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotFleetInstancesResponse, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotFleetInstancesResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the events for the specified Spot Fleet request during the specified time. Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours.
      */
    def describeSpotFleetRequestHistory(): awsDashSdkLib.libRequestMod.Request[DescribeSpotFleetRequestHistoryResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSpotFleetRequestHistory(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotFleetRequestHistoryResponse, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotFleetRequestHistoryResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the events for the specified Spot Fleet request during the specified time. Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours.
      */
    def describeSpotFleetRequestHistory(params: DescribeSpotFleetRequestHistoryRequest): awsDashSdkLib.libRequestMod.Request[DescribeSpotFleetRequestHistoryResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSpotFleetRequestHistory(
      params: DescribeSpotFleetRequestHistoryRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotFleetRequestHistoryResponse, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotFleetRequestHistoryResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes your Spot Fleet requests. Spot Fleet requests are deleted 48 hours after they are canceled and their instances are terminated.
      */
    def describeSpotFleetRequests(): awsDashSdkLib.libRequestMod.Request[DescribeSpotFleetRequestsResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSpotFleetRequests(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotFleetRequestsResponse, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotFleetRequestsResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes your Spot Fleet requests. Spot Fleet requests are deleted 48 hours after they are canceled and their instances are terminated.
      */
    def describeSpotFleetRequests(params: DescribeSpotFleetRequestsRequest): awsDashSdkLib.libRequestMod.Request[DescribeSpotFleetRequestsResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSpotFleetRequests(
      params: DescribeSpotFleetRequestsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotFleetRequestsResponse, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotFleetRequestsResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified Spot Instance requests. You can use DescribeSpotInstanceRequests to find a running Spot Instance by examining the response. If the status of the Spot Instance is fulfilled, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use DescribeInstances with a filter to look for instances where the instance lifecycle is spot. We recommend that you set MaxResults to a value between 5 and 1000 to limit the number of results returned. This paginates the output, which makes the list more manageable and returns the results faster. If the list of results exceeds your MaxResults value, then that number of results is returned along with a NextToken value that can be passed to a subsequent DescribeSpotInstanceRequests request to retrieve the remaining results. Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.
      */
    def describeSpotInstanceRequests(): awsDashSdkLib.libRequestMod.Request[DescribeSpotInstanceRequestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSpotInstanceRequests(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotInstanceRequestsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotInstanceRequestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified Spot Instance requests. You can use DescribeSpotInstanceRequests to find a running Spot Instance by examining the response. If the status of the Spot Instance is fulfilled, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use DescribeInstances with a filter to look for instances where the instance lifecycle is spot. We recommend that you set MaxResults to a value between 5 and 1000 to limit the number of results returned. This paginates the output, which makes the list more manageable and returns the results faster. If the list of results exceeds your MaxResults value, then that number of results is returned along with a NextToken value that can be passed to a subsequent DescribeSpotInstanceRequests request to retrieve the remaining results. Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.
      */
    def describeSpotInstanceRequests(params: DescribeSpotInstanceRequestsRequest): awsDashSdkLib.libRequestMod.Request[DescribeSpotInstanceRequestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSpotInstanceRequests(
      params: DescribeSpotInstanceRequestsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotInstanceRequestsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotInstanceRequestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the Spot price history. For more information, see Spot Instance Pricing History in the Amazon EC2 User Guide for Linux Instances. When you specify a start and end time, this operation returns the prices of the instance types within the time range that you specified and the time when the price changed. The price is valid within the time period that you specified; the response merely indicates the last time that the price changed.
      */
    def describeSpotPriceHistory(): awsDashSdkLib.libRequestMod.Request[DescribeSpotPriceHistoryResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSpotPriceHistory(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotPriceHistoryResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotPriceHistoryResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the Spot price history. For more information, see Spot Instance Pricing History in the Amazon EC2 User Guide for Linux Instances. When you specify a start and end time, this operation returns the prices of the instance types within the time range that you specified and the time when the price changed. The price is valid within the time period that you specified; the response merely indicates the last time that the price changed.
      */
    def describeSpotPriceHistory(params: DescribeSpotPriceHistoryRequest): awsDashSdkLib.libRequestMod.Request[DescribeSpotPriceHistoryResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSpotPriceHistory(
      params: DescribeSpotPriceHistoryRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotPriceHistoryResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotPriceHistoryResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * [EC2-VPC only] Describes the stale security group rules for security groups in a specified VPC. Rules are stale when they reference a deleted security group in a peer VPC, or a security group in a peer VPC for which the VPC peering connection has been deleted.
      */
    def describeStaleSecurityGroups(): awsDashSdkLib.libRequestMod.Request[DescribeStaleSecurityGroupsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeStaleSecurityGroups(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeStaleSecurityGroupsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeStaleSecurityGroupsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * [EC2-VPC only] Describes the stale security group rules for security groups in a specified VPC. Rules are stale when they reference a deleted security group in a peer VPC, or a security group in a peer VPC for which the VPC peering connection has been deleted.
      */
    def describeStaleSecurityGroups(params: DescribeStaleSecurityGroupsRequest): awsDashSdkLib.libRequestMod.Request[DescribeStaleSecurityGroupsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeStaleSecurityGroups(
      params: DescribeStaleSecurityGroupsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeStaleSecurityGroupsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeStaleSecurityGroupsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your subnets. For more information, see Your VPC and Subnets in the Amazon Virtual Private Cloud User Guide.
      */
    def describeSubnets(): awsDashSdkLib.libRequestMod.Request[DescribeSubnetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSubnets(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSubnetsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSubnetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your subnets. For more information, see Your VPC and Subnets in the Amazon Virtual Private Cloud User Guide.
      */
    def describeSubnets(params: DescribeSubnetsRequest): awsDashSdkLib.libRequestMod.Request[DescribeSubnetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeSubnets(
      params: DescribeSubnetsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSubnetsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSubnetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of the tags for your EC2 resources. For more information about tags, see Tagging Your Resources in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeTags(): awsDashSdkLib.libRequestMod.Request[DescribeTagsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeTags(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeTagsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeTagsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of the tags for your EC2 resources. For more information about tags, see Tagging Your Resources in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeTags(params: DescribeTagsRequest): awsDashSdkLib.libRequestMod.Request[DescribeTagsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeTags(
      params: DescribeTagsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeTagsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeTagsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more attachments between resources and transit gateways. By default, all attachments are described. Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.
      */
    def describeTransitGatewayAttachments(): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewayAttachmentsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeTransitGatewayAttachments(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeTransitGatewayAttachmentsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewayAttachmentsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more attachments between resources and transit gateways. By default, all attachments are described. Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.
      */
    def describeTransitGatewayAttachments(params: DescribeTransitGatewayAttachmentsRequest): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewayAttachmentsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeTransitGatewayAttachments(
      params: DescribeTransitGatewayAttachmentsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeTransitGatewayAttachmentsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewayAttachmentsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more transit gateway route tables. By default, all transit gateway route tables are described. Alternatively, you can filter the results.
      */
    def describeTransitGatewayRouteTables(): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewayRouteTablesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeTransitGatewayRouteTables(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeTransitGatewayRouteTablesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewayRouteTablesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more transit gateway route tables. By default, all transit gateway route tables are described. Alternatively, you can filter the results.
      */
    def describeTransitGatewayRouteTables(params: DescribeTransitGatewayRouteTablesRequest): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewayRouteTablesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeTransitGatewayRouteTables(
      params: DescribeTransitGatewayRouteTablesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeTransitGatewayRouteTablesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewayRouteTablesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more VPC attachments. By default, all VPC attachments are described. Alternatively, you can filter the results.
      */
    def describeTransitGatewayVpcAttachments(): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewayVpcAttachmentsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeTransitGatewayVpcAttachments(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeTransitGatewayVpcAttachmentsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewayVpcAttachmentsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more VPC attachments. By default, all VPC attachments are described. Alternatively, you can filter the results.
      */
    def describeTransitGatewayVpcAttachments(params: DescribeTransitGatewayVpcAttachmentsRequest): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewayVpcAttachmentsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeTransitGatewayVpcAttachments(
      params: DescribeTransitGatewayVpcAttachmentsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeTransitGatewayVpcAttachmentsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewayVpcAttachmentsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can filter the results.
      */
    def describeTransitGateways(): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeTransitGateways(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeTransitGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can filter the results.
      */
    def describeTransitGateways(params: DescribeTransitGatewaysRequest): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeTransitGateways(
      params: DescribeTransitGatewaysRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeTransitGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeTransitGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified attribute of the specified volume. You can specify only one attribute at a time. For more information about EBS volumes, see Amazon EBS Volumes in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeVolumeAttribute(): awsDashSdkLib.libRequestMod.Request[DescribeVolumeAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVolumeAttribute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumeAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumeAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified attribute of the specified volume. You can specify only one attribute at a time. For more information about EBS volumes, see Amazon EBS Volumes in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeVolumeAttribute(params: DescribeVolumeAttributeRequest): awsDashSdkLib.libRequestMod.Request[DescribeVolumeAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVolumeAttribute(
      params: DescribeVolumeAttributeRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumeAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumeAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume's underlying host. If the volume's underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event. The DescribeVolumeStatus operation provides the following information about the specified volumes:  Status: Reflects the current status of the volume. The possible values are ok, impaired , warning, or insufficient-data. If all checks pass, the overall status of the volume is ok. If the check fails, the overall status is impaired. If the status is insufficient-data, then the checks may still be taking place on your volume at the time. We recommend that you retry the request. For more information about volume status, see Monitoring the Status of Your Volumes in the Amazon Elastic Compute Cloud User Guide.  Events: Reflect the cause of a volume status and may require you to take action. For example, if your volume returns an impaired status, then the volume event might be potential-data-inconsistency. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and may have inconsistent data.  Actions: Reflect the actions you may have to take in response to an event. For example, if the status of the volume is impaired and the volume event shows potential-data-inconsistency, then the action shows enable-volume-io. This means that you may want to enable the I/O operations for the volume by calling the EnableVolumeIO action and then check the volume for data consistency. Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the error state (for example, when a volume is incapable of accepting I/O.)
      */
    def describeVolumeStatus(): awsDashSdkLib.libRequestMod.Request[DescribeVolumeStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVolumeStatus(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumeStatusResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumeStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume's underlying host. If the volume's underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event. The DescribeVolumeStatus operation provides the following information about the specified volumes:  Status: Reflects the current status of the volume. The possible values are ok, impaired , warning, or insufficient-data. If all checks pass, the overall status of the volume is ok. If the check fails, the overall status is impaired. If the status is insufficient-data, then the checks may still be taking place on your volume at the time. We recommend that you retry the request. For more information about volume status, see Monitoring the Status of Your Volumes in the Amazon Elastic Compute Cloud User Guide.  Events: Reflect the cause of a volume status and may require you to take action. For example, if your volume returns an impaired status, then the volume event might be potential-data-inconsistency. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and may have inconsistent data.  Actions: Reflect the actions you may have to take in response to an event. For example, if the status of the volume is impaired and the volume event shows potential-data-inconsistency, then the action shows enable-volume-io. This means that you may want to enable the I/O operations for the volume by calling the EnableVolumeIO action and then check the volume for data consistency. Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the error state (for example, when a volume is incapable of accepting I/O.)
      */
    def describeVolumeStatus(params: DescribeVolumeStatusRequest): awsDashSdkLib.libRequestMod.Request[DescribeVolumeStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVolumeStatus(
      params: DescribeVolumeStatusRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumeStatusResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumeStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified EBS volumes. If you are describing a long list of volumes, you can paginate the output to make the list more manageable. The MaxResults parameter sets the maximum number of results returned in a single page. If the list of results exceeds your MaxResults value, then that number of results is returned along with a NextToken value that can be passed to a subsequent DescribeVolumes request to retrieve the remaining results. For more information about EBS volumes, see Amazon EBS Volumes in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeVolumes(): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVolumes(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified EBS volumes. If you are describing a long list of volumes, you can paginate the output to make the list more manageable. The MaxResults parameter sets the maximum number of results returned in a single page. If the list of results exceeds your MaxResults value, then that number of results is returned along with a NextToken value that can be passed to a subsequent DescribeVolumes request to retrieve the remaining results. For more information about EBS volumes, see Amazon EBS Volumes in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeVolumes(params: DescribeVolumesRequest): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVolumes(
      params: DescribeVolumesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Reports the current modification status of EBS volumes. Current-generation EBS volumes support modification of attributes including type, size, and (for io1 volumes) IOPS provisioning while either attached to or detached from an instance. Following an action from the API or the console to modify a volume, the status of the modification may be modifying, optimizing, completed, or failed. If a volume has never been modified, then certain elements of the returned VolumeModification objects are null.   You can also use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the Amazon CloudWatch Events User Guide. For more information, see Monitoring Volume Modifications" in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeVolumesModifications(): awsDashSdkLib.libRequestMod.Request[DescribeVolumesModificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVolumesModifications(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumesModificationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumesModificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Reports the current modification status of EBS volumes. Current-generation EBS volumes support modification of attributes including type, size, and (for io1 volumes) IOPS provisioning while either attached to or detached from an instance. Following an action from the API or the console to modify a volume, the status of the modification may be modifying, optimizing, completed, or failed. If a volume has never been modified, then certain elements of the returned VolumeModification objects are null.   You can also use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the Amazon CloudWatch Events User Guide. For more information, see Monitoring Volume Modifications" in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeVolumesModifications(params: DescribeVolumesModificationsRequest): awsDashSdkLib.libRequestMod.Request[DescribeVolumesModificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVolumesModifications(
      params: DescribeVolumesModificationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumesModificationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumesModificationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.
      */
    def describeVpcAttribute(): awsDashSdkLib.libRequestMod.Request[DescribeVpcAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcAttribute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.
      */
    def describeVpcAttribute(params: DescribeVpcAttributeRequest): awsDashSdkLib.libRequestMod.Request[DescribeVpcAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcAttribute(
      params: DescribeVpcAttributeRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the ClassicLink status of one or more VPCs.
      */
    def describeVpcClassicLink(): awsDashSdkLib.libRequestMod.Request[DescribeVpcClassicLinkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcClassicLink(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcClassicLinkResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcClassicLinkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the ClassicLink status of one or more VPCs.
      */
    def describeVpcClassicLink(params: DescribeVpcClassicLinkRequest): awsDashSdkLib.libRequestMod.Request[DescribeVpcClassicLinkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcClassicLink(
      params: DescribeVpcClassicLinkRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcClassicLinkResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcClassicLinkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeVpcClassicLinkDnsSupport(): awsDashSdkLib.libRequestMod.Request[DescribeVpcClassicLinkDnsSupportResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcClassicLinkDnsSupport(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcClassicLinkDnsSupportResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcClassicLinkDnsSupportResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
      */
    def describeVpcClassicLinkDnsSupport(params: DescribeVpcClassicLinkDnsSupportRequest): awsDashSdkLib.libRequestMod.Request[DescribeVpcClassicLinkDnsSupportResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcClassicLinkDnsSupport(
      params: DescribeVpcClassicLinkDnsSupportRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcClassicLinkDnsSupportResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcClassicLinkDnsSupportResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the connection notifications for VPC endpoints and VPC endpoint services.
      */
    def describeVpcEndpointConnectionNotifications(): awsDashSdkLib.libRequestMod.Request[
        DescribeVpcEndpointConnectionNotificationsResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def describeVpcEndpointConnectionNotifications(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcEndpointConnectionNotificationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        DescribeVpcEndpointConnectionNotificationsResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Describes the connection notifications for VPC endpoints and VPC endpoint services.
      */
    def describeVpcEndpointConnectionNotifications(params: DescribeVpcEndpointConnectionNotificationsRequest): awsDashSdkLib.libRequestMod.Request[
        DescribeVpcEndpointConnectionNotificationsResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def describeVpcEndpointConnectionNotifications(
      params: DescribeVpcEndpointConnectionNotificationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcEndpointConnectionNotificationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        DescribeVpcEndpointConnectionNotificationsResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Describes the VPC endpoint connections to your VPC endpoint services, including any endpoints that are pending your acceptance.
      */
    def describeVpcEndpointConnections(): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcEndpointConnections(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcEndpointConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the VPC endpoint connections to your VPC endpoint services, including any endpoints that are pending your acceptance.
      */
    def describeVpcEndpointConnections(params: DescribeVpcEndpointConnectionsRequest): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcEndpointConnections(
      params: DescribeVpcEndpointConnectionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcEndpointConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the VPC endpoint service configurations in your account (your services).
      */
    def describeVpcEndpointServiceConfigurations(): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointServiceConfigurationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcEndpointServiceConfigurations(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcEndpointServiceConfigurationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointServiceConfigurationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the VPC endpoint service configurations in your account (your services).
      */
    def describeVpcEndpointServiceConfigurations(params: DescribeVpcEndpointServiceConfigurationsRequest): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointServiceConfigurationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcEndpointServiceConfigurations(
      params: DescribeVpcEndpointServiceConfigurationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcEndpointServiceConfigurationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointServiceConfigurationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the principals (service consumers) that are permitted to discover your VPC endpoint service.
      */
    def describeVpcEndpointServicePermissions(): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointServicePermissionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcEndpointServicePermissions(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcEndpointServicePermissionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointServicePermissionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes the principals (service consumers) that are permitted to discover your VPC endpoint service.
      */
    def describeVpcEndpointServicePermissions(params: DescribeVpcEndpointServicePermissionsRequest): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointServicePermissionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcEndpointServicePermissions(
      params: DescribeVpcEndpointServicePermissionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcEndpointServicePermissionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointServicePermissionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes available services to which you can create a VPC endpoint.
      */
    def describeVpcEndpointServices(): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointServicesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcEndpointServices(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcEndpointServicesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointServicesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes available services to which you can create a VPC endpoint.
      */
    def describeVpcEndpointServices(params: DescribeVpcEndpointServicesRequest): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointServicesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcEndpointServices(
      params: DescribeVpcEndpointServicesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcEndpointServicesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointServicesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your VPC endpoints.
      */
    def describeVpcEndpoints(): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcEndpoints(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcEndpointsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your VPC endpoints.
      */
    def describeVpcEndpoints(params: DescribeVpcEndpointsRequest): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcEndpoints(
      params: DescribeVpcEndpointsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcEndpointsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcEndpointsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your VPC peering connections.
      */
    def describeVpcPeeringConnections(): awsDashSdkLib.libRequestMod.Request[DescribeVpcPeeringConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcPeeringConnections(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcPeeringConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcPeeringConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your VPC peering connections.
      */
    def describeVpcPeeringConnections(params: DescribeVpcPeeringConnectionsRequest): awsDashSdkLib.libRequestMod.Request[DescribeVpcPeeringConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcPeeringConnections(
      params: DescribeVpcPeeringConnectionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcPeeringConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcPeeringConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your VPCs.
      */
    def describeVpcs(): awsDashSdkLib.libRequestMod.Request[DescribeVpcsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcs(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your VPCs.
      */
    def describeVpcs(params: DescribeVpcsRequest): awsDashSdkLib.libRequestMod.Request[DescribeVpcsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpcs(
      params: DescribeVpcsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your VPN connections. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def describeVpnConnections(): awsDashSdkLib.libRequestMod.Request[DescribeVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpnConnections(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpnConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your VPN connections. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def describeVpnConnections(params: DescribeVpnConnectionsRequest): awsDashSdkLib.libRequestMod.Request[DescribeVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpnConnections(
      params: DescribeVpnConnectionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpnConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your virtual private gateways. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def describeVpnGateways(): awsDashSdkLib.libRequestMod.Request[DescribeVpnGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpnGateways(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpnGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpnGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Describes one or more of your virtual private gateways. For more information, see AWS Site-to-Site VPN in the AWS Site-to-Site VPN User Guide.
      */
    def describeVpnGateways(params: DescribeVpnGatewaysRequest): awsDashSdkLib.libRequestMod.Request[DescribeVpnGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def describeVpnGateways(
      params: DescribeVpnGatewaysRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpnGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpnGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it's stopped.
      */
    def detachClassicLinkVpc(): awsDashSdkLib.libRequestMod.Request[DetachClassicLinkVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def detachClassicLinkVpc(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DetachClassicLinkVpcResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DetachClassicLinkVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it's stopped.
      */
    def detachClassicLinkVpc(params: DetachClassicLinkVpcRequest): awsDashSdkLib.libRequestMod.Request[DetachClassicLinkVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def detachClassicLinkVpc(
      params: DetachClassicLinkVpcRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DetachClassicLinkVpcResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DetachClassicLinkVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Detaches an internet gateway from a VPC, disabling connectivity between the internet and the VPC. The VPC must not contain any running instances with Elastic IP addresses or public IPv4 addresses.
      */
    def detachInternetGateway(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def detachInternetGateway(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Detaches an internet gateway from a VPC, disabling connectivity between the internet and the VPC. The VPC must not contain any running instances with Elastic IP addresses or public IPv4 addresses.
      */
    def detachInternetGateway(params: DetachInternetGatewayRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def detachInternetGateway(
      params: DetachInternetGatewayRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Detaches a network interface from an instance.
      */
    def detachNetworkInterface(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def detachNetworkInterface(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Detaches a network interface from an instance.
      */
    def detachNetworkInterface(params: DetachNetworkInterfaceRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def detachNetworkInterface(
      params: DetachNetworkInterfaceRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the busy state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can't be detached while the instance is running. To detach the root volume, stop the instance first. When a volume with an AWS Marketplace product code is detached from an instance, the product code is no longer associated with the instance. For more information, see Detaching an Amazon EBS Volume in the Amazon Elastic Compute Cloud User Guide.
      */
    def detachVolume(): awsDashSdkLib.libRequestMod.Request[VolumeAttachment, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def detachVolume(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ VolumeAttachment, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[VolumeAttachment, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the busy state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can't be detached while the instance is running. To detach the root volume, stop the instance first. When a volume with an AWS Marketplace product code is detached from an instance, the product code is no longer associated with the instance. For more information, see Detaching an Amazon EBS Volume in the Amazon Elastic Compute Cloud User Guide.
      */
    def detachVolume(params: DetachVolumeRequest): awsDashSdkLib.libRequestMod.Request[VolumeAttachment, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def detachVolume(
      params: DetachVolumeRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ VolumeAttachment, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[VolumeAttachment, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Detaches a virtual private gateway from a VPC. You do this if you're planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described). You must wait for the attachment's state to switch to detached before you can delete the VPC or attach a different VPC to the virtual private gateway.
      */
    def detachVpnGateway(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def detachVpnGateway(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Detaches a virtual private gateway from a VPC. You do this if you're planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described). You must wait for the attachment's state to switch to detached before you can delete the VPC or attach a different VPC to the virtual private gateway.
      */
    def detachVpnGateway(params: DetachVpnGatewayRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def detachVpnGateway(
      params: DetachVpnGatewayRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disables the specified resource attachment from propagating routes to the specified propagation route table.
      */
    def disableTransitGatewayRouteTablePropagation(): awsDashSdkLib.libRequestMod.Request[
        DisableTransitGatewayRouteTablePropagationResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def disableTransitGatewayRouteTablePropagation(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisableTransitGatewayRouteTablePropagationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        DisableTransitGatewayRouteTablePropagationResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Disables the specified resource attachment from propagating routes to the specified propagation route table.
      */
    def disableTransitGatewayRouteTablePropagation(params: DisableTransitGatewayRouteTablePropagationRequest): awsDashSdkLib.libRequestMod.Request[
        DisableTransitGatewayRouteTablePropagationResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def disableTransitGatewayRouteTablePropagation(
      params: DisableTransitGatewayRouteTablePropagationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisableTransitGatewayRouteTablePropagationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        DisableTransitGatewayRouteTablePropagationResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.
      */
    def disableVgwRoutePropagation(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disableVgwRoutePropagation(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.
      */
    def disableVgwRoutePropagation(params: DisableVgwRoutePropagationRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disableVgwRoutePropagation(
      params: DisableVgwRoutePropagationRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.
      */
    def disableVpcClassicLink(): awsDashSdkLib.libRequestMod.Request[DisableVpcClassicLinkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disableVpcClassicLink(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisableVpcClassicLinkResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisableVpcClassicLinkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.
      */
    def disableVpcClassicLink(params: DisableVpcClassicLinkRequest): awsDashSdkLib.libRequestMod.Request[DisableVpcClassicLinkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disableVpcClassicLink(
      params: DisableVpcClassicLinkRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisableVpcClassicLinkResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisableVpcClassicLinkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to public IP addresses when addressed between a linked EC2-Classic instance and instances in the VPC to which it's linked. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
      */
    def disableVpcClassicLinkDnsSupport(): awsDashSdkLib.libRequestMod.Request[DisableVpcClassicLinkDnsSupportResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disableVpcClassicLinkDnsSupport(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisableVpcClassicLinkDnsSupportResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisableVpcClassicLinkDnsSupportResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to public IP addresses when addressed between a linked EC2-Classic instance and instances in the VPC to which it's linked. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
      */
    def disableVpcClassicLinkDnsSupport(params: DisableVpcClassicLinkDnsSupportRequest): awsDashSdkLib.libRequestMod.Request[DisableVpcClassicLinkDnsSupportResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disableVpcClassicLinkDnsSupport(
      params: DisableVpcClassicLinkDnsSupportRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisableVpcClassicLinkDnsSupportResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisableVpcClassicLinkDnsSupportResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates an Elastic IP address from the instance or network interface it's associated with. An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see Elastic IP Addresses in the Amazon Elastic Compute Cloud User Guide. This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.
      */
    def disassociateAddress(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateAddress(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates an Elastic IP address from the instance or network interface it's associated with. An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see Elastic IP Addresses in the Amazon Elastic Compute Cloud User Guide. This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.
      */
    def disassociateAddress(params: DisassociateAddressRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateAddress(
      params: DisassociateAddressRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates a target network from the specified Client VPN endpoint. When you disassociate the last target network from a Client VPN, the following happens:   The route that was automatically added for the VPC is deleted   All active client connections are terminated   New client connections are disallowed   The Client VPN endpoint's status changes to pending-associate   
      */
    def disassociateClientVpnTargetNetwork(): awsDashSdkLib.libRequestMod.Request[DisassociateClientVpnTargetNetworkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateClientVpnTargetNetwork(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisassociateClientVpnTargetNetworkResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisassociateClientVpnTargetNetworkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates a target network from the specified Client VPN endpoint. When you disassociate the last target network from a Client VPN, the following happens:   The route that was automatically added for the VPC is deleted   All active client connections are terminated   New client connections are disallowed   The Client VPN endpoint's status changes to pending-associate   
      */
    def disassociateClientVpnTargetNetwork(params: DisassociateClientVpnTargetNetworkRequest): awsDashSdkLib.libRequestMod.Request[DisassociateClientVpnTargetNetworkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateClientVpnTargetNetwork(
      params: DisassociateClientVpnTargetNetworkRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisassociateClientVpnTargetNetworkResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisassociateClientVpnTargetNetworkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates an IAM instance profile from a running or stopped instance. Use DescribeIamInstanceProfileAssociations to get the association ID.
      */
    def disassociateIamInstanceProfile(): awsDashSdkLib.libRequestMod.Request[DisassociateIamInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateIamInstanceProfile(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisassociateIamInstanceProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisassociateIamInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates an IAM instance profile from a running or stopped instance. Use DescribeIamInstanceProfileAssociations to get the association ID.
      */
    def disassociateIamInstanceProfile(params: DisassociateIamInstanceProfileRequest): awsDashSdkLib.libRequestMod.Request[DisassociateIamInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateIamInstanceProfile(
      params: DisassociateIamInstanceProfileRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisassociateIamInstanceProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisassociateIamInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates a subnet from a route table. After you perform this action, the subnet no longer uses the routes in the route table. Instead, it uses the routes in the VPC's main route table. For more information about route tables, see Route Tables in the Amazon Virtual Private Cloud User Guide.
      */
    def disassociateRouteTable(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateRouteTable(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates a subnet from a route table. After you perform this action, the subnet no longer uses the routes in the route table. Instead, it uses the routes in the VPC's main route table. For more information about route tables, see Route Tables in the Amazon Virtual Private Cloud User Guide.
      */
    def disassociateRouteTable(params: DisassociateRouteTableRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateRouteTable(
      params: DisassociateRouteTableRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. 
      */
    def disassociateSubnetCidrBlock(): awsDashSdkLib.libRequestMod.Request[DisassociateSubnetCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateSubnetCidrBlock(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisassociateSubnetCidrBlockResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisassociateSubnetCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. 
      */
    def disassociateSubnetCidrBlock(params: DisassociateSubnetCidrBlockRequest): awsDashSdkLib.libRequestMod.Request[DisassociateSubnetCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateSubnetCidrBlock(
      params: DisassociateSubnetCidrBlockRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisassociateSubnetCidrBlockResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisassociateSubnetCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates a resource attachment from a transit gateway route table.
      */
    def disassociateTransitGatewayRouteTable(): awsDashSdkLib.libRequestMod.Request[DisassociateTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateTransitGatewayRouteTable(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisassociateTransitGatewayRouteTableResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisassociateTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates a resource attachment from a transit gateway route table.
      */
    def disassociateTransitGatewayRouteTable(params: DisassociateTransitGatewayRouteTableRequest): awsDashSdkLib.libRequestMod.Request[DisassociateTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateTransitGatewayRouteTable(
      params: DisassociateTransitGatewayRouteTableRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisassociateTransitGatewayRouteTableResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisassociateTransitGatewayRouteTableResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must specify its association ID. You can get the association ID by using DescribeVpcs. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it.  You cannot disassociate the CIDR block with which you originally created the VPC (the primary CIDR block).
      */
    def disassociateVpcCidrBlock(): awsDashSdkLib.libRequestMod.Request[DisassociateVpcCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateVpcCidrBlock(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisassociateVpcCidrBlockResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisassociateVpcCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must specify its association ID. You can get the association ID by using DescribeVpcs. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it.  You cannot disassociate the CIDR block with which you originally created the VPC (the primary CIDR block).
      */
    def disassociateVpcCidrBlock(params: DisassociateVpcCidrBlockRequest): awsDashSdkLib.libRequestMod.Request[DisassociateVpcCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def disassociateVpcCidrBlock(
      params: DisassociateVpcCidrBlockRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DisassociateVpcCidrBlockResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DisassociateVpcCidrBlockResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Enables the specified attachment to propagate routes to the specified propagation route table.
      */
    def enableTransitGatewayRouteTablePropagation(): awsDashSdkLib.libRequestMod.Request[
        EnableTransitGatewayRouteTablePropagationResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def enableTransitGatewayRouteTablePropagation(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ EnableTransitGatewayRouteTablePropagationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        EnableTransitGatewayRouteTablePropagationResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Enables the specified attachment to propagate routes to the specified propagation route table.
      */
    def enableTransitGatewayRouteTablePropagation(params: EnableTransitGatewayRouteTablePropagationRequest): awsDashSdkLib.libRequestMod.Request[
        EnableTransitGatewayRouteTablePropagationResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def enableTransitGatewayRouteTablePropagation(
      params: EnableTransitGatewayRouteTablePropagationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ EnableTransitGatewayRouteTablePropagationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        EnableTransitGatewayRouteTablePropagationResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.
      */
    def enableVgwRoutePropagation(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def enableVgwRoutePropagation(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.
      */
    def enableVgwRoutePropagation(params: EnableVgwRoutePropagationRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def enableVgwRoutePropagation(
      params: EnableVgwRoutePropagationRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.
      */
    def enableVolumeIO(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def enableVolumeIO(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.
      */
    def enableVolumeIO(params: EnableVolumeIORequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def enableVolumeIO(
      params: EnableVolumeIORequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot enable your VPC for ClassicLink if any of your VPC route tables have existing routes for address ranges within the 10.0.0.0/8 IP address range, excluding local routes for VPCs in the 10.0.0.0/16 and 10.1.0.0/16 IP address ranges. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
      */
    def enableVpcClassicLink(): awsDashSdkLib.libRequestMod.Request[EnableVpcClassicLinkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def enableVpcClassicLink(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ EnableVpcClassicLinkResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[EnableVpcClassicLinkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot enable your VPC for ClassicLink if any of your VPC route tables have existing routes for address ranges within the 10.0.0.0/8 IP address range, excluding local routes for VPCs in the 10.0.0.0/16 and 10.1.0.0/16 IP address ranges. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
      */
    def enableVpcClassicLink(params: EnableVpcClassicLinkRequest): awsDashSdkLib.libRequestMod.Request[EnableVpcClassicLinkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def enableVpcClassicLink(
      params: EnableVpcClassicLinkRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ EnableVpcClassicLinkResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[EnableVpcClassicLinkResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
      */
    def enableVpcClassicLinkDnsSupport(): awsDashSdkLib.libRequestMod.Request[EnableVpcClassicLinkDnsSupportResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def enableVpcClassicLinkDnsSupport(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ EnableVpcClassicLinkDnsSupportResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[EnableVpcClassicLinkDnsSupportResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
      */
    def enableVpcClassicLinkDnsSupport(params: EnableVpcClassicLinkDnsSupportRequest): awsDashSdkLib.libRequestMod.Request[EnableVpcClassicLinkDnsSupportResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def enableVpcClassicLinkDnsSupport(
      params: EnableVpcClassicLinkDnsSupportRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ EnableVpcClassicLinkDnsSupportResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[EnableVpcClassicLinkDnsSupportResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Downloads the client certificate revocation list for the specified Client VPN endpoint.
      */
    def exportClientVpnClientCertificateRevocationList(): awsDashSdkLib.libRequestMod.Request[
        ExportClientVpnClientCertificateRevocationListResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def exportClientVpnClientCertificateRevocationList(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ExportClientVpnClientCertificateRevocationListResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        ExportClientVpnClientCertificateRevocationListResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Downloads the client certificate revocation list for the specified Client VPN endpoint.
      */
    def exportClientVpnClientCertificateRevocationList(params: ExportClientVpnClientCertificateRevocationListRequest): awsDashSdkLib.libRequestMod.Request[
        ExportClientVpnClientCertificateRevocationListResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def exportClientVpnClientCertificateRevocationList(
      params: ExportClientVpnClientCertificateRevocationListRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ExportClientVpnClientCertificateRevocationListResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        ExportClientVpnClientCertificateRevocationListResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration file includes the Client VPN endpoint and certificate information clients need to establish a connection with the Client VPN endpoint.
      */
    def exportClientVpnClientConfiguration(): awsDashSdkLib.libRequestMod.Request[ExportClientVpnClientConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def exportClientVpnClientConfiguration(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ExportClientVpnClientConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ExportClientVpnClientConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration file includes the Client VPN endpoint and certificate information clients need to establish a connection with the Client VPN endpoint.
      */
    def exportClientVpnClientConfiguration(params: ExportClientVpnClientConfigurationRequest): awsDashSdkLib.libRequestMod.Request[ExportClientVpnClientConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def exportClientVpnClientConfiguration(
      params: ExportClientVpnClientConfigurationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ExportClientVpnClientConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ExportClientVpnClientConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range.
      */
    def exportTransitGatewayRoutes(): awsDashSdkLib.libRequestMod.Request[ExportTransitGatewayRoutesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def exportTransitGatewayRoutes(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ExportTransitGatewayRoutesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ExportTransitGatewayRoutesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range.
      */
    def exportTransitGatewayRoutes(params: ExportTransitGatewayRoutesRequest): awsDashSdkLib.libRequestMod.Request[ExportTransitGatewayRoutesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def exportTransitGatewayRoutes(
      params: ExportTransitGatewayRoutesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ExportTransitGatewayRoutesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ExportTransitGatewayRoutesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets the console output for the specified instance. For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. For Windows instances, the instance console output includes the last three system event log errors. By default, the console output returns buffered information that was posted shortly after an instance transition state (start, stop, reboot, or terminate). This information is available for at least one hour after the most recent post. Only the most recent 64 KB of console output is available. You can optionally retrieve the latest serial console output at any time during the instance lifecycle. This option is supported on instance types that use the Nitro hypervisor. For more information, see Instance Console Output in the Amazon Elastic Compute Cloud User Guide.
      */
    def getConsoleOutput(): awsDashSdkLib.libRequestMod.Request[GetConsoleOutputResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getConsoleOutput(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetConsoleOutputResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetConsoleOutputResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets the console output for the specified instance. For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. For Windows instances, the instance console output includes the last three system event log errors. By default, the console output returns buffered information that was posted shortly after an instance transition state (start, stop, reboot, or terminate). This information is available for at least one hour after the most recent post. Only the most recent 64 KB of console output is available. You can optionally retrieve the latest serial console output at any time during the instance lifecycle. This option is supported on instance types that use the Nitro hypervisor. For more information, see Instance Console Output in the Amazon Elastic Compute Cloud User Guide.
      */
    def getConsoleOutput(params: GetConsoleOutputRequest): awsDashSdkLib.libRequestMod.Request[GetConsoleOutputResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getConsoleOutput(
      params: GetConsoleOutputRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetConsoleOutputResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetConsoleOutputResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Retrieve a JPG-format screenshot of a running instance to help with troubleshooting. The returned content is Base64-encoded.
      */
    def getConsoleScreenshot(): awsDashSdkLib.libRequestMod.Request[GetConsoleScreenshotResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getConsoleScreenshot(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetConsoleScreenshotResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetConsoleScreenshotResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Retrieve a JPG-format screenshot of a running instance to help with troubleshooting. The returned content is Base64-encoded.
      */
    def getConsoleScreenshot(params: GetConsoleScreenshotRequest): awsDashSdkLib.libRequestMod.Request[GetConsoleScreenshotResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getConsoleScreenshot(
      params: GetConsoleScreenshotRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetConsoleScreenshotResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetConsoleScreenshotResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This is a preview of the PurchaseHostReservation action and does not result in the offering being purchased.
      */
    def getHostReservationPurchasePreview(): awsDashSdkLib.libRequestMod.Request[GetHostReservationPurchasePreviewResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getHostReservationPurchasePreview(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetHostReservationPurchasePreviewResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetHostReservationPurchasePreviewResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This is a preview of the PurchaseHostReservation action and does not result in the offering being purchased.
      */
    def getHostReservationPurchasePreview(params: GetHostReservationPurchasePreviewRequest): awsDashSdkLib.libRequestMod.Request[GetHostReservationPurchasePreviewResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getHostReservationPurchasePreview(
      params: GetHostReservationPurchasePreviewRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetHostReservationPurchasePreviewResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetHostReservationPurchasePreviewResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Retrieves the configuration data of the specified instance. You can use this data to create a launch template.
      */
    def getLaunchTemplateData(): awsDashSdkLib.libRequestMod.Request[GetLaunchTemplateDataResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getLaunchTemplateData(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetLaunchTemplateDataResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetLaunchTemplateDataResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Retrieves the configuration data of the specified instance. You can use this data to create a launch template.
      */
    def getLaunchTemplateData(params: GetLaunchTemplateDataRequest): awsDashSdkLib.libRequestMod.Request[GetLaunchTemplateDataResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getLaunchTemplateData(
      params: GetLaunchTemplateDataRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetLaunchTemplateDataResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetLaunchTemplateDataResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Retrieves the encrypted administrator password for a running Windows instance. The Windows password is generated at boot by the EC2Config service or EC2Launch scripts (Windows Server 2016 and later). This usually only happens the first time an instance is launched. For more information, see EC2Config and EC2Launch in the Amazon Elastic Compute Cloud User Guide. For the EC2Config service, the password is not generated for rebundled AMIs unless Ec2SetPassword is enabled before bundling. The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file. When you launch an instance, password generation and encryption may take a few minutes. If you try to retrieve the password before it's available, the output returns an empty string. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.
      */
    def getPasswordData(): awsDashSdkLib.libRequestMod.Request[GetPasswordDataResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getPasswordData(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetPasswordDataResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetPasswordDataResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Retrieves the encrypted administrator password for a running Windows instance. The Windows password is generated at boot by the EC2Config service or EC2Launch scripts (Windows Server 2016 and later). This usually only happens the first time an instance is launched. For more information, see EC2Config and EC2Launch in the Amazon Elastic Compute Cloud User Guide. For the EC2Config service, the password is not generated for rebundled AMIs unless Ec2SetPassword is enabled before bundling. The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file. When you launch an instance, password generation and encryption may take a few minutes. If you try to retrieve the password before it's available, the output returns an empty string. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.
      */
    def getPasswordData(params: GetPasswordDataRequest): awsDashSdkLib.libRequestMod.Request[GetPasswordDataResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getPasswordData(
      params: GetPasswordDataRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetPasswordDataResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetPasswordDataResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns a quote and exchange information for exchanging one or more specified Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange cannot be performed, the reason is returned in the response. Use AcceptReservedInstancesExchangeQuote to perform the exchange.
      */
    def getReservedInstancesExchangeQuote(): awsDashSdkLib.libRequestMod.Request[GetReservedInstancesExchangeQuoteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getReservedInstancesExchangeQuote(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetReservedInstancesExchangeQuoteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetReservedInstancesExchangeQuoteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns a quote and exchange information for exchanging one or more specified Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange cannot be performed, the reason is returned in the response. Use AcceptReservedInstancesExchangeQuote to perform the exchange.
      */
    def getReservedInstancesExchangeQuote(params: GetReservedInstancesExchangeQuoteRequest): awsDashSdkLib.libRequestMod.Request[GetReservedInstancesExchangeQuoteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getReservedInstancesExchangeQuote(
      params: GetReservedInstancesExchangeQuoteRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetReservedInstancesExchangeQuoteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetReservedInstancesExchangeQuoteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Lists the route tables to which the specified resource attachment propagates routes.
      */
    def getTransitGatewayAttachmentPropagations(): awsDashSdkLib.libRequestMod.Request[GetTransitGatewayAttachmentPropagationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getTransitGatewayAttachmentPropagations(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetTransitGatewayAttachmentPropagationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetTransitGatewayAttachmentPropagationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Lists the route tables to which the specified resource attachment propagates routes.
      */
    def getTransitGatewayAttachmentPropagations(params: GetTransitGatewayAttachmentPropagationsRequest): awsDashSdkLib.libRequestMod.Request[GetTransitGatewayAttachmentPropagationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getTransitGatewayAttachmentPropagations(
      params: GetTransitGatewayAttachmentPropagationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetTransitGatewayAttachmentPropagationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetTransitGatewayAttachmentPropagationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about the associations for the specified transit gateway route table.
      */
    def getTransitGatewayRouteTableAssociations(): awsDashSdkLib.libRequestMod.Request[GetTransitGatewayRouteTableAssociationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getTransitGatewayRouteTableAssociations(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetTransitGatewayRouteTableAssociationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetTransitGatewayRouteTableAssociationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about the associations for the specified transit gateway route table.
      */
    def getTransitGatewayRouteTableAssociations(params: GetTransitGatewayRouteTableAssociationsRequest): awsDashSdkLib.libRequestMod.Request[GetTransitGatewayRouteTableAssociationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getTransitGatewayRouteTableAssociations(
      params: GetTransitGatewayRouteTableAssociationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetTransitGatewayRouteTableAssociationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetTransitGatewayRouteTableAssociationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about the route table propagations for the specified transit gateway route table.
      */
    def getTransitGatewayRouteTablePropagations(): awsDashSdkLib.libRequestMod.Request[GetTransitGatewayRouteTablePropagationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getTransitGatewayRouteTablePropagations(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetTransitGatewayRouteTablePropagationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetTransitGatewayRouteTablePropagationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about the route table propagations for the specified transit gateway route table.
      */
    def getTransitGatewayRouteTablePropagations(params: GetTransitGatewayRouteTablePropagationsRequest): awsDashSdkLib.libRequestMod.Request[GetTransitGatewayRouteTablePropagationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getTransitGatewayRouteTablePropagations(
      params: GetTransitGatewayRouteTablePropagationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetTransitGatewayRouteTablePropagationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetTransitGatewayRouteTablePropagationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list. Uploading a client certificate revocation list resets existing client connections.
      */
    def importClientVpnClientCertificateRevocationList(): awsDashSdkLib.libRequestMod.Request[
        ImportClientVpnClientCertificateRevocationListResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def importClientVpnClientCertificateRevocationList(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ImportClientVpnClientCertificateRevocationListResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        ImportClientVpnClientCertificateRevocationListResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list. Uploading a client certificate revocation list resets existing client connections.
      */
    def importClientVpnClientCertificateRevocationList(params: ImportClientVpnClientCertificateRevocationListRequest): awsDashSdkLib.libRequestMod.Request[
        ImportClientVpnClientCertificateRevocationListResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def importClientVpnClientCertificateRevocationList(
      params: ImportClientVpnClientCertificateRevocationListRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ImportClientVpnClientCertificateRevocationListResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        ImportClientVpnClientCertificateRevocationListResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI). For more information, see Importing a VM as an Image Using VM Import/Export in the VM Import/Export User Guide.
      */
    def importImage(): awsDashSdkLib.libRequestMod.Request[ImportImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def importImage(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ImportImageResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ImportImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI). For more information, see Importing a VM as an Image Using VM Import/Export in the VM Import/Export User Guide.
      */
    def importImage(params: ImportImageRequest): awsDashSdkLib.libRequestMod.Request[ImportImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def importImage(
      params: ImportImageRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ImportImageResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ImportImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an import instance task using metadata from the specified disk image. ImportInstance only supports single-volume VMs. To import multi-volume VMs, use ImportImage. For more information, see Importing a Virtual Machine Using the Amazon EC2 CLI. For information about the import manifest referenced by this API action, see VM Import Manifest.
      */
    def importInstance(): awsDashSdkLib.libRequestMod.Request[ImportInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def importInstance(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ImportInstanceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ImportInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an import instance task using metadata from the specified disk image. ImportInstance only supports single-volume VMs. To import multi-volume VMs, use ImportImage. For more information, see Importing a Virtual Machine Using the Amazon EC2 CLI. For information about the import manifest referenced by this API action, see VM Import Manifest.
      */
    def importInstance(params: ImportInstanceRequest): awsDashSdkLib.libRequestMod.Request[ImportInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def importInstance(
      params: ImportInstanceRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ImportInstanceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ImportInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Imports the public key from an RSA key pair that you created with a third-party tool. Compare this with CreateKeyPair, in which AWS creates the key pair and gives the keys to you (AWS keeps a copy of the public key). With ImportKeyPair, you create the key pair and give AWS just the public key. The private key is never transferred between you and AWS. For more information about key pairs, see Key Pairs in the Amazon Elastic Compute Cloud User Guide.
      */
    def importKeyPair(): awsDashSdkLib.libRequestMod.Request[ImportKeyPairResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def importKeyPair(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ImportKeyPairResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ImportKeyPairResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Imports the public key from an RSA key pair that you created with a third-party tool. Compare this with CreateKeyPair, in which AWS creates the key pair and gives the keys to you (AWS keeps a copy of the public key). With ImportKeyPair, you create the key pair and give AWS just the public key. The private key is never transferred between you and AWS. For more information about key pairs, see Key Pairs in the Amazon Elastic Compute Cloud User Guide.
      */
    def importKeyPair(params: ImportKeyPairRequest): awsDashSdkLib.libRequestMod.Request[ImportKeyPairResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def importKeyPair(
      params: ImportKeyPairRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ImportKeyPairResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ImportKeyPairResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Imports a disk into an EBS snapshot.
      */
    def importSnapshot(): awsDashSdkLib.libRequestMod.Request[ImportSnapshotResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def importSnapshot(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ImportSnapshotResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ImportSnapshotResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Imports a disk into an EBS snapshot.
      */
    def importSnapshot(params: ImportSnapshotRequest): awsDashSdkLib.libRequestMod.Request[ImportSnapshotResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def importSnapshot(
      params: ImportSnapshotRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ImportSnapshotResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ImportSnapshotResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an import volume task using metadata from the specified disk image.For more information, see Importing Disks to Amazon EBS. For information about the import manifest referenced by this API action, see VM Import Manifest.
      */
    def importVolume(): awsDashSdkLib.libRequestMod.Request[ImportVolumeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def importVolume(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ImportVolumeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ImportVolumeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates an import volume task using metadata from the specified disk image.For more information, see Importing Disks to Amazon EBS. For information about the import manifest referenced by this API action, see VM Import Manifest.
      */
    def importVolume(params: ImportVolumeRequest): awsDashSdkLib.libRequestMod.Request[ImportVolumeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def importVolume(
      params: ImportVolumeRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ImportVolumeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ImportVolumeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies a Capacity Reservation's capacity and the conditions under which it is to be released. You cannot change a Capacity Reservation's instance type, EBS optimization, instance store settings, platform, Availability Zone, or instance eligibility. If you need to modify any of these attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with the required attributes.
      */
    def modifyCapacityReservation(): awsDashSdkLib.libRequestMod.Request[ModifyCapacityReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyCapacityReservation(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyCapacityReservationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyCapacityReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies a Capacity Reservation's capacity and the conditions under which it is to be released. You cannot change a Capacity Reservation's instance type, EBS optimization, instance store settings, platform, Availability Zone, or instance eligibility. If you need to modify any of these attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with the required attributes.
      */
    def modifyCapacityReservation(params: ModifyCapacityReservationRequest): awsDashSdkLib.libRequestMod.Request[ModifyCapacityReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyCapacityReservation(
      params: ModifyCapacityReservationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyCapacityReservationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyCapacityReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified Client VPN endpoint. You can only modify an endpoint's server certificate information, client connection logging information, DNS server, and description. Modifying the DNS server resets existing client connections.
      */
    def modifyClientVpnEndpoint(): awsDashSdkLib.libRequestMod.Request[ModifyClientVpnEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyClientVpnEndpoint(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyClientVpnEndpointResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyClientVpnEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified Client VPN endpoint. You can only modify an endpoint's server certificate information, client connection logging information, DNS server, and description. Modifying the DNS server resets existing client connections.
      */
    def modifyClientVpnEndpoint(params: ModifyClientVpnEndpointRequest): awsDashSdkLib.libRequestMod.Request[ModifyClientVpnEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyClientVpnEndpoint(
      params: ModifyClientVpnEndpointRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyClientVpnEndpointResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyClientVpnEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified EC2 Fleet. While the EC2 Fleet is being modified, it is in the modifying state.
      */
    def modifyFleet(): awsDashSdkLib.libRequestMod.Request[ModifyFleetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyFleet(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyFleetResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyFleetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified EC2 Fleet. While the EC2 Fleet is being modified, it is in the modifying state.
      */
    def modifyFleet(params: ModifyFleetRequest): awsDashSdkLib.libRequestMod.Request[ModifyFleetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyFleet(
      params: ModifyFleetRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyFleetResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyFleetResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified attribute of the specified Amazon FPGA Image (AFI).
      */
    def modifyFpgaImageAttribute(): awsDashSdkLib.libRequestMod.Request[ModifyFpgaImageAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyFpgaImageAttribute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyFpgaImageAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyFpgaImageAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified attribute of the specified Amazon FPGA Image (AFI).
      */
    def modifyFpgaImageAttribute(params: ModifyFpgaImageAttributeRequest): awsDashSdkLib.libRequestMod.Request[ModifyFpgaImageAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyFpgaImageAttribute(
      params: ModifyFpgaImageAttributeRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyFpgaImageAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyFpgaImageAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, any instances that you launch with a tenancy of host but without a specific host ID are placed onto any available Dedicated Host in your account that has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID to have the instance launch onto a specific host. If no host ID is provided, the instance is launched onto a suitable host with auto-placement enabled.
      */
    def modifyHosts(): awsDashSdkLib.libRequestMod.Request[ModifyHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyHosts(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyHostsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, any instances that you launch with a tenancy of host but without a specific host ID are placed onto any available Dedicated Host in your account that has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID to have the instance launch onto a specific host. If no host ID is provided, the instance is launched onto a suitable host with auto-placement enabled.
      */
    def modifyHosts(params: ModifyHostsRequest): awsDashSdkLib.libRequestMod.Request[ModifyHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyHosts(
      params: ModifyHostsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyHostsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the ID format for the specified resource on a per-region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created. This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. This setting applies to the IAM user who makes the request; it does not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user. If you're using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see Resource IDs in the Amazon Elastic Compute Cloud User Guide. Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant Describe command for the resource type.
      */
    def modifyIdFormat(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyIdFormat(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the ID format for the specified resource on a per-region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created. This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. This setting applies to the IAM user who makes the request; it does not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user. If you're using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see Resource IDs in the Amazon Elastic Compute Cloud User Guide. Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant Describe command for the resource type.
      */
    def modifyIdFormat(params: ModifyIdFormatRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyIdFormat(
      params: ModifyIdFormatRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account; or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created.  This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.  For more information, see Resource IDs in the Amazon Elastic Compute Cloud User Guide.  This setting applies to the principal specified in the request; it does not apply to the principal that makes the request.  Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant Describe command for the resource type.
      */
    def modifyIdentityIdFormat(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyIdentityIdFormat(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account; or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created.  This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.  For more information, see Resource IDs in the Amazon Elastic Compute Cloud User Guide.  This setting applies to the principal specified in the request; it does not apply to the principal that makes the request.  Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant Describe command for the resource type.
      */
    def modifyIdentityIdFormat(params: ModifyIdentityIdFormatRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyIdentityIdFormat(
      params: ModifyIdentityIdFormatRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time. You can use the Attribute parameter to specify the attribute or one of the following parameters: Description, LaunchPermission, or ProductCode. AWS Marketplace product codes cannot be modified. Images with an AWS Marketplace product code cannot be made public. To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance and create an AMI from the instance.
      */
    def modifyImageAttribute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyImageAttribute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time. You can use the Attribute parameter to specify the attribute or one of the following parameters: Description, LaunchPermission, or ProductCode. AWS Marketplace product codes cannot be modified. Images with an AWS Marketplace product code cannot be made public. To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance and create an AMI from the instance.
      */
    def modifyImageAttribute(params: ModifyImageAttributeRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyImageAttribute(
      params: ModifyImageAttributeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.  Note: Using this action to change the security groups associated with an elastic network interface (ENI) attached to an instance in a VPC can result in an error if the instance has more than one ENI. To change the security groups associated with an ENI attached to an instance that has multiple ENIs, we recommend that you use the ModifyNetworkInterfaceAttribute action. To modify some attributes, the instance must be stopped. For more information, see Modifying Attributes of a Stopped Instance in the Amazon Elastic Compute Cloud User Guide.
      */
    def modifyInstanceAttribute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyInstanceAttribute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.  Note: Using this action to change the security groups associated with an elastic network interface (ENI) attached to an instance in a VPC can result in an error if the instance has more than one ENI. To change the security groups associated with an ENI attached to an instance that has multiple ENIs, we recommend that you use the ModifyNetworkInterfaceAttribute action. To modify some attributes, the instance must be stopped. For more information, see Modifying Attributes of a Stopped Instance in the Amazon Elastic Compute Cloud User Guide.
      */
    def modifyInstanceAttribute(params: ModifyInstanceAttributeRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyInstanceAttribute(
      params: ModifyInstanceAttributeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an instance to target a specific Capacity Reservation, run in any open Capacity Reservation with matching attributes, or run On-Demand Instance capacity.
      */
    def modifyInstanceCapacityReservationAttributes(): awsDashSdkLib.libRequestMod.Request[
        ModifyInstanceCapacityReservationAttributesResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def modifyInstanceCapacityReservationAttributes(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyInstanceCapacityReservationAttributesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        ModifyInstanceCapacityReservationAttributesResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an instance to target a specific Capacity Reservation, run in any open Capacity Reservation with matching attributes, or run On-Demand Instance capacity.
      */
    def modifyInstanceCapacityReservationAttributes(params: ModifyInstanceCapacityReservationAttributesRequest): awsDashSdkLib.libRequestMod.Request[
        ModifyInstanceCapacityReservationAttributesResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def modifyInstanceCapacityReservationAttributes(
      params: ModifyInstanceCapacityReservationAttributesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyInstanceCapacityReservationAttributesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        ModifyInstanceCapacityReservationAttributesResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Modifies the credit option for CPU usage on a running or stopped T2 or T3 instance. The credit options are standard and unlimited. For more information, see Burstable Performance Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def modifyInstanceCreditSpecification(): awsDashSdkLib.libRequestMod.Request[ModifyInstanceCreditSpecificationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyInstanceCreditSpecification(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyInstanceCreditSpecificationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyInstanceCreditSpecificationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the credit option for CPU usage on a running or stopped T2 or T3 instance. The credit options are standard and unlimited. For more information, see Burstable Performance Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def modifyInstanceCreditSpecification(params: ModifyInstanceCreditSpecificationRequest): awsDashSdkLib.libRequestMod.Request[ModifyInstanceCreditSpecificationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyInstanceCreditSpecification(
      params: ModifyInstanceCreditSpecificationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyInstanceCreditSpecificationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyInstanceCreditSpecificationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the placement attributes for a specified instance. You can do the following:   Modify the affinity between an instance and a Dedicated Host. When affinity is set to host and the instance is not associated with a specific Dedicated Host, the next time the instance is launched, it is automatically associated with the host on which it lands. If the instance is restarted or rebooted, this relationship persists.   Change the Dedicated Host with which an instance is associated.   Change the instance tenancy of an instance from host to dedicated, or from dedicated to host.   Move an instance to or from a placement group.   At least one attribute for affinity, host ID, tenancy, or placement group name must be specified in the request. Affinity and tenancy can be modified in the same request. To modify the host ID, tenancy, placement group, or partition for an instance, the instance must be in the stopped state.
      */
    def modifyInstancePlacement(): awsDashSdkLib.libRequestMod.Request[ModifyInstancePlacementResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyInstancePlacement(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyInstancePlacementResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyInstancePlacementResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the placement attributes for a specified instance. You can do the following:   Modify the affinity between an instance and a Dedicated Host. When affinity is set to host and the instance is not associated with a specific Dedicated Host, the next time the instance is launched, it is automatically associated with the host on which it lands. If the instance is restarted or rebooted, this relationship persists.   Change the Dedicated Host with which an instance is associated.   Change the instance tenancy of an instance from host to dedicated, or from dedicated to host.   Move an instance to or from a placement group.   At least one attribute for affinity, host ID, tenancy, or placement group name must be specified in the request. Affinity and tenancy can be modified in the same request. To modify the host ID, tenancy, placement group, or partition for an instance, the instance must be in the stopped state.
      */
    def modifyInstancePlacement(params: ModifyInstancePlacementRequest): awsDashSdkLib.libRequestMod.Request[ModifyInstancePlacementResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyInstancePlacement(
      params: ModifyInstancePlacementRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyInstancePlacementResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyInstancePlacementResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies a launch template. You can specify which version of the launch template to set as the default version. When launching an instance, the default version applies when a launch template version is not specified.
      */
    def modifyLaunchTemplate(): awsDashSdkLib.libRequestMod.Request[ModifyLaunchTemplateResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyLaunchTemplate(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyLaunchTemplateResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyLaunchTemplateResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies a launch template. You can specify which version of the launch template to set as the default version. When launching an instance, the default version applies when a launch template version is not specified.
      */
    def modifyLaunchTemplate(params: ModifyLaunchTemplateRequest): awsDashSdkLib.libRequestMod.Request[ModifyLaunchTemplateResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyLaunchTemplate(
      params: ModifyLaunchTemplateRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyLaunchTemplateResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyLaunchTemplateResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified network interface attribute. You can specify only one attribute at a time.
      */
    def modifyNetworkInterfaceAttribute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyNetworkInterfaceAttribute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified network interface attribute. You can specify only one attribute at a time.
      */
    def modifyNetworkInterfaceAttribute(params: ModifyNetworkInterfaceAttributeRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyNetworkInterfaceAttribute(
      params: ModifyNetworkInterfaceAttributeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the Availability Zone, instance count, instance type, or network platform (EC2-Classic or EC2-VPC) of your Reserved Instances. The Reserved Instances to be modified must be identical, except for Availability Zone, network platform, and instance type. For more information, see Modifying Reserved Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def modifyReservedInstances(): awsDashSdkLib.libRequestMod.Request[ModifyReservedInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyReservedInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyReservedInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyReservedInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the Availability Zone, instance count, instance type, or network platform (EC2-Classic or EC2-VPC) of your Reserved Instances. The Reserved Instances to be modified must be identical, except for Availability Zone, network platform, and instance type. For more information, see Modifying Reserved Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def modifyReservedInstances(params: ModifyReservedInstancesRequest): awsDashSdkLib.libRequestMod.Request[ModifyReservedInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyReservedInstances(
      params: ModifyReservedInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyReservedInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyReservedInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Adds or removes permission settings for the specified snapshot. You may add or remove specified AWS account IDs from a snapshot's list of create volume permissions, but you cannot do both in a single API call. If you need to both add and remove account IDs for a snapshot, you must use multiple API calls. Encrypted snapshots and snapshots with AWS Marketplace product codes cannot be made public. Snapshots encrypted with your default CMK cannot be shared with other accounts. For more information about modifying snapshot permissions, see Sharing Snapshots in the Amazon Elastic Compute Cloud User Guide.
      */
    def modifySnapshotAttribute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifySnapshotAttribute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Adds or removes permission settings for the specified snapshot. You may add or remove specified AWS account IDs from a snapshot's list of create volume permissions, but you cannot do both in a single API call. If you need to both add and remove account IDs for a snapshot, you must use multiple API calls. Encrypted snapshots and snapshots with AWS Marketplace product codes cannot be made public. Snapshots encrypted with your default CMK cannot be shared with other accounts. For more information about modifying snapshot permissions, see Sharing Snapshots in the Amazon Elastic Compute Cloud User Guide.
      */
    def modifySnapshotAttribute(params: ModifySnapshotAttributeRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifySnapshotAttribute(
      params: ModifySnapshotAttributeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified Spot Fleet request. While the Spot Fleet request is being modified, it is in the modifying state. To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the additional Spot Instances according to the allocation strategy for the Spot Fleet request. If the allocation strategy is lowestPrice, the Spot Fleet launches instances using the Spot pool with the lowest price. If the allocation strategy is diversified, the Spot Fleet distributes the instances across the Spot pools. To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet cancels any open requests that exceed the new target capacity. You can request that the Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is lowestPrice, the Spot Fleet terminates the instances with the highest price per unit. If the allocation strategy is diversified, the Spot Fleet terminates instances across the Spot pools. Alternatively, you can request that the Spot Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually. If you are finished with your Spot Fleet for now, but will use it again later, you can set the target capacity to 0.
      */
    def modifySpotFleetRequest(): awsDashSdkLib.libRequestMod.Request[ModifySpotFleetRequestResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifySpotFleetRequest(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifySpotFleetRequestResponse, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifySpotFleetRequestResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified Spot Fleet request. While the Spot Fleet request is being modified, it is in the modifying state. To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the additional Spot Instances according to the allocation strategy for the Spot Fleet request. If the allocation strategy is lowestPrice, the Spot Fleet launches instances using the Spot pool with the lowest price. If the allocation strategy is diversified, the Spot Fleet distributes the instances across the Spot pools. To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet cancels any open requests that exceed the new target capacity. You can request that the Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is lowestPrice, the Spot Fleet terminates the instances with the highest price per unit. If the allocation strategy is diversified, the Spot Fleet terminates instances across the Spot pools. Alternatively, you can request that the Spot Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually. If you are finished with your Spot Fleet for now, but will use it again later, you can set the target capacity to 0.
      */
    def modifySpotFleetRequest(params: ModifySpotFleetRequestRequest): awsDashSdkLib.libRequestMod.Request[ModifySpotFleetRequestResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifySpotFleetRequest(
      params: ModifySpotFleetRequestRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifySpotFleetRequestResponse, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifySpotFleetRequestResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies a subnet attribute. You can only modify one attribute at a time.
      */
    def modifySubnetAttribute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifySubnetAttribute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies a subnet attribute. You can only modify one attribute at a time.
      */
    def modifySubnetAttribute(params: ModifySubnetAttributeRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifySubnetAttribute(
      params: ModifySubnetAttributeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified VPC attachment.
      */
    def modifyTransitGatewayVpcAttachment(): awsDashSdkLib.libRequestMod.Request[ModifyTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyTransitGatewayVpcAttachment(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyTransitGatewayVpcAttachmentResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified VPC attachment.
      */
    def modifyTransitGatewayVpcAttachment(params: ModifyTransitGatewayVpcAttachmentRequest): awsDashSdkLib.libRequestMod.Request[ModifyTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyTransitGatewayVpcAttachment(
      params: ModifyTransitGatewayVpcAttachmentRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyTransitGatewayVpcAttachmentResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * You can modify several parameters of an existing EBS volume, including volume size, volume type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance type, you may be able to apply these changes without stopping the instance or detaching the volume from it. For more information about modifying an EBS volume running Linux, see Modifying the Size, IOPS, or Type of an EBS Volume on Linux. For more information about modifying an EBS volume running Windows, see Modifying the Size, IOPS, or Type of an EBS Volume on Windows.   When you complete a resize operation on your volume, you need to extend the volume's file-system size to take advantage of the new storage capacity. For information about extending a Linux file system, see Extending a Linux File System. For information about extending a Windows file system, see Extending a Windows File System.   You can use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the Amazon CloudWatch Events User Guide. You can also track the status of a modification using the DescribeVolumesModifications API. For information about tracking status changes using either method, see Monitoring Volume Modifications.  With previous-generation instance types, resizing an EBS volume may require detaching and reattaching the volume or stopping and restarting the instance. For more information, see Modifying the Size, IOPS, or Type of an EBS Volume on Linux and Modifying the Size, IOPS, or Type of an EBS Volume on Windows. If you reach the maximum volume modification rate per volume limit, you will need to wait at least six hours before applying further modifications to the affected EBS volume.
      */
    def modifyVolume(): awsDashSdkLib.libRequestMod.Request[ModifyVolumeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVolume(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVolumeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVolumeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * You can modify several parameters of an existing EBS volume, including volume size, volume type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance type, you may be able to apply these changes without stopping the instance or detaching the volume from it. For more information about modifying an EBS volume running Linux, see Modifying the Size, IOPS, or Type of an EBS Volume on Linux. For more information about modifying an EBS volume running Windows, see Modifying the Size, IOPS, or Type of an EBS Volume on Windows.   When you complete a resize operation on your volume, you need to extend the volume's file-system size to take advantage of the new storage capacity. For information about extending a Linux file system, see Extending a Linux File System. For information about extending a Windows file system, see Extending a Windows File System.   You can use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the Amazon CloudWatch Events User Guide. You can also track the status of a modification using the DescribeVolumesModifications API. For information about tracking status changes using either method, see Monitoring Volume Modifications.  With previous-generation instance types, resizing an EBS volume may require detaching and reattaching the volume or stopping and restarting the instance. For more information, see Modifying the Size, IOPS, or Type of an EBS Volume on Linux and Modifying the Size, IOPS, or Type of an EBS Volume on Windows. If you reach the maximum volume modification rate per volume limit, you will need to wait at least six hours before applying further modifications to the affected EBS volume.
      */
    def modifyVolume(params: ModifyVolumeRequest): awsDashSdkLib.libRequestMod.Request[ModifyVolumeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVolume(
      params: ModifyVolumeRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVolumeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVolumeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies a volume attribute. By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume. You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.
      */
    def modifyVolumeAttribute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVolumeAttribute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies a volume attribute. By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume. You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.
      */
    def modifyVolumeAttribute(params: ModifyVolumeAttributeRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVolumeAttribute(
      params: ModifyVolumeAttributeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified attribute of the specified VPC.
      */
    def modifyVpcAttribute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcAttribute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified attribute of the specified VPC.
      */
    def modifyVpcAttribute(params: ModifyVpcAttributeRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcAttribute(
      params: ModifyVpcAttributeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies attributes of a specified VPC endpoint. The attributes that you can modify depend on the type of VPC endpoint (interface or gateway). For more information, see VPC Endpoints in the Amazon Virtual Private Cloud User Guide.
      */
    def modifyVpcEndpoint(): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcEndpoint(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVpcEndpointResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies attributes of a specified VPC endpoint. The attributes that you can modify depend on the type of VPC endpoint (interface or gateway). For more information, see VPC Endpoints in the Amazon Virtual Private Cloud User Guide.
      */
    def modifyVpcEndpoint(params: ModifyVpcEndpointRequest): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcEndpoint(
      params: ModifyVpcEndpointRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVpcEndpointResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies a connection notification for VPC endpoint or VPC endpoint service. You can change the SNS topic for the notification, or the events for which to be notified. 
      */
    def modifyVpcEndpointConnectionNotification(): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointConnectionNotificationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcEndpointConnectionNotification(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVpcEndpointConnectionNotificationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointConnectionNotificationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies a connection notification for VPC endpoint or VPC endpoint service. You can change the SNS topic for the notification, or the events for which to be notified. 
      */
    def modifyVpcEndpointConnectionNotification(params: ModifyVpcEndpointConnectionNotificationRequest): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointConnectionNotificationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcEndpointConnectionNotification(
      params: ModifyVpcEndpointConnectionNotificationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVpcEndpointConnectionNotificationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointConnectionNotificationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the attributes of your VPC endpoint service configuration. You can change the Network Load Balancers for your service, and you can specify whether acceptance is required for requests to connect to your endpoint service through an interface VPC endpoint.
      */
    def modifyVpcEndpointServiceConfiguration(): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointServiceConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcEndpointServiceConfiguration(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVpcEndpointServiceConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointServiceConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the attributes of your VPC endpoint service configuration. You can change the Network Load Balancers for your service, and you can specify whether acceptance is required for requests to connect to your endpoint service through an interface VPC endpoint.
      */
    def modifyVpcEndpointServiceConfiguration(params: ModifyVpcEndpointServiceConfigurationRequest): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointServiceConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcEndpointServiceConfiguration(
      params: ModifyVpcEndpointServiceConfigurationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVpcEndpointServiceConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointServiceConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the permissions for your VPC endpoint service. You can add or remove permissions for service consumers (IAM users, IAM roles, and AWS accounts) to connect to your endpoint service. If you grant permissions to all principals, the service is public. Any users who know the name of a public service can send a request to attach an endpoint. If the service does not require manual approval, attachments are automatically approved.
      */
    def modifyVpcEndpointServicePermissions(): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointServicePermissionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcEndpointServicePermissions(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVpcEndpointServicePermissionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointServicePermissionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the permissions for your VPC endpoint service. You can add or remove permissions for service consumers (IAM users, IAM roles, and AWS accounts) to connect to your endpoint service. If you grant permissions to all principals, the service is public. Any users who know the name of a public service can send a request to attach an endpoint. If the service does not require manual approval, attachments are automatically approved.
      */
    def modifyVpcEndpointServicePermissions(params: ModifyVpcEndpointServicePermissionsRequest): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointServicePermissionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcEndpointServicePermissions(
      params: ModifyVpcEndpointServicePermissionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVpcEndpointServicePermissionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVpcEndpointServicePermissionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:   Enable/disable communication over the peering connection between an EC2-Classic instance that's linked to your VPC (using ClassicLink) and instances in the peer VPC.   Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that's linked to the peer VPC.   Enable/disable the ability to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.   If the peered VPCs are in the same AWS account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different AWS accounts or different regions. For peered VPCs in different AWS accounts, each AWS account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the region for the requester VPC to modify the requester VPC peering options and the region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the DescribeVpcPeeringConnections command.
      */
    def modifyVpcPeeringConnectionOptions(): awsDashSdkLib.libRequestMod.Request[ModifyVpcPeeringConnectionOptionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcPeeringConnectionOptions(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVpcPeeringConnectionOptionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVpcPeeringConnectionOptionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:   Enable/disable communication over the peering connection between an EC2-Classic instance that's linked to your VPC (using ClassicLink) and instances in the peer VPC.   Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that's linked to the peer VPC.   Enable/disable the ability to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.   If the peered VPCs are in the same AWS account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different AWS accounts or different regions. For peered VPCs in different AWS accounts, each AWS account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the region for the requester VPC to modify the requester VPC peering options and the region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the DescribeVpcPeeringConnections command.
      */
    def modifyVpcPeeringConnectionOptions(params: ModifyVpcPeeringConnectionOptionsRequest): awsDashSdkLib.libRequestMod.Request[ModifyVpcPeeringConnectionOptionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcPeeringConnectionOptions(
      params: ModifyVpcPeeringConnectionOptionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVpcPeeringConnectionOptionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVpcPeeringConnectionOptionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the instance tenancy attribute of the specified VPC. You can change the instance tenancy attribute of a VPC to default only. You cannot change the instance tenancy attribute to dedicated. After you modify the tenancy of the VPC, any new instances that you launch into the VPC have a tenancy of default, unless you specify otherwise during launch. The tenancy of any existing instances in the VPC is not affected. For more information, see Dedicated Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def modifyVpcTenancy(): awsDashSdkLib.libRequestMod.Request[ModifyVpcTenancyResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcTenancy(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVpcTenancyResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVpcTenancyResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the instance tenancy attribute of the specified VPC. You can change the instance tenancy attribute of a VPC to default only. You cannot change the instance tenancy attribute to dedicated. After you modify the tenancy of the VPC, any new instances that you launch into the VPC have a tenancy of default, unless you specify otherwise during launch. The tenancy of any existing instances in the VPC is not affected. For more information, see Dedicated Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def modifyVpcTenancy(params: ModifyVpcTenancyRequest): awsDashSdkLib.libRequestMod.Request[ModifyVpcTenancyResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def modifyVpcTenancy(
      params: ModifyVpcTenancyRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ModifyVpcTenancyResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ModifyVpcTenancyResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see Monitoring Your Instances and Volumes in the Amazon Elastic Compute Cloud User Guide. To disable detailed monitoring, see .
      */
    def monitorInstances(): awsDashSdkLib.libRequestMod.Request[MonitorInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def monitorInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ MonitorInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[MonitorInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see Monitoring Your Instances and Volumes in the Amazon Elastic Compute Cloud User Guide. To disable detailed monitoring, see .
      */
    def monitorInstances(params: MonitorInstancesRequest): awsDashSdkLib.libRequestMod.Request[MonitorInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def monitorInstances(
      params: MonitorInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ MonitorInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[MonitorInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform, unless you move it back using the RestoreAddressToClassic request. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform. 
      */
    def moveAddressToVpc(): awsDashSdkLib.libRequestMod.Request[MoveAddressToVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def moveAddressToVpc(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ MoveAddressToVpcResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[MoveAddressToVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform, unless you move it back using the RestoreAddressToClassic request. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform. 
      */
    def moveAddressToVpc(params: MoveAddressToVpcRequest): awsDashSdkLib.libRequestMod.Request[MoveAddressToVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def moveAddressToVpc(
      params: MoveAddressToVpcRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ MoveAddressToVpcResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[MoveAddressToVpcResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Provisions an address range for use with your AWS resources through bring your own IP addresses (BYOIP) and creates a corresponding address pool. After the address range is provisioned, it is ready to be advertised using AdvertiseByoipCidr. AWS verifies that you own the address range and are authorized to advertise it. You must ensure that the address range is registered to you and that you created an RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range. For more information, see Bring Your Own IP Addresses (BYOIP) in the Amazon Elastic Compute Cloud User Guide. Provisioning an address range is an asynchronous operation, so the call returns immediately, but the address range is not ready to use until its status changes from pending-provision to provisioned. To monitor the status of an address range, use DescribeByoipCidrs. To allocate an Elastic IP address from your address pool, use AllocateAddress with either the specific address from the address pool or the ID of the address pool.
      */
    def provisionByoipCidr(): awsDashSdkLib.libRequestMod.Request[ProvisionByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def provisionByoipCidr(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ProvisionByoipCidrResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ProvisionByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Provisions an address range for use with your AWS resources through bring your own IP addresses (BYOIP) and creates a corresponding address pool. After the address range is provisioned, it is ready to be advertised using AdvertiseByoipCidr. AWS verifies that you own the address range and are authorized to advertise it. You must ensure that the address range is registered to you and that you created an RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range. For more information, see Bring Your Own IP Addresses (BYOIP) in the Amazon Elastic Compute Cloud User Guide. Provisioning an address range is an asynchronous operation, so the call returns immediately, but the address range is not ready to use until its status changes from pending-provision to provisioned. To monitor the status of an address range, use DescribeByoipCidrs. To allocate an Elastic IP address from your address pool, use AllocateAddress with either the specific address from the address pool or the ID of the address pool.
      */
    def provisionByoipCidr(params: ProvisionByoipCidrRequest): awsDashSdkLib.libRequestMod.Request[ProvisionByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def provisionByoipCidr(
      params: ProvisionByoipCidrRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ProvisionByoipCidrResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ProvisionByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.
      */
    def purchaseHostReservation(): awsDashSdkLib.libRequestMod.Request[PurchaseHostReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def purchaseHostReservation(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ PurchaseHostReservationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[PurchaseHostReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.
      */
    def purchaseHostReservation(params: PurchaseHostReservationRequest): awsDashSdkLib.libRequestMod.Request[PurchaseHostReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def purchaseHostReservation(
      params: PurchaseHostReservationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ PurchaseHostReservationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[PurchaseHostReservationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower hourly rate compared to On-Demand instance pricing. Use DescribeReservedInstancesOfferings to get a list of Reserved Instance offerings that match your specifications. After you've purchased a Reserved Instance, you can check for your new Reserved Instance with DescribeReservedInstances. For more information, see Reserved Instances and Reserved Instance Marketplace in the Amazon Elastic Compute Cloud User Guide.
      */
    def purchaseReservedInstancesOffering(): awsDashSdkLib.libRequestMod.Request[PurchaseReservedInstancesOfferingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def purchaseReservedInstancesOffering(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ PurchaseReservedInstancesOfferingResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[PurchaseReservedInstancesOfferingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower hourly rate compared to On-Demand instance pricing. Use DescribeReservedInstancesOfferings to get a list of Reserved Instance offerings that match your specifications. After you've purchased a Reserved Instance, you can check for your new Reserved Instance with DescribeReservedInstances. For more information, see Reserved Instances and Reserved Instance Marketplace in the Amazon Elastic Compute Cloud User Guide.
      */
    def purchaseReservedInstancesOffering(params: PurchaseReservedInstancesOfferingRequest): awsDashSdkLib.libRequestMod.Request[PurchaseReservedInstancesOfferingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def purchaseReservedInstancesOffering(
      params: PurchaseReservedInstancesOfferingRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ PurchaseReservedInstancesOfferingResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[PurchaseReservedInstancesOfferingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Purchases one or more Scheduled Instances with the specified schedule. Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call DescribeScheduledInstanceAvailability to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call RunScheduledInstances during each scheduled time period. After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.
      */
    def purchaseScheduledInstances(): awsDashSdkLib.libRequestMod.Request[PurchaseScheduledInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def purchaseScheduledInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ PurchaseScheduledInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[PurchaseScheduledInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Purchases one or more Scheduled Instances with the specified schedule. Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call DescribeScheduledInstanceAvailability to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call RunScheduledInstances during each scheduled time period. After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.
      */
    def purchaseScheduledInstances(params: PurchaseScheduledInstancesRequest): awsDashSdkLib.libRequestMod.Request[PurchaseScheduledInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def purchaseScheduledInstances(
      params: PurchaseScheduledInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ PurchaseScheduledInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[PurchaseScheduledInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Requests a reboot of one or more instances. This operation is asynchronous; it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored. If an instance does not cleanly shut down within four minutes, Amazon EC2 performs a hard reboot. For more information about troubleshooting, see Getting Console Output and Rebooting Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def rebootInstances(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def rebootInstances(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Requests a reboot of one or more instances. This operation is asynchronous; it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored. If an instance does not cleanly shut down within four minutes, Amazon EC2 performs a hard reboot. For more information about troubleshooting, see Getting Console Output and Rebooting Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def rebootInstances(params: RebootInstancesRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def rebootInstances(
      params: RebootInstancesRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Registers an AMI. When you're creating an AMI, this is the final step you must complete before you can launch an instance from the AMI. For more information about creating AMIs, see Creating Your Own AMIs in the Amazon Elastic Compute Cloud User Guide.  For Amazon EBS-backed instances, CreateImage creates and registers the AMI in a single request, so you don't have to register the AMI yourself.  You can also use RegisterImage to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. You specify the snapshot using the block device mapping. For more information, see Launching a Linux Instance from a Backup in the Amazon Elastic Compute Cloud User Guide. You can't register an image where a secondary (non-root) snapshot has AWS Marketplace product codes. Some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE Linux Enterprise Server (SLES), use the EC2 billing product code associated with an AMI to verify the subscription status for package updates. Creating an AMI from an EBS snapshot does not maintain this billing code, and instances launched from such an AMI are not able to connect to package update infrastructure. If you purchase a Reserved Instance offering for one of these Linux distributions and launch instances using an AMI that does not contain the required billing code, your Reserved Instance is not applied to these instances. To create an AMI for operating systems that require a billing code, see CreateImage. If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.
      */
    def registerImage(): awsDashSdkLib.libRequestMod.Request[RegisterImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def registerImage(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RegisterImageResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RegisterImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Registers an AMI. When you're creating an AMI, this is the final step you must complete before you can launch an instance from the AMI. For more information about creating AMIs, see Creating Your Own AMIs in the Amazon Elastic Compute Cloud User Guide.  For Amazon EBS-backed instances, CreateImage creates and registers the AMI in a single request, so you don't have to register the AMI yourself.  You can also use RegisterImage to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. You specify the snapshot using the block device mapping. For more information, see Launching a Linux Instance from a Backup in the Amazon Elastic Compute Cloud User Guide. You can't register an image where a secondary (non-root) snapshot has AWS Marketplace product codes. Some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE Linux Enterprise Server (SLES), use the EC2 billing product code associated with an AMI to verify the subscription status for package updates. Creating an AMI from an EBS snapshot does not maintain this billing code, and instances launched from such an AMI are not able to connect to package update infrastructure. If you purchase a Reserved Instance offering for one of these Linux distributions and launch instances using an AMI that does not contain the required billing code, your Reserved Instance is not applied to these instances. To create an AMI for operating systems that require a billing code, see CreateImage. If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.
      */
    def registerImage(params: RegisterImageRequest): awsDashSdkLib.libRequestMod.Request[RegisterImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def registerImage(
      params: RegisterImageRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RegisterImageResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RegisterImageResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Rejects a request to attach a VPC to a transit gateway. The VPC attachment must be in the pendingAcceptance state. Use DescribeTransitGatewayVpcAttachments to view your pending VPC attachment requests. Use AcceptTransitGatewayVpcAttachment to accept a VPC attachment request.
      */
    def rejectTransitGatewayVpcAttachment(): awsDashSdkLib.libRequestMod.Request[RejectTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def rejectTransitGatewayVpcAttachment(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RejectTransitGatewayVpcAttachmentResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RejectTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Rejects a request to attach a VPC to a transit gateway. The VPC attachment must be in the pendingAcceptance state. Use DescribeTransitGatewayVpcAttachments to view your pending VPC attachment requests. Use AcceptTransitGatewayVpcAttachment to accept a VPC attachment request.
      */
    def rejectTransitGatewayVpcAttachment(params: RejectTransitGatewayVpcAttachmentRequest): awsDashSdkLib.libRequestMod.Request[RejectTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def rejectTransitGatewayVpcAttachment(
      params: RejectTransitGatewayVpcAttachmentRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RejectTransitGatewayVpcAttachmentResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RejectTransitGatewayVpcAttachmentResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Rejects one or more VPC endpoint connection requests to your VPC endpoint service.
      */
    def rejectVpcEndpointConnections(): awsDashSdkLib.libRequestMod.Request[RejectVpcEndpointConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def rejectVpcEndpointConnections(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RejectVpcEndpointConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RejectVpcEndpointConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Rejects one or more VPC endpoint connection requests to your VPC endpoint service.
      */
    def rejectVpcEndpointConnections(params: RejectVpcEndpointConnectionsRequest): awsDashSdkLib.libRequestMod.Request[RejectVpcEndpointConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def rejectVpcEndpointConnections(
      params: RejectVpcEndpointConnectionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RejectVpcEndpointConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RejectVpcEndpointConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Rejects a VPC peering connection request. The VPC peering connection must be in the pending-acceptance state. Use the DescribeVpcPeeringConnections request to view your outstanding VPC peering connection requests. To delete an active VPC peering connection, or to delete a VPC peering connection request that you initiated, use DeleteVpcPeeringConnection.
      */
    def rejectVpcPeeringConnection(): awsDashSdkLib.libRequestMod.Request[RejectVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def rejectVpcPeeringConnection(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RejectVpcPeeringConnectionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RejectVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Rejects a VPC peering connection request. The VPC peering connection must be in the pending-acceptance state. Use the DescribeVpcPeeringConnections request to view your outstanding VPC peering connection requests. To delete an active VPC peering connection, or to delete a VPC peering connection request that you initiated, use DeleteVpcPeeringConnection.
      */
    def rejectVpcPeeringConnection(params: RejectVpcPeeringConnectionRequest): awsDashSdkLib.libRequestMod.Request[RejectVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def rejectVpcPeeringConnection(
      params: RejectVpcPeeringConnectionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RejectVpcPeeringConnectionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RejectVpcPeeringConnectionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Releases the specified Elastic IP address. [EC2-Classic, default VPC] Releasing an Elastic IP address automatically disassociates it from any instance that it's associated with. To disassociate an Elastic IP address without releasing it, use DisassociateAddress. [Nondefault VPC] You must use DisassociateAddress to disassociate the Elastic IP address before you can release it. Otherwise, Amazon EC2 returns an error (InvalidIPAddress.InUse). After releasing an Elastic IP address, it is released to the IP address pool. Be sure to update your DNS records and any servers or devices that communicate with the address. If you attempt to release an Elastic IP address that you already released, you'll get an AuthFailure error if the address is already allocated to another AWS account. [EC2-VPC] After you release an Elastic IP address for use in a VPC, you might be able to recover it. For more information, see AllocateAddress.
      */
    def releaseAddress(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def releaseAddress(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Releases the specified Elastic IP address. [EC2-Classic, default VPC] Releasing an Elastic IP address automatically disassociates it from any instance that it's associated with. To disassociate an Elastic IP address without releasing it, use DisassociateAddress. [Nondefault VPC] You must use DisassociateAddress to disassociate the Elastic IP address before you can release it. Otherwise, Amazon EC2 returns an error (InvalidIPAddress.InUse). After releasing an Elastic IP address, it is released to the IP address pool. Be sure to update your DNS records and any servers or devices that communicate with the address. If you attempt to release an Elastic IP address that you already released, you'll get an AuthFailure error if the address is already allocated to another AWS account. [EC2-VPC] After you release an Elastic IP address for use in a VPC, you might be able to recover it. For more information, see AllocateAddress.
      */
    def releaseAddress(params: ReleaseAddressRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def releaseAddress(
      params: ReleaseAddressRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into released state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, for example, to modify the host. You must stop or terminate all instances on a host before it can be released. When Dedicated Hosts are released, it may take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated Hosts. Wait a few minutes and then try again. Released hosts still appear in a DescribeHosts response.
      */
    def releaseHosts(): awsDashSdkLib.libRequestMod.Request[ReleaseHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def releaseHosts(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ReleaseHostsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ReleaseHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into released state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, for example, to modify the host. You must stop or terminate all instances on a host before it can be released. When Dedicated Hosts are released, it may take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated Hosts. Wait a few minutes and then try again. Released hosts still appear in a DescribeHosts response.
      */
    def releaseHosts(params: ReleaseHostsRequest): awsDashSdkLib.libRequestMod.Request[ReleaseHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def releaseHosts(
      params: ReleaseHostsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ReleaseHostsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ReleaseHostsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that's associated with an instance without having to disassociate the existing IAM instance profile first. Use DescribeIamInstanceProfileAssociations to get the association ID.
      */
    def replaceIamInstanceProfileAssociation(): awsDashSdkLib.libRequestMod.Request[ReplaceIamInstanceProfileAssociationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def replaceIamInstanceProfileAssociation(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ReplaceIamInstanceProfileAssociationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ReplaceIamInstanceProfileAssociationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that's associated with an instance without having to disassociate the existing IAM instance profile first. Use DescribeIamInstanceProfileAssociations to get the association ID.
      */
    def replaceIamInstanceProfileAssociation(params: ReplaceIamInstanceProfileAssociationRequest): awsDashSdkLib.libRequestMod.Request[ReplaceIamInstanceProfileAssociationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def replaceIamInstanceProfileAssociation(
      params: ReplaceIamInstanceProfileAssociationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ReplaceIamInstanceProfileAssociationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ReplaceIamInstanceProfileAssociationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Changes which network ACL a subnet is associated with. By default when you create a subnet, it's automatically associated with the default network ACL. For more information, see Network ACLs in the Amazon Virtual Private Cloud User Guide. This is an idempotent operation.
      */
    def replaceNetworkAclAssociation(): awsDashSdkLib.libRequestMod.Request[ReplaceNetworkAclAssociationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def replaceNetworkAclAssociation(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ReplaceNetworkAclAssociationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ReplaceNetworkAclAssociationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Changes which network ACL a subnet is associated with. By default when you create a subnet, it's automatically associated with the default network ACL. For more information, see Network ACLs in the Amazon Virtual Private Cloud User Guide. This is an idempotent operation.
      */
    def replaceNetworkAclAssociation(params: ReplaceNetworkAclAssociationRequest): awsDashSdkLib.libRequestMod.Request[ReplaceNetworkAclAssociationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def replaceNetworkAclAssociation(
      params: ReplaceNetworkAclAssociationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ReplaceNetworkAclAssociationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ReplaceNetworkAclAssociationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Replaces an entry (rule) in a network ACL. For more information, see Network ACLs in the Amazon Virtual Private Cloud User Guide.
      */
    def replaceNetworkAclEntry(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def replaceNetworkAclEntry(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Replaces an entry (rule) in a network ACL. For more information, see Network ACLs in the Amazon Virtual Private Cloud User Guide.
      */
    def replaceNetworkAclEntry(params: ReplaceNetworkAclEntryRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def replaceNetworkAclEntry(
      params: ReplaceNetworkAclEntryRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Replaces an existing route within a route table in a VPC. You must provide only one of the following: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, or egress-only internet gateway. For more information, see Route Tables in the Amazon Virtual Private Cloud User Guide.
      */
    def replaceRoute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def replaceRoute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Replaces an existing route within a route table in a VPC. You must provide only one of the following: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, or egress-only internet gateway. For more information, see Route Tables in the Amazon Virtual Private Cloud User Guide.
      */
    def replaceRoute(params: ReplaceRouteRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def replaceRoute(
      params: ReplaceRouteRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Changes the route table associated with a given subnet in a VPC. After the operation completes, the subnet uses the routes in the new route table it's associated with. For more information about route tables, see Route Tables in the Amazon Virtual Private Cloud User Guide. You can also use ReplaceRouteTableAssociation to change which table is the main route table in the VPC. You just specify the main route table's association ID and the route table to be the new main route table.
      */
    def replaceRouteTableAssociation(): awsDashSdkLib.libRequestMod.Request[ReplaceRouteTableAssociationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def replaceRouteTableAssociation(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ReplaceRouteTableAssociationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ReplaceRouteTableAssociationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Changes the route table associated with a given subnet in a VPC. After the operation completes, the subnet uses the routes in the new route table it's associated with. For more information about route tables, see Route Tables in the Amazon Virtual Private Cloud User Guide. You can also use ReplaceRouteTableAssociation to change which table is the main route table in the VPC. You just specify the main route table's association ID and the route table to be the new main route table.
      */
    def replaceRouteTableAssociation(params: ReplaceRouteTableAssociationRequest): awsDashSdkLib.libRequestMod.Request[ReplaceRouteTableAssociationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def replaceRouteTableAssociation(
      params: ReplaceRouteTableAssociationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ReplaceRouteTableAssociationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ReplaceRouteTableAssociationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Replaces the specified route in the specified transit gateway route table.
      */
    def replaceTransitGatewayRoute(): awsDashSdkLib.libRequestMod.Request[ReplaceTransitGatewayRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def replaceTransitGatewayRoute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ReplaceTransitGatewayRouteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ReplaceTransitGatewayRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Replaces the specified route in the specified transit gateway route table.
      */
    def replaceTransitGatewayRoute(params: ReplaceTransitGatewayRouteRequest): awsDashSdkLib.libRequestMod.Request[ReplaceTransitGatewayRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def replaceTransitGatewayRoute(
      params: ReplaceTransitGatewayRouteRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ReplaceTransitGatewayRouteResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ReplaceTransitGatewayRouteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Submits feedback about the status of an instance. The instance must be in the running state. If your experience with the instance differs from the instance status returned by DescribeInstanceStatus, use ReportInstanceStatus to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks. Use of this action does not change the value returned by DescribeInstanceStatus.
      */
    def reportInstanceStatus(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def reportInstanceStatus(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Submits feedback about the status of an instance. The instance must be in the running state. If your experience with the instance differs from the instance status returned by DescribeInstanceStatus, use ReportInstanceStatus to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks. Use of this action does not change the value returned by DescribeInstanceStatus.
      */
    def reportInstanceStatus(params: ReportInstanceStatusRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def reportInstanceStatus(
      params: ReportInstanceStatusRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a Spot Fleet request. The Spot Fleet request specifies the total target capacity and the On-Demand target capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand capacity, and launches the difference as Spot capacity. You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet. By default, the Spot Fleet requests Spot Instances in the Spot pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload. Alternatively, you can specify that the Spot Fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot Instances in your Spot Fleet are in different Spot pools, you can improve the availability of your fleet. You can specify tags for the Spot Instances. You cannot tag other resource types in a Spot Fleet request because only the instance resource type is supported. For more information, see Spot Fleet Requests in the Amazon EC2 User Guide for Linux Instances.
      */
    def requestSpotFleet(): awsDashSdkLib.libRequestMod.Request[RequestSpotFleetResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def requestSpotFleet(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RequestSpotFleetResponse, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RequestSpotFleetResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a Spot Fleet request. The Spot Fleet request specifies the total target capacity and the On-Demand target capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand capacity, and launches the difference as Spot capacity. You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet. By default, the Spot Fleet requests Spot Instances in the Spot pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload. Alternatively, you can specify that the Spot Fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot Instances in your Spot Fleet are in different Spot pools, you can improve the availability of your fleet. You can specify tags for the Spot Instances. You cannot tag other resource types in a Spot Fleet request because only the instance resource type is supported. For more information, see Spot Fleet Requests in the Amazon EC2 User Guide for Linux Instances.
      */
    def requestSpotFleet(params: RequestSpotFleetRequest): awsDashSdkLib.libRequestMod.Request[RequestSpotFleetResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def requestSpotFleet(
      params: RequestSpotFleetRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RequestSpotFleetResponse, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RequestSpotFleetResponse, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a Spot Instance request. For more information, see Spot Instance Requests in the Amazon EC2 User Guide for Linux Instances.
      */
    def requestSpotInstances(): awsDashSdkLib.libRequestMod.Request[RequestSpotInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def requestSpotInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RequestSpotInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RequestSpotInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a Spot Instance request. For more information, see Spot Instance Requests in the Amazon EC2 User Guide for Linux Instances.
      */
    def requestSpotInstances(params: RequestSpotInstancesRequest): awsDashSdkLib.libRequestMod.Request[RequestSpotInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def requestSpotInstances(
      params: RequestSpotInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RequestSpotInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RequestSpotInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value. You can only reset the load permission attribute.
      */
    def resetFpgaImageAttribute(): awsDashSdkLib.libRequestMod.Request[ResetFpgaImageAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def resetFpgaImageAttribute(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ResetFpgaImageAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ResetFpgaImageAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value. You can only reset the load permission attribute.
      */
    def resetFpgaImageAttribute(params: ResetFpgaImageAttributeRequest): awsDashSdkLib.libRequestMod.Request[ResetFpgaImageAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def resetFpgaImageAttribute(
      params: ResetFpgaImageAttributeRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ResetFpgaImageAttributeResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ResetFpgaImageAttributeResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Resets an attribute of an AMI to its default value.  The productCodes attribute can't be reset. 
      */
    def resetImageAttribute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def resetImageAttribute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Resets an attribute of an AMI to its default value.  The productCodes attribute can't be reset. 
      */
    def resetImageAttribute(params: ResetImageAttributeRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def resetImageAttribute(
      params: ResetImageAttributeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Resets an attribute of an instance to its default value. To reset the kernel or ramdisk, the instance must be in a stopped state. To reset the sourceDestCheck, the instance can be either running or stopped. The sourceDestCheck attribute controls whether source/destination checking is enabled. The default value is true, which means checking is enabled. This value must be false for a NAT instance to perform NAT. For more information, see NAT Instances in the Amazon Virtual Private Cloud User Guide.
      */
    def resetInstanceAttribute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def resetInstanceAttribute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Resets an attribute of an instance to its default value. To reset the kernel or ramdisk, the instance must be in a stopped state. To reset the sourceDestCheck, the instance can be either running or stopped. The sourceDestCheck attribute controls whether source/destination checking is enabled. The default value is true, which means checking is enabled. This value must be false for a NAT instance to perform NAT. For more information, see NAT Instances in the Amazon Virtual Private Cloud User Guide.
      */
    def resetInstanceAttribute(params: ResetInstanceAttributeRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def resetInstanceAttribute(
      params: ResetInstanceAttributeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Resets a network interface attribute. You can specify only one attribute at a time.
      */
    def resetNetworkInterfaceAttribute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def resetNetworkInterfaceAttribute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Resets a network interface attribute. You can specify only one attribute at a time.
      */
    def resetNetworkInterfaceAttribute(params: ResetNetworkInterfaceAttributeRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def resetNetworkInterfaceAttribute(
      params: ResetNetworkInterfaceAttributeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Resets permission settings for the specified snapshot. For more information about modifying snapshot permissions, see Sharing Snapshots in the Amazon Elastic Compute Cloud User Guide.
      */
    def resetSnapshotAttribute(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def resetSnapshotAttribute(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Resets permission settings for the specified snapshot. For more information about modifying snapshot permissions, see Sharing Snapshots in the Amazon Elastic Compute Cloud User Guide.
      */
    def resetSnapshotAttribute(params: ResetSnapshotAttributeRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def resetSnapshotAttribute(
      params: ResetSnapshotAttributeRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.
      */
    def restoreAddressToClassic(): awsDashSdkLib.libRequestMod.Request[RestoreAddressToClassicResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def restoreAddressToClassic(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RestoreAddressToClassicResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RestoreAddressToClassicResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.
      */
    def restoreAddressToClassic(params: RestoreAddressToClassicRequest): awsDashSdkLib.libRequestMod.Request[RestoreAddressToClassicResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def restoreAddressToClassic(
      params: RestoreAddressToClassicRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RestoreAddressToClassicResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RestoreAddressToClassicResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Removes an ingress authorization rule from a Client VPN endpoint. 
      */
    def revokeClientVpnIngress(): awsDashSdkLib.libRequestMod.Request[RevokeClientVpnIngressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def revokeClientVpnIngress(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RevokeClientVpnIngressResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RevokeClientVpnIngressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Removes an ingress authorization rule from a Client VPN endpoint. 
      */
    def revokeClientVpnIngress(params: RevokeClientVpnIngressRequest): awsDashSdkLib.libRequestMod.Request[RevokeClientVpnIngressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def revokeClientVpnIngress(
      params: RevokeClientVpnIngressRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RevokeClientVpnIngressResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RevokeClientVpnIngressResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * [EC2-VPC only] Removes one or more egress rules from a security group for EC2-VPC. This action doesn't apply to security groups for use in EC2-Classic. To remove a rule, the values that you specify (for example, ports) must match the existing rule's values exactly. Each rule consists of the protocol and the IPv4 or IPv6 CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule. Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.
      */
    def revokeSecurityGroupEgress(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def revokeSecurityGroupEgress(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * [EC2-VPC only] Removes one or more egress rules from a security group for EC2-VPC. This action doesn't apply to security groups for use in EC2-Classic. To remove a rule, the values that you specify (for example, ports) must match the existing rule's values exactly. Each rule consists of the protocol and the IPv4 or IPv6 CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule. Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.
      */
    def revokeSecurityGroupEgress(params: RevokeSecurityGroupEgressRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def revokeSecurityGroupEgress(
      params: RevokeSecurityGroupEgressRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Removes one or more ingress rules from a security group. To remove a rule, the values that you specify (for example, ports) must match the existing rule's values exactly.  [EC2-Classic security groups only] If the values you specify do not match the existing rule's values, no error is returned. Use DescribeSecurityGroups to verify that the rule has been removed.  Each rule consists of the protocol and the CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule. Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.
      */
    def revokeSecurityGroupIngress(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def revokeSecurityGroupIngress(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Removes one or more ingress rules from a security group. To remove a rule, the values that you specify (for example, ports) must match the existing rule's values exactly.  [EC2-Classic security groups only] If the values you specify do not match the existing rule's values, no error is returned. Use DescribeSecurityGroups to verify that the rule has been removed.  Each rule consists of the protocol and the CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule. Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.
      */
    def revokeSecurityGroupIngress(params: RevokeSecurityGroupIngressRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def revokeSecurityGroupIngress(
      params: RevokeSecurityGroupIngressRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Launches the specified number of instances using an AMI for which you have permissions.  You can specify a number of options, or leave the default options. The following rules apply:   [EC2-VPC] If you don't specify a subnet ID, we choose a default subnet from your default VPC for you. If you don't have a default VPC, you must specify a subnet ID in the request.   [EC2-Classic] If don't specify an Availability Zone, we choose one for you.   Some instance types must be launched into a VPC. If you do not have a default VPC, or if you do not specify a subnet ID, the request fails. For more information, see Instance Types Available Only in a VPC.   [EC2-VPC] All instances have a network interface with a primary private IPv4 address. If you don't specify this address, we choose one from the IPv4 range of your subnet.   Not all instance types support IPv6 addresses. For more information, see Instance Types.   If you don't specify a security group ID, we use the default security group. For more information, see Security Groups.   If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.   You can create a launch template, which is a resource that contains the parameters to launch an instance. When you launch an instance using RunInstances, you can specify the launch template instead of specifying the launch parameters. To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances. An instance is ready for you to use when it's in the running state. You can check the state of your instance using DescribeInstances. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see CreateTags and Tagging Your Amazon EC2 Resources. Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see Key Pairs in the Amazon Elastic Compute Cloud User Guide. For troubleshooting, see What To Do If An Instance Immediately Terminates, and Troubleshooting Connecting to Your Instance in the Amazon Elastic Compute Cloud User Guide.
      */
    def runInstances(): awsDashSdkLib.libRequestMod.Request[Reservation, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def runInstances(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ Reservation, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[Reservation, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Launches the specified number of instances using an AMI for which you have permissions.  You can specify a number of options, or leave the default options. The following rules apply:   [EC2-VPC] If you don't specify a subnet ID, we choose a default subnet from your default VPC for you. If you don't have a default VPC, you must specify a subnet ID in the request.   [EC2-Classic] If don't specify an Availability Zone, we choose one for you.   Some instance types must be launched into a VPC. If you do not have a default VPC, or if you do not specify a subnet ID, the request fails. For more information, see Instance Types Available Only in a VPC.   [EC2-VPC] All instances have a network interface with a primary private IPv4 address. If you don't specify this address, we choose one from the IPv4 range of your subnet.   Not all instance types support IPv6 addresses. For more information, see Instance Types.   If you don't specify a security group ID, we use the default security group. For more information, see Security Groups.   If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.   You can create a launch template, which is a resource that contains the parameters to launch an instance. When you launch an instance using RunInstances, you can specify the launch template instead of specifying the launch parameters. To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances. An instance is ready for you to use when it's in the running state. You can check the state of your instance using DescribeInstances. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see CreateTags and Tagging Your Amazon EC2 Resources. Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see Key Pairs in the Amazon Elastic Compute Cloud User Guide. For troubleshooting, see What To Do If An Instance Immediately Terminates, and Troubleshooting Connecting to Your Instance in the Amazon Elastic Compute Cloud User Guide.
      */
    def runInstances(params: RunInstancesRequest): awsDashSdkLib.libRequestMod.Request[Reservation, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def runInstances(
      params: RunInstancesRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ Reservation, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[Reservation, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Launches the specified Scheduled Instances. Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using PurchaseScheduledInstances. You must launch a Scheduled Instance during its scheduled time period. You can't stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes. For more information, see Scheduled Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def runScheduledInstances(): awsDashSdkLib.libRequestMod.Request[RunScheduledInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def runScheduledInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RunScheduledInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RunScheduledInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Launches the specified Scheduled Instances. Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using PurchaseScheduledInstances. You must launch a Scheduled Instance during its scheduled time period. You can't stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes. For more information, see Scheduled Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def runScheduledInstances(params: RunScheduledInstancesRequest): awsDashSdkLib.libRequestMod.Request[RunScheduledInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def runScheduledInstances(
      params: RunScheduledInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RunScheduledInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RunScheduledInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Searches for routes in the specified transit gateway route table.
      */
    def searchTransitGatewayRoutes(): awsDashSdkLib.libRequestMod.Request[SearchTransitGatewayRoutesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def searchTransitGatewayRoutes(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ SearchTransitGatewayRoutesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[SearchTransitGatewayRoutesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Searches for routes in the specified transit gateway route table.
      */
    def searchTransitGatewayRoutes(params: SearchTransitGatewayRoutesRequest): awsDashSdkLib.libRequestMod.Request[SearchTransitGatewayRoutesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def searchTransitGatewayRoutes(
      params: SearchTransitGatewayRoutesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ SearchTransitGatewayRoutesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[SearchTransitGatewayRoutesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Starts an Amazon EBS-backed instance that you've previously stopped. Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage. Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM. Performing this operation on an instance that uses an instance store as its root device returns an error. For more information, see Stopping Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def startInstances(): awsDashSdkLib.libRequestMod.Request[StartInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def startInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ StartInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[StartInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Starts an Amazon EBS-backed instance that you've previously stopped. Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage. Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM. Performing this operation on an instance that uses an instance store as its root device returns an error. For more information, see Stopping Instances in the Amazon Elastic Compute Cloud User Guide.
      */
    def startInstances(params: StartInstancesRequest): awsDashSdkLib.libRequestMod.Request[StartInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def startInstances(
      params: StartInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ StartInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[StartInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Stops an Amazon EBS-backed instance. You can use the Stop action to hibernate an instance if the instance is enabled for hibernation and it meets the hibernation prerequisites. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide. We don't charge usage for a stopped instance, or data transfer fees; however, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage. You can't start, stop, or hibernate Spot Instances, and you can't stop or hibernate instance store-backed instances. For information about using hibernation for Spot Instances, see Hibernating Interrupted Spot Instances in the Amazon Elastic Compute Cloud User Guide. When you stop or hibernate an instance, we shut it down. You can restart your instance at any time. Before stopping or hibernating an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM, but hibernating an instance does preserve data stored in RAM. If an instance cannot hibernate successfully, a normal shutdown occurs. Stopping and hibernating an instance is different to rebooting or terminating it. For example, when you stop or hibernate an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences between rebooting, stopping, hibernating, and terminating instances, see Instance Lifecycle in the Amazon Elastic Compute Cloud User Guide. When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see Troubleshooting Stopping Your Instance in the Amazon Elastic Compute Cloud User Guide.
      */
    def stopInstances(): awsDashSdkLib.libRequestMod.Request[StopInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def stopInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ StopInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[StopInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Stops an Amazon EBS-backed instance. You can use the Stop action to hibernate an instance if the instance is enabled for hibernation and it meets the hibernation prerequisites. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide. We don't charge usage for a stopped instance, or data transfer fees; however, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage. You can't start, stop, or hibernate Spot Instances, and you can't stop or hibernate instance store-backed instances. For information about using hibernation for Spot Instances, see Hibernating Interrupted Spot Instances in the Amazon Elastic Compute Cloud User Guide. When you stop or hibernate an instance, we shut it down. You can restart your instance at any time. Before stopping or hibernating an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM, but hibernating an instance does preserve data stored in RAM. If an instance cannot hibernate successfully, a normal shutdown occurs. Stopping and hibernating an instance is different to rebooting or terminating it. For example, when you stop or hibernate an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences between rebooting, stopping, hibernating, and terminating instances, see Instance Lifecycle in the Amazon Elastic Compute Cloud User Guide. When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see Troubleshooting Stopping Your Instance in the Amazon Elastic Compute Cloud User Guide.
      */
    def stopInstances(params: StopInstancesRequest): awsDashSdkLib.libRequestMod.Request[StopInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def stopInstances(
      params: StopInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ StopInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[StopInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.
      */
    def terminateClientVpnConnections(): awsDashSdkLib.libRequestMod.Request[TerminateClientVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def terminateClientVpnConnections(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ TerminateClientVpnConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[TerminateClientVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.
      */
    def terminateClientVpnConnections(params: TerminateClientVpnConnectionsRequest): awsDashSdkLib.libRequestMod.Request[TerminateClientVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def terminateClientVpnConnections(
      params: TerminateClientVpnConnectionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ TerminateClientVpnConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[TerminateClientVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Shuts down one or more instances. This operation is idempotent; if you terminate an instance more than once, each call succeeds.  If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated. Terminated instances remain visible after termination (for approximately one hour). By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running. You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the DeleteOnTermination block device mapping parameter set to true are automatically deleted. For more information about the differences between stopping and terminating instances, see Instance Lifecycle in the Amazon Elastic Compute Cloud User Guide. For more information about troubleshooting, see Troubleshooting Terminating Your Instance in the Amazon Elastic Compute Cloud User Guide.
      */
    def terminateInstances(): awsDashSdkLib.libRequestMod.Request[TerminateInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def terminateInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ TerminateInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[TerminateInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Shuts down one or more instances. This operation is idempotent; if you terminate an instance more than once, each call succeeds.  If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated. Terminated instances remain visible after termination (for approximately one hour). By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running. You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the DeleteOnTermination block device mapping parameter set to true are automatically deleted. For more information about the differences between stopping and terminating instances, see Instance Lifecycle in the Amazon Elastic Compute Cloud User Guide. For more information about troubleshooting, see Troubleshooting Terminating Your Instance in the Amazon Elastic Compute Cloud User Guide.
      */
    def terminateInstances(params: TerminateInstancesRequest): awsDashSdkLib.libRequestMod.Request[TerminateInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def terminateInstances(
      params: TerminateInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ TerminateInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[TerminateInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Unassigns one or more IPv6 addresses from a network interface.
      */
    def unassignIpv6Addresses(): awsDashSdkLib.libRequestMod.Request[UnassignIpv6AddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def unassignIpv6Addresses(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UnassignIpv6AddressesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UnassignIpv6AddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Unassigns one or more IPv6 addresses from a network interface.
      */
    def unassignIpv6Addresses(params: UnassignIpv6AddressesRequest): awsDashSdkLib.libRequestMod.Request[UnassignIpv6AddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def unassignIpv6Addresses(
      params: UnassignIpv6AddressesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UnassignIpv6AddressesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UnassignIpv6AddressesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Unassigns one or more secondary private IP addresses from a network interface.
      */
    def unassignPrivateIpAddresses(): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def unassignPrivateIpAddresses(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Unassigns one or more secondary private IP addresses from a network interface.
      */
    def unassignPrivateIpAddresses(params: UnassignPrivateIpAddressesRequest): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def unassignPrivateIpAddresses(
      params: UnassignPrivateIpAddressesRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ js.Object, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[js.Object, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disables detailed monitoring for a running instance. For more information, see Monitoring Your Instances and Volumes in the Amazon Elastic Compute Cloud User Guide.
      */
    def unmonitorInstances(): awsDashSdkLib.libRequestMod.Request[UnmonitorInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def unmonitorInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UnmonitorInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UnmonitorInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Disables detailed monitoring for a running instance. For more information, see Monitoring Your Instances and Volumes in the Amazon Elastic Compute Cloud User Guide.
      */
    def unmonitorInstances(params: UnmonitorInstancesRequest): awsDashSdkLib.libRequestMod.Request[UnmonitorInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def unmonitorInstances(
      params: UnmonitorInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UnmonitorInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UnmonitorInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * [EC2-VPC only] Updates the description of an egress (outbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously. You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.
      */
    def updateSecurityGroupRuleDescriptionsEgress(): awsDashSdkLib.libRequestMod.Request[
        UpdateSecurityGroupRuleDescriptionsEgressResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def updateSecurityGroupRuleDescriptionsEgress(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateSecurityGroupRuleDescriptionsEgressResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        UpdateSecurityGroupRuleDescriptionsEgressResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * [EC2-VPC only] Updates the description of an egress (outbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously. You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.
      */
    def updateSecurityGroupRuleDescriptionsEgress(params: UpdateSecurityGroupRuleDescriptionsEgressRequest): awsDashSdkLib.libRequestMod.Request[
        UpdateSecurityGroupRuleDescriptionsEgressResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def updateSecurityGroupRuleDescriptionsEgress(
      params: UpdateSecurityGroupRuleDescriptionsEgressRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateSecurityGroupRuleDescriptionsEgressResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        UpdateSecurityGroupRuleDescriptionsEgressResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously. You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.
      */
    def updateSecurityGroupRuleDescriptionsIngress(): awsDashSdkLib.libRequestMod.Request[
        UpdateSecurityGroupRuleDescriptionsIngressResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def updateSecurityGroupRuleDescriptionsIngress(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateSecurityGroupRuleDescriptionsIngressResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        UpdateSecurityGroupRuleDescriptionsIngressResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously. You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.
      */
    def updateSecurityGroupRuleDescriptionsIngress(params: UpdateSecurityGroupRuleDescriptionsIngressRequest): awsDashSdkLib.libRequestMod.Request[
        UpdateSecurityGroupRuleDescriptionsIngressResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    def updateSecurityGroupRuleDescriptionsIngress(
      params: UpdateSecurityGroupRuleDescriptionsIngressRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateSecurityGroupRuleDescriptionsIngressResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[
        UpdateSecurityGroupRuleDescriptionsIngressResult, 
        awsDashSdkLib.libErrorMod.AWSError
      ] = js.native
    /**
      * Waits for the bundleTaskComplete state by periodically calling the underlying EC2.describeBundleTasksoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_bundleTaskComplete(state: awsDashSdkLib.awsDashSdkLibStrings.bundleTaskComplete): awsDashSdkLib.libRequestMod.Request[DescribeBundleTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_bundleTaskComplete(
      state: awsDashSdkLib.awsDashSdkLibStrings.bundleTaskComplete,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeBundleTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeBundleTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the bundleTaskComplete state by periodically calling the underlying EC2.describeBundleTasksoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_bundleTaskComplete(
      state: awsDashSdkLib.awsDashSdkLibStrings.bundleTaskComplete,
      params: DescribeBundleTasksRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeBundleTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_bundleTaskComplete(
      state: awsDashSdkLib.awsDashSdkLibStrings.bundleTaskComplete,
      params: DescribeBundleTasksRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeBundleTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeBundleTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the conversionTaskCancelled state by periodically calling the underlying EC2.describeConversionTasksoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_conversionTaskCancelled(state: awsDashSdkLib.awsDashSdkLibStrings.conversionTaskCancelled): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_conversionTaskCancelled(
      state: awsDashSdkLib.awsDashSdkLibStrings.conversionTaskCancelled,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeConversionTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the conversionTaskCancelled state by periodically calling the underlying EC2.describeConversionTasksoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_conversionTaskCancelled(
      state: awsDashSdkLib.awsDashSdkLibStrings.conversionTaskCancelled,
      params: DescribeConversionTasksRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_conversionTaskCancelled(
      state: awsDashSdkLib.awsDashSdkLibStrings.conversionTaskCancelled,
      params: DescribeConversionTasksRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeConversionTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the conversionTaskCompleted state by periodically calling the underlying EC2.describeConversionTasksoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_conversionTaskCompleted(state: awsDashSdkLib.awsDashSdkLibStrings.conversionTaskCompleted): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_conversionTaskCompleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.conversionTaskCompleted,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeConversionTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the conversionTaskCompleted state by periodically calling the underlying EC2.describeConversionTasksoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_conversionTaskCompleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.conversionTaskCompleted,
      params: DescribeConversionTasksRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_conversionTaskCompleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.conversionTaskCompleted,
      params: DescribeConversionTasksRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeConversionTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the conversionTaskDeleted state by periodically calling the underlying EC2.describeConversionTasksoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_conversionTaskDeleted(state: awsDashSdkLib.awsDashSdkLibStrings.conversionTaskDeleted): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_conversionTaskDeleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.conversionTaskDeleted,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeConversionTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the conversionTaskDeleted state by periodically calling the underlying EC2.describeConversionTasksoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_conversionTaskDeleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.conversionTaskDeleted,
      params: DescribeConversionTasksRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_conversionTaskDeleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.conversionTaskDeleted,
      params: DescribeConversionTasksRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeConversionTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeConversionTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the customerGatewayAvailable state by periodically calling the underlying EC2.describeCustomerGatewaysoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_customerGatewayAvailable(state: awsDashSdkLib.awsDashSdkLibStrings.customerGatewayAvailable): awsDashSdkLib.libRequestMod.Request[DescribeCustomerGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_customerGatewayAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.customerGatewayAvailable,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeCustomerGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeCustomerGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the customerGatewayAvailable state by periodically calling the underlying EC2.describeCustomerGatewaysoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_customerGatewayAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.customerGatewayAvailable,
      params: DescribeCustomerGatewaysRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeCustomerGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_customerGatewayAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.customerGatewayAvailable,
      params: DescribeCustomerGatewaysRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeCustomerGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeCustomerGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the exportTaskCancelled state by periodically calling the underlying EC2.describeExportTasksoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_exportTaskCancelled(state: awsDashSdkLib.awsDashSdkLibStrings.exportTaskCancelled): awsDashSdkLib.libRequestMod.Request[DescribeExportTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_exportTaskCancelled(
      state: awsDashSdkLib.awsDashSdkLibStrings.exportTaskCancelled,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeExportTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeExportTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the exportTaskCancelled state by periodically calling the underlying EC2.describeExportTasksoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_exportTaskCancelled(
      state: awsDashSdkLib.awsDashSdkLibStrings.exportTaskCancelled,
      params: DescribeExportTasksRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeExportTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_exportTaskCancelled(
      state: awsDashSdkLib.awsDashSdkLibStrings.exportTaskCancelled,
      params: DescribeExportTasksRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeExportTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeExportTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the exportTaskCompleted state by periodically calling the underlying EC2.describeExportTasksoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_exportTaskCompleted(state: awsDashSdkLib.awsDashSdkLibStrings.exportTaskCompleted): awsDashSdkLib.libRequestMod.Request[DescribeExportTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_exportTaskCompleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.exportTaskCompleted,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeExportTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeExportTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the exportTaskCompleted state by periodically calling the underlying EC2.describeExportTasksoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_exportTaskCompleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.exportTaskCompleted,
      params: DescribeExportTasksRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeExportTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_exportTaskCompleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.exportTaskCompleted,
      params: DescribeExportTasksRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeExportTasksResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeExportTasksResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the imageAvailable state by periodically calling the underlying EC2.describeImagesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_imageAvailable(state: awsDashSdkLib.awsDashSdkLibStrings.imageAvailable): awsDashSdkLib.libRequestMod.Request[DescribeImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_imageAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.imageAvailable,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeImagesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the imageAvailable state by periodically calling the underlying EC2.describeImagesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_imageAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.imageAvailable,
      params: DescribeImagesRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_imageAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.imageAvailable,
      params: DescribeImagesRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeImagesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the imageExists state by periodically calling the underlying EC2.describeImagesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_imageExists(state: awsDashSdkLib.awsDashSdkLibStrings.imageExists): awsDashSdkLib.libRequestMod.Request[DescribeImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_imageExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.imageExists,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeImagesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the imageExists state by periodically calling the underlying EC2.describeImagesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_imageExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.imageExists,
      params: DescribeImagesRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_imageExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.imageExists,
      params: DescribeImagesRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeImagesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeImagesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the instanceExists state by periodically calling the underlying EC2.describeInstancesoperation every 5 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_instanceExists(state: awsDashSdkLib.awsDashSdkLibStrings.instanceExists): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_instanceExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceExists,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the instanceExists state by periodically calling the underlying EC2.describeInstancesoperation every 5 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_instanceExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceExists,
      params: DescribeInstancesRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_instanceExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceExists,
      params: DescribeInstancesRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the instanceRunning state by periodically calling the underlying EC2.describeInstancesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_instanceRunning(state: awsDashSdkLib.awsDashSdkLibStrings.instanceRunning): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_instanceRunning(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceRunning,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the instanceRunning state by periodically calling the underlying EC2.describeInstancesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_instanceRunning(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceRunning,
      params: DescribeInstancesRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_instanceRunning(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceRunning,
      params: DescribeInstancesRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the instanceStatusOk state by periodically calling the underlying EC2.describeInstanceStatusoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_instanceStatusOk(state: awsDashSdkLib.awsDashSdkLibStrings.instanceStatusOk): awsDashSdkLib.libRequestMod.Request[DescribeInstanceStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_instanceStatusOk(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceStatusOk,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstanceStatusResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstanceStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the instanceStatusOk state by periodically calling the underlying EC2.describeInstanceStatusoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_instanceStatusOk(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceStatusOk,
      params: DescribeInstanceStatusRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstanceStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_instanceStatusOk(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceStatusOk,
      params: DescribeInstanceStatusRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstanceStatusResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstanceStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the instanceStopped state by periodically calling the underlying EC2.describeInstancesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_instanceStopped(state: awsDashSdkLib.awsDashSdkLibStrings.instanceStopped): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_instanceStopped(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceStopped,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the instanceStopped state by periodically calling the underlying EC2.describeInstancesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_instanceStopped(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceStopped,
      params: DescribeInstancesRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_instanceStopped(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceStopped,
      params: DescribeInstancesRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the instanceTerminated state by periodically calling the underlying EC2.describeInstancesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_instanceTerminated(state: awsDashSdkLib.awsDashSdkLibStrings.instanceTerminated): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_instanceTerminated(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceTerminated,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the instanceTerminated state by periodically calling the underlying EC2.describeInstancesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_instanceTerminated(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceTerminated,
      params: DescribeInstancesRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_instanceTerminated(
      state: awsDashSdkLib.awsDashSdkLibStrings.instanceTerminated,
      params: DescribeInstancesRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the keyPairExists state by periodically calling the underlying EC2.describeKeyPairsoperation every 5 seconds (at most 6 times).
      */
    @JSName("waitFor")
    def waitFor_keyPairExists(state: awsDashSdkLib.awsDashSdkLibStrings.keyPairExists): awsDashSdkLib.libRequestMod.Request[DescribeKeyPairsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_keyPairExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.keyPairExists,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeKeyPairsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeKeyPairsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the keyPairExists state by periodically calling the underlying EC2.describeKeyPairsoperation every 5 seconds (at most 6 times).
      */
    @JSName("waitFor")
    def waitFor_keyPairExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.keyPairExists,
      params: DescribeKeyPairsRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeKeyPairsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_keyPairExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.keyPairExists,
      params: DescribeKeyPairsRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeKeyPairsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeKeyPairsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the natGatewayAvailable state by periodically calling the underlying EC2.describeNatGatewaysoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_natGatewayAvailable(state: awsDashSdkLib.awsDashSdkLibStrings.natGatewayAvailable): awsDashSdkLib.libRequestMod.Request[DescribeNatGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_natGatewayAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.natGatewayAvailable,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNatGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNatGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the natGatewayAvailable state by periodically calling the underlying EC2.describeNatGatewaysoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_natGatewayAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.natGatewayAvailable,
      params: DescribeNatGatewaysRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeNatGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_natGatewayAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.natGatewayAvailable,
      params: DescribeNatGatewaysRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNatGatewaysResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNatGatewaysResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the networkInterfaceAvailable state by periodically calling the underlying EC2.describeNetworkInterfacesoperation every 20 seconds (at most 10 times).
      */
    @JSName("waitFor")
    def waitFor_networkInterfaceAvailable(state: awsDashSdkLib.awsDashSdkLibStrings.networkInterfaceAvailable): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfacesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_networkInterfaceAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.networkInterfaceAvailable,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNetworkInterfacesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfacesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the networkInterfaceAvailable state by periodically calling the underlying EC2.describeNetworkInterfacesoperation every 20 seconds (at most 10 times).
      */
    @JSName("waitFor")
    def waitFor_networkInterfaceAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.networkInterfaceAvailable,
      params: DescribeNetworkInterfacesRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfacesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_networkInterfaceAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.networkInterfaceAvailable,
      params: DescribeNetworkInterfacesRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeNetworkInterfacesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeNetworkInterfacesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the passwordDataAvailable state by periodically calling the underlying EC2.getPasswordDataoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_passwordDataAvailable(state: awsDashSdkLib.awsDashSdkLibStrings.passwordDataAvailable): awsDashSdkLib.libRequestMod.Request[GetPasswordDataResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_passwordDataAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.passwordDataAvailable,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetPasswordDataResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetPasswordDataResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the passwordDataAvailable state by periodically calling the underlying EC2.getPasswordDataoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_passwordDataAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.passwordDataAvailable,
      params: GetPasswordDataRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[GetPasswordDataResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_passwordDataAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.passwordDataAvailable,
      params: GetPasswordDataRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetPasswordDataResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetPasswordDataResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the snapshotCompleted state by periodically calling the underlying EC2.describeSnapshotsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_snapshotCompleted(state: awsDashSdkLib.awsDashSdkLibStrings.snapshotCompleted): awsDashSdkLib.libRequestMod.Request[DescribeSnapshotsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_snapshotCompleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.snapshotCompleted,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSnapshotsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSnapshotsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the snapshotCompleted state by periodically calling the underlying EC2.describeSnapshotsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_snapshotCompleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.snapshotCompleted,
      params: DescribeSnapshotsRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeSnapshotsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_snapshotCompleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.snapshotCompleted,
      params: DescribeSnapshotsRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSnapshotsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSnapshotsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the spotInstanceRequestFulfilled state by periodically calling the underlying EC2.describeSpotInstanceRequestsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_spotInstanceRequestFulfilled(state: awsDashSdkLib.awsDashSdkLibStrings.spotInstanceRequestFulfilled): awsDashSdkLib.libRequestMod.Request[DescribeSpotInstanceRequestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_spotInstanceRequestFulfilled(
      state: awsDashSdkLib.awsDashSdkLibStrings.spotInstanceRequestFulfilled,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotInstanceRequestsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotInstanceRequestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the spotInstanceRequestFulfilled state by periodically calling the underlying EC2.describeSpotInstanceRequestsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_spotInstanceRequestFulfilled(
      state: awsDashSdkLib.awsDashSdkLibStrings.spotInstanceRequestFulfilled,
      params: DescribeSpotInstanceRequestsRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotInstanceRequestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_spotInstanceRequestFulfilled(
      state: awsDashSdkLib.awsDashSdkLibStrings.spotInstanceRequestFulfilled,
      params: DescribeSpotInstanceRequestsRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSpotInstanceRequestsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSpotInstanceRequestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the subnetAvailable state by periodically calling the underlying EC2.describeSubnetsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_subnetAvailable(state: awsDashSdkLib.awsDashSdkLibStrings.subnetAvailable): awsDashSdkLib.libRequestMod.Request[DescribeSubnetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_subnetAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.subnetAvailable,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSubnetsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSubnetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the subnetAvailable state by periodically calling the underlying EC2.describeSubnetsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_subnetAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.subnetAvailable,
      params: DescribeSubnetsRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeSubnetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_subnetAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.subnetAvailable,
      params: DescribeSubnetsRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeSubnetsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeSubnetsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the systemStatusOk state by periodically calling the underlying EC2.describeInstanceStatusoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_systemStatusOk(state: awsDashSdkLib.awsDashSdkLibStrings.systemStatusOk): awsDashSdkLib.libRequestMod.Request[DescribeInstanceStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_systemStatusOk(
      state: awsDashSdkLib.awsDashSdkLibStrings.systemStatusOk,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstanceStatusResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstanceStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the systemStatusOk state by periodically calling the underlying EC2.describeInstanceStatusoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_systemStatusOk(
      state: awsDashSdkLib.awsDashSdkLibStrings.systemStatusOk,
      params: DescribeInstanceStatusRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstanceStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_systemStatusOk(
      state: awsDashSdkLib.awsDashSdkLibStrings.systemStatusOk,
      params: DescribeInstanceStatusRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeInstanceStatusResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeInstanceStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the volumeAvailable state by periodically calling the underlying EC2.describeVolumesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_volumeAvailable(state: awsDashSdkLib.awsDashSdkLibStrings.volumeAvailable): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_volumeAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.volumeAvailable,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the volumeAvailable state by periodically calling the underlying EC2.describeVolumesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_volumeAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.volumeAvailable,
      params: DescribeVolumesRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_volumeAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.volumeAvailable,
      params: DescribeVolumesRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the volumeDeleted state by periodically calling the underlying EC2.describeVolumesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_volumeDeleted(state: awsDashSdkLib.awsDashSdkLibStrings.volumeDeleted): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_volumeDeleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.volumeDeleted,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the volumeDeleted state by periodically calling the underlying EC2.describeVolumesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_volumeDeleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.volumeDeleted,
      params: DescribeVolumesRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_volumeDeleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.volumeDeleted,
      params: DescribeVolumesRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the volumeInUse state by periodically calling the underlying EC2.describeVolumesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_volumeInUse(state: awsDashSdkLib.awsDashSdkLibStrings.volumeInUse): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_volumeInUse(
      state: awsDashSdkLib.awsDashSdkLibStrings.volumeInUse,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the volumeInUse state by periodically calling the underlying EC2.describeVolumesoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_volumeInUse(
      state: awsDashSdkLib.awsDashSdkLibStrings.volumeInUse,
      params: DescribeVolumesRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_volumeInUse(
      state: awsDashSdkLib.awsDashSdkLibStrings.volumeInUse,
      params: DescribeVolumesRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVolumesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVolumesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the vpcAvailable state by periodically calling the underlying EC2.describeVpcsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_vpcAvailable(state: awsDashSdkLib.awsDashSdkLibStrings.vpcAvailable): awsDashSdkLib.libRequestMod.Request[DescribeVpcsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_vpcAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpcAvailable,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the vpcAvailable state by periodically calling the underlying EC2.describeVpcsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_vpcAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpcAvailable,
      params: DescribeVpcsRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_vpcAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpcAvailable,
      params: DescribeVpcsRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the vpcExists state by periodically calling the underlying EC2.describeVpcsoperation every 1 seconds (at most 5 times).
      */
    @JSName("waitFor")
    def waitFor_vpcExists(state: awsDashSdkLib.awsDashSdkLibStrings.vpcExists): awsDashSdkLib.libRequestMod.Request[DescribeVpcsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_vpcExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpcExists,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the vpcExists state by periodically calling the underlying EC2.describeVpcsoperation every 1 seconds (at most 5 times).
      */
    @JSName("waitFor")
    def waitFor_vpcExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpcExists,
      params: DescribeVpcsRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_vpcExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpcExists,
      params: DescribeVpcsRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the vpcPeeringConnectionDeleted state by periodically calling the underlying EC2.describeVpcPeeringConnectionsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_vpcPeeringConnectionDeleted(state: awsDashSdkLib.awsDashSdkLibStrings.vpcPeeringConnectionDeleted): awsDashSdkLib.libRequestMod.Request[DescribeVpcPeeringConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_vpcPeeringConnectionDeleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpcPeeringConnectionDeleted,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcPeeringConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcPeeringConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the vpcPeeringConnectionDeleted state by periodically calling the underlying EC2.describeVpcPeeringConnectionsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_vpcPeeringConnectionDeleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpcPeeringConnectionDeleted,
      params: DescribeVpcPeeringConnectionsRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcPeeringConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_vpcPeeringConnectionDeleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpcPeeringConnectionDeleted,
      params: DescribeVpcPeeringConnectionsRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcPeeringConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcPeeringConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the vpcPeeringConnectionExists state by periodically calling the underlying EC2.describeVpcPeeringConnectionsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_vpcPeeringConnectionExists(state: awsDashSdkLib.awsDashSdkLibStrings.vpcPeeringConnectionExists): awsDashSdkLib.libRequestMod.Request[DescribeVpcPeeringConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_vpcPeeringConnectionExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpcPeeringConnectionExists,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcPeeringConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcPeeringConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the vpcPeeringConnectionExists state by periodically calling the underlying EC2.describeVpcPeeringConnectionsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_vpcPeeringConnectionExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpcPeeringConnectionExists,
      params: DescribeVpcPeeringConnectionsRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcPeeringConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_vpcPeeringConnectionExists(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpcPeeringConnectionExists,
      params: DescribeVpcPeeringConnectionsRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpcPeeringConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpcPeeringConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the vpnConnectionAvailable state by periodically calling the underlying EC2.describeVpnConnectionsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_vpnConnectionAvailable(state: awsDashSdkLib.awsDashSdkLibStrings.vpnConnectionAvailable): awsDashSdkLib.libRequestMod.Request[DescribeVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_vpnConnectionAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpnConnectionAvailable,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpnConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the vpnConnectionAvailable state by periodically calling the underlying EC2.describeVpnConnectionsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_vpnConnectionAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpnConnectionAvailable,
      params: DescribeVpnConnectionsRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_vpnConnectionAvailable(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpnConnectionAvailable,
      params: DescribeVpnConnectionsRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpnConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the vpnConnectionDeleted state by periodically calling the underlying EC2.describeVpnConnectionsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_vpnConnectionDeleted(state: awsDashSdkLib.awsDashSdkLibStrings.vpnConnectionDeleted): awsDashSdkLib.libRequestMod.Request[DescribeVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_vpnConnectionDeleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpnConnectionDeleted,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpnConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Waits for the vpnConnectionDeleted state by periodically calling the underlying EC2.describeVpnConnectionsoperation every 15 seconds (at most 40 times).
      */
    @JSName("waitFor")
    def waitFor_vpnConnectionDeleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpnConnectionDeleted,
      params: DescribeVpnConnectionsRequest with awsDashSdkLib.Anon_Waiter
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    @JSName("waitFor")
    def waitFor_vpnConnectionDeleted(
      state: awsDashSdkLib.awsDashSdkLibStrings.vpnConnectionDeleted,
      params: DescribeVpnConnectionsRequest with awsDashSdkLib.Anon_Waiter,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DescribeVpnConnectionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DescribeVpnConnectionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Stops advertising an IPv4 address range that is provisioned as an address pool. You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time. It can take a few minutes before traffic to the specified addresses stops routing to AWS because of BGP propagation delays.
      */
    def withdrawByoipCidr(): awsDashSdkLib.libRequestMod.Request[WithdrawByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def withdrawByoipCidr(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ WithdrawByoipCidrResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[WithdrawByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Stops advertising an IPv4 address range that is provisioned as an address pool. You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time. It can take a few minutes before traffic to the specified addresses stops routing to AWS because of BGP propagation delays.
      */
    def withdrawByoipCidr(params: WithdrawByoipCidrRequest): awsDashSdkLib.libRequestMod.Request[WithdrawByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def withdrawByoipCidr(
      params: WithdrawByoipCidrRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ WithdrawByoipCidrResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[WithdrawByoipCidrResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
  }
  
  trait UnassignIpv6AddressesRequest extends js.Object {
    /**
      * The IPv6 addresses to unassign from the network interface.
      */
    var Ipv6Addresses: Ipv6AddressList
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: String
  }
  
  trait UnassignIpv6AddressesResult extends js.Object {
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: js.UndefOr[String] = js.undefined
    /**
      * The IPv6 addresses that have been unassigned from the network interface.
      */
    var UnassignedIpv6Addresses: js.UndefOr[Ipv6AddressList] = js.undefined
  }
  
  trait UnassignPrivateIpAddressesRequest extends js.Object {
    /**
      * The ID of the network interface.
      */
    var NetworkInterfaceId: String
    /**
      * The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.
      */
    var PrivateIpAddresses: PrivateIpAddressStringList
  }
  
  trait UnmonitorInstancesRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * One or more instance IDs.
      */
    var InstanceIds: InstanceIdStringList
  }
  
  trait UnmonitorInstancesResult extends js.Object {
    /**
      * The monitoring information.
      */
    var InstanceMonitorings: js.UndefOr[InstanceMonitoringList] = js.undefined
  }
  
  trait UnsuccessfulInstanceCreditSpecificationItem extends js.Object {
    /**
      * The applicable error for the T2 or T3 instance whose credit option for CPU usage was not modified.
      */
    var Error: js.UndefOr[UnsuccessfulInstanceCreditSpecificationItemError] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
  }
  
  trait UnsuccessfulInstanceCreditSpecificationItemError extends js.Object {
    /**
      * The error code.
      */
    var Code: js.UndefOr[UnsuccessfulInstanceCreditSpecificationErrorCode] = js.undefined
    /**
      * The applicable error message.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait UnsuccessfulItem extends js.Object {
    /**
      * Information about the error.
      */
    var Error: js.UndefOr[UnsuccessfulItemError] = js.undefined
    /**
      * The ID of the resource.
      */
    var ResourceId: js.UndefOr[String] = js.undefined
  }
  
  trait UnsuccessfulItemError extends js.Object {
    /**
      * The error code.
      */
    var Code: js.UndefOr[String] = js.undefined
    /**
      * The error message accompanying the error code.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait UpdateSecurityGroupRuleDescriptionsEgressRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
      */
    var GroupId: js.UndefOr[String] = js.undefined
    /**
      * [Default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * The IP permissions for the security group rule.
      */
    var IpPermissions: IpPermissionList
  }
  
  trait UpdateSecurityGroupRuleDescriptionsEgressResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait UpdateSecurityGroupRuleDescriptionsIngressRequest extends js.Object {
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
      */
    var GroupId: js.UndefOr[String] = js.undefined
    /**
      * [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * The IP permissions for the security group rule. 
      */
    var IpPermissions: IpPermissionList
  }
  
  trait UpdateSecurityGroupRuleDescriptionsIngressResult extends js.Object {
    /**
      * Returns true if the request succeeds; otherwise, returns an error.
      */
    var Return: js.UndefOr[Boolean] = js.undefined
  }
  
  trait UserBucket extends js.Object {
    /**
      * The name of the S3 bucket where the disk image is located.
      */
    var S3Bucket: js.UndefOr[String] = js.undefined
    /**
      * The file name of the disk image.
      */
    var S3Key: js.UndefOr[String] = js.undefined
  }
  
  trait UserBucketDetails extends js.Object {
    /**
      * The S3 bucket from which the disk image was created.
      */
    var S3Bucket: js.UndefOr[String] = js.undefined
    /**
      * The file name of the disk image.
      */
    var S3Key: js.UndefOr[String] = js.undefined
  }
  
  trait UserData extends js.Object {
    /**
      * The user data. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
      */
    var Data: js.UndefOr[String] = js.undefined
  }
  
  trait UserIdGroupPair extends js.Object {
    /**
      * A description for the security group rule that references this user ID group pair. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The ID of the security group.
      */
    var GroupId: js.UndefOr[String] = js.undefined
    /**
      * The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID.  For a referenced security group in another VPC, this value is not returned if the referenced security group is deleted.
      */
    var GroupName: js.UndefOr[String] = js.undefined
    /**
      * The status of a VPC peering connection, if applicable.
      */
    var PeeringStatus: js.UndefOr[String] = js.undefined
    /**
      * The ID of an AWS account. For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned. [EC2-Classic] Required when adding or removing rules that reference a security group in another AWS account.
      */
    var UserId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the VPC for the referenced security group, if applicable.
      */
    var VpcId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the VPC peering connection, if applicable.
      */
    var VpcPeeringConnectionId: js.UndefOr[String] = js.undefined
  }
  
  trait VgwTelemetry extends js.Object {
    /**
      * The number of accepted routes.
      */
    var AcceptedRouteCount: js.UndefOr[Integer] = js.undefined
    /**
      * The date and time of the last change in status.
      */
    var LastStatusChange: js.UndefOr[DateTime] = js.undefined
    /**
      * The Internet-routable IP address of the virtual private gateway's outside interface.
      */
    var OutsideIpAddress: js.UndefOr[String] = js.undefined
    /**
      * The status of the VPN tunnel.
      */
    var Status: js.UndefOr[TelemetryStatus] = js.undefined
    /**
      * If an error occurs, a description of the error.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
  }
  
  trait Volume extends js.Object {
    /**
      * Information about the volume attachments.
      */
    var Attachments: js.UndefOr[VolumeAttachmentList] = js.undefined
    /**
      * The Availability Zone for the volume.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The time stamp when volume creation was initiated.
      */
    var CreateTime: js.UndefOr[DateTime] = js.undefined
    /**
      * Indicates whether the volume will be encrypted.
      */
    var Encrypted: js.UndefOr[Boolean] = js.undefined
    /**
      * The number of I/O operations per second (IOPS) that the volume supports. For Provisioned IOPS SSD volumes, this represents the number of IOPS that are provisioned for the volume. For General Purpose SSD volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about General Purpose SSD baseline performance, I/O credits, and bursting, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Constraints: Range is 100-16,000 IOPS for gp2 volumes and 100 to 64,000IOPS for io1 volumes in most regions. Maximum io1IOPS of 64,000 is guaranteed only on Nitro-based instances. Other instance families guarantee performance up to 32,000 IOPS. For more information, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Condition: This parameter is required for requests to create io1 volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.
      */
    var Iops: js.UndefOr[Integer] = js.undefined
    /**
      * The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the volume.
      */
    var KmsKeyId: js.UndefOr[String] = js.undefined
    /**
      * The size of the volume, in GiBs.
      */
    var Size: js.UndefOr[Integer] = js.undefined
    /**
      * The snapshot from which the volume was created, if applicable.
      */
    var SnapshotId: js.UndefOr[String] = js.undefined
    /**
      * The volume state.
      */
    var State: js.UndefOr[VolumeState] = js.undefined
    /**
      * Any tags assigned to the volume.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the volume.
      */
    var VolumeId: js.UndefOr[String] = js.undefined
    /**
      * The volume type. This can be gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.
      */
    var VolumeType: js.UndefOr[VolumeType] = js.undefined
  }
  
  trait VolumeAttachment extends js.Object {
    /**
      * The time stamp when the attachment initiated.
      */
    var AttachTime: js.UndefOr[DateTime] = js.undefined
    /**
      * Indicates whether the EBS volume is deleted on instance termination.
      */
    var DeleteOnTermination: js.UndefOr[Boolean] = js.undefined
    /**
      * The device name.
      */
    var Device: js.UndefOr[String] = js.undefined
    /**
      * The ID of the instance.
      */
    var InstanceId: js.UndefOr[String] = js.undefined
    /**
      * The attachment state of the volume.
      */
    var State: js.UndefOr[VolumeAttachmentState] = js.undefined
    /**
      * The ID of the volume.
      */
    var VolumeId: js.UndefOr[String] = js.undefined
  }
  
  trait VolumeDetail extends js.Object {
    /**
      * The size of the volume, in GiB.
      */
    var Size: Long
  }
  
  trait VolumeModification extends js.Object {
    /**
      * The modification completion or failure time.
      */
    var EndTime: js.UndefOr[DateTime] = js.undefined
    /**
      * The current modification state. The modification state is null for unmodified volumes.
      */
    var ModificationState: js.UndefOr[VolumeModificationState] = js.undefined
    /**
      * The original IOPS rate of the volume.
      */
    var OriginalIops: js.UndefOr[Integer] = js.undefined
    /**
      * The original size of the volume.
      */
    var OriginalSize: js.UndefOr[Integer] = js.undefined
    /**
      * The original EBS volume type of the volume.
      */
    var OriginalVolumeType: js.UndefOr[VolumeType] = js.undefined
    /**
      * The modification progress, from 0 to 100 percent complete.
      */
    var Progress: js.UndefOr[Long] = js.undefined
    /**
      * The modification start time.
      */
    var StartTime: js.UndefOr[DateTime] = js.undefined
    /**
      * A status message about the modification progress or failure.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
    /**
      * The target IOPS rate of the volume.
      */
    var TargetIops: js.UndefOr[Integer] = js.undefined
    /**
      * The target size of the volume, in GiB.
      */
    var TargetSize: js.UndefOr[Integer] = js.undefined
    /**
      * The target EBS volume type of the volume.
      */
    var TargetVolumeType: js.UndefOr[VolumeType] = js.undefined
    /**
      * The ID of the volume.
      */
    var VolumeId: js.UndefOr[String] = js.undefined
  }
  
  trait VolumeStatusAction extends js.Object {
    /**
      * The code identifying the operation, for example, enable-volume-io.
      */
    var Code: js.UndefOr[String] = js.undefined
    /**
      * A description of the operation.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The ID of the event associated with this operation.
      */
    var EventId: js.UndefOr[String] = js.undefined
    /**
      * The event type associated with this operation.
      */
    var EventType: js.UndefOr[String] = js.undefined
  }
  
  trait VolumeStatusDetails extends js.Object {
    /**
      * The name of the volume status.
      */
    var Name: js.UndefOr[VolumeStatusName] = js.undefined
    /**
      * The intended status of the volume status.
      */
    var Status: js.UndefOr[String] = js.undefined
  }
  
  trait VolumeStatusEvent extends js.Object {
    /**
      * A description of the event.
      */
    var Description: js.UndefOr[String] = js.undefined
    /**
      * The ID of this event.
      */
    var EventId: js.UndefOr[String] = js.undefined
    /**
      * The type of this event.
      */
    var EventType: js.UndefOr[String] = js.undefined
    /**
      * The latest end time of the event.
      */
    var NotAfter: js.UndefOr[DateTime] = js.undefined
    /**
      * The earliest start time of the event.
      */
    var NotBefore: js.UndefOr[DateTime] = js.undefined
  }
  
  trait VolumeStatusInfo extends js.Object {
    /**
      * The details of the volume status.
      */
    var Details: js.UndefOr[VolumeStatusDetailsList] = js.undefined
    /**
      * The status of the volume.
      */
    var Status: js.UndefOr[VolumeStatusInfoStatus] = js.undefined
  }
  
  trait VolumeStatusItem extends js.Object {
    /**
      * The details of the operation.
      */
    var Actions: js.UndefOr[VolumeStatusActionsList] = js.undefined
    /**
      * The Availability Zone of the volume.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * A list of events associated with the volume.
      */
    var Events: js.UndefOr[VolumeStatusEventsList] = js.undefined
    /**
      * The volume ID.
      */
    var VolumeId: js.UndefOr[String] = js.undefined
    /**
      * The volume status.
      */
    var VolumeStatus: js.UndefOr[VolumeStatusInfo] = js.undefined
  }
  
  trait Vpc extends js.Object {
    /**
      * The primary IPv4 CIDR block for the VPC.
      */
    var CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * Information about the IPv4 CIDR blocks associated with the VPC.
      */
    var CidrBlockAssociationSet: js.UndefOr[VpcCidrBlockAssociationSet] = js.undefined
    /**
      * The ID of the set of DHCP options you've associated with the VPC (or default if the default options are associated with the VPC).
      */
    var DhcpOptionsId: js.UndefOr[String] = js.undefined
    /**
      * The allowed tenancy of instances launched into the VPC.
      */
    var InstanceTenancy: js.UndefOr[Tenancy] = js.undefined
    /**
      * Information about the IPv6 CIDR blocks associated with the VPC.
      */
    var Ipv6CidrBlockAssociationSet: js.UndefOr[VpcIpv6CidrBlockAssociationSet] = js.undefined
    /**
      * Indicates whether the VPC is the default VPC.
      */
    var IsDefault: js.UndefOr[Boolean] = js.undefined
    /**
      * The ID of the AWS account that owns the VPC.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * The current state of the VPC.
      */
    var State: js.UndefOr[VpcState] = js.undefined
    /**
      * Any tags assigned to the VPC.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait VpcAttachment extends js.Object {
    /**
      * The current state of the attachment.
      */
    var State: js.UndefOr[AttachmentStatus] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait VpcCidrBlockAssociation extends js.Object {
    /**
      * The association ID for the IPv4 CIDR block.
      */
    var AssociationId: js.UndefOr[String] = js.undefined
    /**
      * The IPv4 CIDR block.
      */
    var CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * Information about the state of the CIDR block.
      */
    var CidrBlockState: js.UndefOr[VpcCidrBlockState] = js.undefined
  }
  
  trait VpcCidrBlockState extends js.Object {
    /**
      * The state of the CIDR block.
      */
    var State: js.UndefOr[VpcCidrBlockStateCode] = js.undefined
    /**
      * A message about the status of the CIDR block, if applicable.
      */
    var StatusMessage: js.UndefOr[String] = js.undefined
  }
  
  trait VpcClassicLink extends js.Object {
    /**
      * Indicates whether the VPC is enabled for ClassicLink.
      */
    var ClassicLinkEnabled: js.UndefOr[Boolean] = js.undefined
    /**
      * Any tags assigned to the VPC.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait VpcEndpoint extends js.Object {
    /**
      * The date and time the VPC endpoint was created.
      */
    var CreationTimestamp: js.UndefOr[DateTime] = js.undefined
    /**
      * (Interface endpoint) The DNS entries for the endpoint.
      */
    var DnsEntries: js.UndefOr[DnsEntrySet] = js.undefined
    /**
      * (Interface endpoint) Information about the security groups associated with the network interface.
      */
    var Groups: js.UndefOr[GroupIdentifierSet] = js.undefined
    /**
      * (Interface endpoint) One or more network interfaces for the endpoint.
      */
    var NetworkInterfaceIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The policy document associated with the endpoint, if applicable.
      */
    var PolicyDocument: js.UndefOr[String] = js.undefined
    /**
      * (Interface endpoint) Indicates whether the VPC is associated with a private hosted zone.
      */
    var PrivateDnsEnabled: js.UndefOr[Boolean] = js.undefined
    /**
      * (Gateway endpoint) One or more route tables associated with the endpoint.
      */
    var RouteTableIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The name of the service to which the endpoint is associated.
      */
    var ServiceName: js.UndefOr[String] = js.undefined
    /**
      * The state of the VPC endpoint.
      */
    var State: js.UndefOr[State] = js.undefined
    /**
      * (Interface endpoint) One or more subnets in which the endpoint is located.
      */
    var SubnetIds: js.UndefOr[ValueStringList] = js.undefined
    /**
      * The ID of the VPC endpoint.
      */
    var VpcEndpointId: js.UndefOr[String] = js.undefined
    /**
      * The type of endpoint.
      */
    var VpcEndpointType: js.UndefOr[VpcEndpointType] = js.undefined
    /**
      * The ID of the VPC to which the endpoint is associated.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait VpcEndpointConnection extends js.Object {
    /**
      * The date and time the VPC endpoint was created.
      */
    var CreationTimestamp: js.UndefOr[DateTime] = js.undefined
    /**
      * The ID of the service to which the endpoint is connected.
      */
    var ServiceId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the VPC endpoint.
      */
    var VpcEndpointId: js.UndefOr[String] = js.undefined
    /**
      * The AWS account ID of the owner of the VPC endpoint.
      */
    var VpcEndpointOwner: js.UndefOr[String] = js.undefined
    /**
      * The state of the VPC endpoint.
      */
    var VpcEndpointState: js.UndefOr[State] = js.undefined
  }
  
  trait VpcIpv6CidrBlockAssociation extends js.Object {
    /**
      * The association ID for the IPv6 CIDR block.
      */
    var AssociationId: js.UndefOr[String] = js.undefined
    /**
      * The IPv6 CIDR block.
      */
    var Ipv6CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * Information about the state of the CIDR block.
      */
    var Ipv6CidrBlockState: js.UndefOr[VpcCidrBlockState] = js.undefined
  }
  
  trait VpcPeeringConnection extends js.Object {
    /**
      * Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
      */
    var AccepterVpcInfo: js.UndefOr[VpcPeeringConnectionVpcInfo] = js.undefined
    /**
      * The time that an unaccepted VPC peering connection will expire.
      */
    var ExpirationTime: js.UndefOr[DateTime] = js.undefined
    /**
      * Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
      */
    var RequesterVpcInfo: js.UndefOr[VpcPeeringConnectionVpcInfo] = js.undefined
    /**
      * The status of the VPC peering connection.
      */
    var Status: js.UndefOr[VpcPeeringConnectionStateReason] = js.undefined
    /**
      * Any tags assigned to the resource.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the VPC peering connection.
      */
    var VpcPeeringConnectionId: js.UndefOr[String] = js.undefined
  }
  
  trait VpcPeeringConnectionOptionsDescription extends js.Object {
    /**
      * Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.
      */
    var AllowDnsResolutionFromRemoteVpc: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.
      */
    var AllowEgressFromLocalClassicLinkToRemoteVpc: js.UndefOr[Boolean] = js.undefined
    /**
      * Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.
      */
    var AllowEgressFromLocalVpcToRemoteClassicLink: js.UndefOr[Boolean] = js.undefined
  }
  
  trait VpcPeeringConnectionStateReason extends js.Object {
    /**
      * The status of the VPC peering connection.
      */
    var Code: js.UndefOr[VpcPeeringConnectionStateReasonCode] = js.undefined
    /**
      * A message that provides more information about the status, if applicable.
      */
    var Message: js.UndefOr[String] = js.undefined
  }
  
  trait VpcPeeringConnectionVpcInfo extends js.Object {
    /**
      * The IPv4 CIDR block for the VPC.
      */
    var CidrBlock: js.UndefOr[String] = js.undefined
    /**
      * Information about the IPv4 CIDR blocks for the VPC.
      */
    var CidrBlockSet: js.UndefOr[CidrBlockSet] = js.undefined
    /**
      * The IPv6 CIDR block for the VPC.
      */
    var Ipv6CidrBlockSet: js.UndefOr[Ipv6CidrBlockSet] = js.undefined
    /**
      * The AWS account ID of the VPC owner.
      */
    var OwnerId: js.UndefOr[String] = js.undefined
    /**
      * Information about the VPC peering connection options for the accepter or requester VPC.
      */
    var PeeringOptions: js.UndefOr[VpcPeeringConnectionOptionsDescription] = js.undefined
    /**
      * The region in which the VPC is located.
      */
    var Region: js.UndefOr[String] = js.undefined
    /**
      * The ID of the VPC.
      */
    var VpcId: js.UndefOr[String] = js.undefined
  }
  
  trait VpnConnection extends js.Object {
    /**
      * The category of the VPN connection. A value of VPN indicates an AWS VPN connection. A value of VPN-Classic indicates an AWS Classic VPN connection.
      */
    var Category: js.UndefOr[String] = js.undefined
    /**
      * The configuration information for the VPN connection's customer gateway (in the native XML format). This element is always present in the CreateVpnConnection response; however, it's present in the DescribeVpnConnections response only if the VPN connection is in the pending or available state.
      */
    var CustomerGatewayConfiguration: js.UndefOr[String] = js.undefined
    /**
      * The ID of the customer gateway at your end of the VPN connection.
      */
    var CustomerGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The VPN connection options.
      */
    var Options: js.UndefOr[VpnConnectionOptions] = js.undefined
    /**
      * The static routes associated with the VPN connection.
      */
    var Routes: js.UndefOr[VpnStaticRouteList] = js.undefined
    /**
      * The current state of the VPN connection.
      */
    var State: js.UndefOr[VpnState] = js.undefined
    /**
      * Any tags assigned to the VPN connection.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The ID of the transit gateway associated with the VPN connection.
      */
    var TransitGatewayId: js.UndefOr[String] = js.undefined
    /**
      * The type of VPN connection.
      */
    var Type: js.UndefOr[GatewayType] = js.undefined
    /**
      * Information about the VPN tunnel.
      */
    var VgwTelemetry: js.UndefOr[VgwTelemetryList] = js.undefined
    /**
      * The ID of the VPN connection.
      */
    var VpnConnectionId: js.UndefOr[String] = js.undefined
    /**
      * The ID of the virtual private gateway at the AWS side of the VPN connection.
      */
    var VpnGatewayId: js.UndefOr[String] = js.undefined
  }
  
  trait VpnConnectionOptions extends js.Object {
    /**
      * Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
      */
    var StaticRoutesOnly: js.UndefOr[Boolean] = js.undefined
  }
  
  trait VpnConnectionOptionsSpecification extends js.Object {
    /**
      * Indicate whether the VPN connection uses static routes only. If you are creating a VPN connection for a device that does not support BGP, you must specify true. Use CreateVpnConnectionRoute to create a static route. Default: false 
      */
    var StaticRoutesOnly: js.UndefOr[Boolean] = js.undefined
    /**
      * The tunnel options for the VPN connection.
      */
    var TunnelOptions: js.UndefOr[TunnelOptionsList] = js.undefined
  }
  
  trait VpnGateway extends js.Object {
    /**
      * The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
      */
    var AmazonSideAsn: js.UndefOr[Long] = js.undefined
    /**
      * The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.
      */
    var AvailabilityZone: js.UndefOr[String] = js.undefined
    /**
      * The current state of the virtual private gateway.
      */
    var State: js.UndefOr[VpnState] = js.undefined
    /**
      * Any tags assigned to the virtual private gateway.
      */
    var Tags: js.UndefOr[TagList] = js.undefined
    /**
      * The type of VPN connection the virtual private gateway supports.
      */
    var Type: js.UndefOr[GatewayType] = js.undefined
    /**
      * Any VPCs attached to the virtual private gateway.
      */
    var VpcAttachments: js.UndefOr[VpcAttachmentList] = js.undefined
    /**
      * The ID of the virtual private gateway.
      */
    var VpnGatewayId: js.UndefOr[String] = js.undefined
  }
  
  trait VpnStaticRoute extends js.Object {
    /**
      * The CIDR block associated with the local subnet of the customer data center.
      */
    var DestinationCidrBlock: js.UndefOr[String] = js.undefined
    /**
      * Indicates how the routes were provided.
      */
    var Source: js.UndefOr[VpnStaticRouteSource] = js.undefined
    /**
      * The current state of the static route.
      */
    var State: js.UndefOr[VpnState] = js.undefined
  }
  
  trait VpnTunnelOptionsSpecification extends js.Object {
    /**
      * The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway. Constraints: Allowed characters are alphanumeric characters and ._. Must be between 8 and 64 characters in length and cannot start with zero (0).
      */
    var PreSharedKey: js.UndefOr[String] = js.undefined
    /**
      * The range of inside IP addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway.  Constraints: A size /30 CIDR block from the 169.254.0.0/16 range. The following CIDR blocks are reserved and cannot be used:    169.254.0.0/30     169.254.1.0/30     169.254.2.0/30     169.254.3.0/30     169.254.4.0/30     169.254.5.0/30     169.254.169.252/30   
      */
    var TunnelInsideCidr: js.UndefOr[String] = js.undefined
  }
  
  trait WithdrawByoipCidrRequest extends js.Object {
    /**
      * The public IPv4 address range, in CIDR notation.
      */
    var Cidr: String
    /**
      * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
      */
    var DryRun: js.UndefOr[Boolean] = js.undefined
  }
  
  trait WithdrawByoipCidrResult extends js.Object {
    /**
      * Information about the address pool.
      */
    var ByoipCidr: js.UndefOr[ByoipCidr] = js.undefined
  }
  
  trait _AccountAttributeName extends js.Object
  
  trait _ActivityStatus extends js.Object
  
  trait _Affinity extends js.Object
  
  trait _AllocationState extends js.Object
  
  trait _AllocationStrategy extends js.Object
  
  trait _ArchitectureValues extends js.Object
  
  trait _AssociationStatusCode extends js.Object
  
  trait _AttachmentStatus extends js.Object
  
  trait _AutoAcceptSharedAttachmentsValue extends js.Object
  
  trait _AutoPlacement extends js.Object
  
  trait _AvailabilityZoneState extends js.Object
  
  trait _BatchState extends js.Object
  
  trait _BundleTaskState extends js.Object
  
  trait _ByoipCidrState extends js.Object
  
  trait _CancelBatchErrorCode extends js.Object
  
  trait _CancelSpotInstanceRequestState extends js.Object
  
  trait _CapacityReservationInstancePlatform extends js.Object
  
  trait _CapacityReservationPreference extends js.Object
  
  trait _CapacityReservationState extends js.Object
  
  trait _CapacityReservationTenancy extends js.Object
  
  trait _ClientCertificateRevocationListStatusCode extends js.Object
  
  trait _ClientVpnAuthenticationType extends js.Object
  
  trait _ClientVpnAuthorizationRuleStatusCode extends js.Object
  
  trait _ClientVpnConnectionStatusCode extends js.Object
  
  trait _ClientVpnEndpointStatusCode extends js.Object
  
  trait _ClientVpnRouteStatusCode extends js.Object
  
  trait _ConnectionNotificationState extends js.Object
  
  trait _ConversionTaskState extends js.Object
  
  trait _DatafeedSubscriptionState extends js.Object
  
  trait _DefaultRouteTableAssociationValue extends js.Object
  
  trait _DefaultRouteTablePropagationValue extends js.Object
  
  trait _DefaultTargetCapacityType extends js.Object
  
  trait _DeleteFleetErrorCode extends js.Object
  
  trait _DeviceType extends js.Object
  
  trait _DiskImageFormat extends js.Object
  
  trait _DnsSupportValue extends js.Object
  
  trait _DomainType extends js.Object
  
  trait _ElasticGpuStatus extends js.Object
  
  trait _EndDateType extends js.Object
  
  trait _EventCode extends js.Object
  
  trait _EventType extends js.Object
  
  trait _ExcessCapacityTerminationPolicy extends js.Object
  
  trait _ExportEnvironment extends js.Object
  
  trait _ExportTaskState extends js.Object
  
  trait _FleetActivityStatus extends js.Object
  
  trait _FleetEventType extends js.Object
  
  trait _FleetExcessCapacityTerminationPolicy extends js.Object
  
  trait _FleetOnDemandAllocationStrategy extends js.Object
  
  trait _FleetStateCode extends js.Object
  
  trait _FleetType extends js.Object
  
  trait _FlowLogsResourceType extends js.Object
  
  trait _FpgaImageAttributeName extends js.Object
  
  trait _FpgaImageStateCode extends js.Object
  
  trait _HostTenancy extends js.Object
  
  trait _HypervisorType extends js.Object
  
  trait _IamInstanceProfileAssociationState extends js.Object
  
  trait _ImageAttributeName extends js.Object
  
  trait _ImageState extends js.Object
  
  trait _ImageTypeValues extends js.Object
  
  trait _InstanceAttributeName extends js.Object
  
  trait _InstanceHealthStatus extends js.Object
  
  trait _InstanceInterruptionBehavior extends js.Object
  
  trait _InstanceLifecycle extends js.Object
  
  trait _InstanceLifecycleType extends js.Object
  
  trait _InstanceMatchCriteria extends js.Object
  
  trait _InstanceStateName extends js.Object
  
  trait _InstanceType extends js.Object
  
  trait _InterfacePermissionType extends js.Object
  
  trait _Ipv6SupportValue extends js.Object
  
  trait _LaunchTemplateErrorCode extends js.Object
  
  trait _ListingState extends js.Object
  
  trait _ListingStatus extends js.Object
  
  trait _LogDestinationType extends js.Object
  
  trait _MonitoringState extends js.Object
  
  trait _MoveStatus extends js.Object
  
  trait _NatGatewayState extends js.Object
  
  trait _NetworkInterfaceAttribute extends js.Object
  
  trait _NetworkInterfacePermissionStateCode extends js.Object
  
  trait _NetworkInterfaceStatus extends js.Object
  
  trait _NetworkInterfaceType extends js.Object
  
  trait _OfferingClassType extends js.Object
  
  trait _OfferingTypeValues extends js.Object
  
  trait _OnDemandAllocationStrategy extends js.Object
  
  trait _OperationType extends js.Object
  
  trait _PaymentOption extends js.Object
  
  trait _PlacementGroupState extends js.Object
  
  trait _PlacementStrategy extends js.Object
  
  trait _PrincipalType extends js.Object
  
  trait _ProductCodeValues extends js.Object
  
  trait _RIProductDescription extends js.Object
  
  trait _ReportInstanceReasonCodes extends js.Object
  
  trait _ReportStatusType extends js.Object
  
  trait _ReservationState extends js.Object
  
  trait _ReservedInstanceState extends js.Object
  
  trait _ResourceType extends js.Object
  
  trait _RouteOrigin extends js.Object
  
  trait _RouteState extends js.Object
  
  trait _RuleAction extends js.Object
  
  trait _ServiceState extends js.Object
  
  trait _ServiceType extends js.Object
  
  trait _ShutdownBehavior extends js.Object
  
  trait _SnapshotAttributeName extends js.Object
  
  trait _SnapshotState extends js.Object
  
  trait _SpotAllocationStrategy extends js.Object
  
  trait _SpotInstanceInterruptionBehavior extends js.Object
  
  trait _SpotInstanceState extends js.Object
  
  trait _SpotInstanceType extends js.Object
  
  trait _State extends js.Object
  
  trait _Status extends js.Object
  
  trait _StatusType extends js.Object
  
  trait _SubnetCidrBlockStateCode extends js.Object
  
  trait _SubnetState extends js.Object
  
  trait _SummaryStatus extends js.Object
  
  trait _TelemetryStatus extends js.Object
  
  trait _Tenancy extends js.Object
  
  trait _TrafficType extends js.Object
  
  trait _TransitGatewayAssociationState extends js.Object
  
  trait _TransitGatewayAttachmentResourceType extends js.Object
  
  trait _TransitGatewayAttachmentState extends js.Object
  
  trait _TransitGatewayPropagationState extends js.Object
  
  trait _TransitGatewayRouteState extends js.Object
  
  trait _TransitGatewayRouteTableState extends js.Object
  
  trait _TransitGatewayRouteType extends js.Object
  
  trait _TransitGatewayState extends js.Object
  
  trait _TransportProtocol extends js.Object
  
  trait _UnsuccessfulInstanceCreditSpecificationErrorCode extends js.Object
  
  trait _VirtualizationType extends js.Object
  
  trait _VolumeAttachmentState extends js.Object
  
  trait _VolumeAttributeName extends js.Object
  
  trait _VolumeModificationState extends js.Object
  
  trait _VolumeState extends js.Object
  
  trait _VolumeStatusInfoStatus extends js.Object
  
  trait _VolumeStatusName extends js.Object
  
  trait _VolumeType extends js.Object
  
  trait _VpcAttributeName extends js.Object
  
  trait _VpcCidrBlockStateCode extends js.Object
  
  trait _VpcEndpointType extends js.Object
  
  trait _VpcPeeringConnectionStateReasonCode extends js.Object
  
  trait _VpcState extends js.Object
  
  trait _VpnEcmpSupportValue extends js.Object
  
  trait _VpnState extends js.Object
  
  trait _apiVersion extends js.Object
  
  trait _scope extends js.Object
  
  val TypesNs: this.type = js.native
  type AccountAttributeList = js.Array[AccountAttribute]
  type AccountAttributeName = _AccountAttributeName | java.lang.String
  type AccountAttributeNameStringList = js.Array[AccountAttributeName]
  type AccountAttributeValueList = js.Array[AccountAttributeValue]
  type ActiveInstanceSet = js.Array[ActiveInstance]
  type ActivityStatus = _ActivityStatus | java.lang.String
  type AddressList = js.Array[Address]
  type Affinity = _Affinity | java.lang.String
  type AllocationIdList = js.Array[String]
  type AllocationState = _AllocationState | java.lang.String
  type AllocationStrategy = _AllocationStrategy | java.lang.String
  type AllowedPrincipalSet = js.Array[AllowedPrincipal]
  type ArchitectureValues = _ArchitectureValues | java.lang.String
  type AssociatedNetworkType = awsDashSdkLib.awsDashSdkLibStrings.vpc | java.lang.String
  type AssociatedTargetNetworkSet = js.Array[AssociatedTargetNetwork]
  type AssociationIdList = js.Array[String]
  type AssociationStatusCode = _AssociationStatusCode | java.lang.String
  type AttachmentStatus = _AttachmentStatus | java.lang.String
  type AuthorizationRuleSet = js.Array[AuthorizationRule]
  type AutoAcceptSharedAttachmentsValue = _AutoAcceptSharedAttachmentsValue | java.lang.String
  type AutoPlacement = _AutoPlacement | java.lang.String
  type AvailabilityZoneList = js.Array[AvailabilityZone]
  type AvailabilityZoneMessageList = js.Array[AvailabilityZoneMessage]
  type AvailabilityZoneState = _AvailabilityZoneState | java.lang.String
  type AvailableInstanceCapacityList = js.Array[InstanceCapacity]
  type BatchState = _BatchState | java.lang.String
  type BillingProductList = js.Array[String]
  type BlockDeviceMappingList = js.Array[BlockDeviceMapping]
  type BlockDeviceMappingRequestList = js.Array[BlockDeviceMapping]
  type Boolean = scala.Boolean
  type BundleIdStringList = js.Array[String]
  type BundleTaskList = js.Array[BundleTask]
  type BundleTaskState = _BundleTaskState | java.lang.String
  type ByoipCidrSet = js.Array[ByoipCidr]
  type ByoipCidrState = _ByoipCidrState | java.lang.String
  type CancelBatchErrorCode = _CancelBatchErrorCode | java.lang.String
  type CancelSpotFleetRequestsErrorSet = js.Array[CancelSpotFleetRequestsErrorItem]
  type CancelSpotFleetRequestsSuccessSet = js.Array[CancelSpotFleetRequestsSuccessItem]
  type CancelSpotInstanceRequestState = _CancelSpotInstanceRequestState | java.lang.String
  type CancelledSpotInstanceRequestList = js.Array[CancelledSpotInstanceRequest]
  type CapacityReservationIdSet = js.Array[String]
  type CapacityReservationInstancePlatform = _CapacityReservationInstancePlatform | java.lang.String
  type CapacityReservationPreference = _CapacityReservationPreference | java.lang.String
  type CapacityReservationSet = js.Array[CapacityReservation]
  type CapacityReservationState = _CapacityReservationState | java.lang.String
  type CapacityReservationTenancy = _CapacityReservationTenancy | java.lang.String
  type CidrBlockSet = js.Array[CidrBlock]
  type ClassicLinkDnsSupportList = js.Array[ClassicLinkDnsSupport]
  type ClassicLinkInstanceList = js.Array[ClassicLinkInstance]
  type ClassicLoadBalancers = js.Array[ClassicLoadBalancer]
  type ClientCertificateRevocationListStatusCode = _ClientCertificateRevocationListStatusCode | java.lang.String
  type ClientConfiguration = awsDashSdkLib.libServiceMod.ServiceConfigurationOptions with ClientApiVersions
  type ClientVpnAuthenticationList = js.Array[ClientVpnAuthentication]
  type ClientVpnAuthenticationRequestList = js.Array[ClientVpnAuthenticationRequest]
  type ClientVpnAuthenticationType = _ClientVpnAuthenticationType | java.lang.String
  type ClientVpnAuthorizationRuleStatusCode = _ClientVpnAuthorizationRuleStatusCode | java.lang.String
  type ClientVpnConnectionSet = js.Array[ClientVpnConnection]
  type ClientVpnConnectionStatusCode = _ClientVpnConnectionStatusCode | java.lang.String
  type ClientVpnEndpointStatusCode = _ClientVpnEndpointStatusCode | java.lang.String
  type ClientVpnRouteSet = js.Array[ClientVpnRoute]
  type ClientVpnRouteStatusCode = _ClientVpnRouteStatusCode | java.lang.String
  type ClientVpnSecurityGroupIdSet = js.Array[String]
  type ConnectionNotificationSet = js.Array[ConnectionNotification]
  type ConnectionNotificationState = _ConnectionNotificationState | java.lang.String
  type ConnectionNotificationType = awsDashSdkLib.awsDashSdkLibStrings.Topic | java.lang.String
  type ContainerFormat = awsDashSdkLib.awsDashSdkLibStrings.ova | java.lang.String
  type ConversionIdStringList = js.Array[String]
  type ConversionTaskState = _ConversionTaskState | java.lang.String
  type CreateFleetErrorsSet = js.Array[CreateFleetError]
  type CreateFleetInstancesSet = js.Array[CreateFleetInstance]
  type CreateVolumePermissionList = js.Array[CreateVolumePermission]
  type CurrencyCodeValues = awsDashSdkLib.awsDashSdkLibStrings.USD | java.lang.String
  type CustomerGatewayIdStringList = js.Array[String]
  type CustomerGatewayList = js.Array[CustomerGateway]
  type DatafeedSubscriptionState = _DatafeedSubscriptionState | java.lang.String
  type DateTime = stdLib.Date
  type DefaultRouteTableAssociationValue = _DefaultRouteTableAssociationValue | java.lang.String
  type DefaultRouteTablePropagationValue = _DefaultRouteTablePropagationValue | java.lang.String
  type DefaultTargetCapacityType = _DefaultTargetCapacityType | java.lang.String
  type DeleteFleetErrorCode = _DeleteFleetErrorCode | java.lang.String
  type DeleteFleetErrorSet = js.Array[DeleteFleetErrorItem]
  type DeleteFleetSuccessSet = js.Array[DeleteFleetSuccessItem]
  type DeleteLaunchTemplateVersionsResponseErrorSet = js.Array[DeleteLaunchTemplateVersionsResponseErrorItem]
  type DeleteLaunchTemplateVersionsResponseSuccessSet = js.Array[DeleteLaunchTemplateVersionsResponseSuccessItem]
  type DescribeConversionTaskList = js.Array[ConversionTask]
  type DescribeFleetsErrorSet = js.Array[DescribeFleetError]
  type DescribeFleetsInstancesSet = js.Array[DescribeFleetsInstances]
  type DescribeVpcPeeringConnectionsMaxResults = scala.Double
  type DeviceType = _DeviceType | java.lang.String
  type DhcpConfigurationList = js.Array[DhcpConfiguration]
  type DhcpConfigurationValueList = js.Array[AttributeValue]
  type DhcpOptionsIdStringList = js.Array[String]
  type DhcpOptionsList = js.Array[DhcpOptions]
  type DiskImageFormat = _DiskImageFormat | java.lang.String
  type DiskImageList = js.Array[DiskImage]
  type DnsEntrySet = js.Array[DnsEntry]
  type DnsSupportValue = _DnsSupportValue | java.lang.String
  type DomainType = _DomainType | java.lang.String
  type Double = scala.Double
  type EgressOnlyInternetGatewayId = java.lang.String
  type EgressOnlyInternetGatewayIdList = js.Array[EgressOnlyInternetGatewayId]
  type EgressOnlyInternetGatewayList = js.Array[EgressOnlyInternetGateway]
  type ElasticGpuAssociationList = js.Array[ElasticGpuAssociation]
  type ElasticGpuIdSet = js.Array[String]
  type ElasticGpuSet = js.Array[ElasticGpus]
  type ElasticGpuSpecificationList = js.Array[ElasticGpuSpecification]
  type ElasticGpuSpecificationResponseList = js.Array[ElasticGpuSpecificationResponse]
  type ElasticGpuSpecifications = js.Array[ElasticGpuSpecification]
  type ElasticGpuState = awsDashSdkLib.awsDashSdkLibStrings.ATTACHED | java.lang.String
  type ElasticGpuStatus = _ElasticGpuStatus | java.lang.String
  type ElasticInferenceAcceleratorAssociationList = js.Array[ElasticInferenceAcceleratorAssociation]
  type ElasticInferenceAccelerators = js.Array[ElasticInferenceAccelerator]
  type EndDateType = _EndDateType | java.lang.String
  type EndpointSet = js.Array[ClientVpnEndpoint]
  type EventCode = _EventCode | java.lang.String
  type EventType = _EventType | java.lang.String
  type ExcessCapacityTerminationPolicy = _ExcessCapacityTerminationPolicy | java.lang.String
  type ExecutableByStringList = js.Array[String]
  type ExportEnvironment = _ExportEnvironment | java.lang.String
  type ExportTaskIdStringList = js.Array[String]
  type ExportTaskList = js.Array[ExportTask]
  type ExportTaskState = _ExportTaskState | java.lang.String
  type FilterList = js.Array[Filter]
  type FleetActivityStatus = _FleetActivityStatus | java.lang.String
  type FleetEventType = _FleetEventType | java.lang.String
  type FleetExcessCapacityTerminationPolicy = _FleetExcessCapacityTerminationPolicy | java.lang.String
  type FleetIdSet = js.Array[FleetIdentifier]
  type FleetIdentifier = java.lang.String
  type FleetLaunchTemplateConfigList = js.Array[FleetLaunchTemplateConfig]
  type FleetLaunchTemplateConfigListRequest = js.Array[FleetLaunchTemplateConfigRequest]
  type FleetLaunchTemplateOverridesList = js.Array[FleetLaunchTemplateOverrides]
  type FleetLaunchTemplateOverridesListRequest = js.Array[FleetLaunchTemplateOverridesRequest]
  type FleetOnDemandAllocationStrategy = _FleetOnDemandAllocationStrategy | java.lang.String
  type FleetSet = js.Array[FleetData]
  type FleetStateCode = _FleetStateCode | java.lang.String
  type FleetType = _FleetType | java.lang.String
  type Float = scala.Double
  type FlowLogSet = js.Array[FlowLog]
  type FlowLogsResourceType = _FlowLogsResourceType | java.lang.String
  type FpgaImageAttributeName = _FpgaImageAttributeName | java.lang.String
  type FpgaImageIdList = js.Array[String]
  type FpgaImageList = js.Array[FpgaImage]
  type FpgaImageStateCode = _FpgaImageStateCode | java.lang.String
  type GatewayType = awsDashSdkLib.awsDashSdkLibStrings.ipsecDOT1 | java.lang.String
  type GroupIdStringList = js.Array[String]
  type GroupIdentifierList = js.Array[GroupIdentifier]
  type GroupIdentifierSet = js.Array[SecurityGroupIdentifier]
  type GroupIds = js.Array[String]
  type GroupNameStringList = js.Array[String]
  type HistoryRecordSet = js.Array[HistoryRecordEntry]
  type HistoryRecords = js.Array[HistoryRecord]
  type HostInstanceList = js.Array[HostInstance]
  type HostList = js.Array[Host]
  type HostOfferingSet = js.Array[HostOffering]
  type HostReservationIdSet = js.Array[String]
  type HostReservationSet = js.Array[HostReservation]
  type HostTenancy = _HostTenancy | java.lang.String
  type HypervisorType = _HypervisorType | java.lang.String
  type IamInstanceProfileAssociationSet = js.Array[IamInstanceProfileAssociation]
  type IamInstanceProfileAssociationState = _IamInstanceProfileAssociationState | java.lang.String
  type IdFormatList = js.Array[IdFormat]
  type ImageAttributeName = _ImageAttributeName | java.lang.String
  type ImageDiskContainerList = js.Array[ImageDiskContainer]
  type ImageIdStringList = js.Array[String]
  type ImageList = js.Array[Image]
  type ImageState = _ImageState | java.lang.String
  type ImageTypeValues = _ImageTypeValues | java.lang.String
  type ImportImageTaskList = js.Array[ImportImageTask]
  type ImportInstanceVolumeDetailSet = js.Array[ImportInstanceVolumeDetailItem]
  type ImportSnapshotTaskList = js.Array[ImportSnapshotTask]
  type ImportTaskIdList = js.Array[String]
  type InstanceAttributeName = _InstanceAttributeName | java.lang.String
  type InstanceBlockDeviceMappingList = js.Array[InstanceBlockDeviceMapping]
  type InstanceBlockDeviceMappingSpecificationList = js.Array[InstanceBlockDeviceMappingSpecification]
  type InstanceCountList = js.Array[InstanceCount]
  type InstanceCreditSpecificationList = js.Array[InstanceCreditSpecification]
  type InstanceCreditSpecificationListRequest = js.Array[InstanceCreditSpecificationRequest]
  type InstanceHealthStatus = _InstanceHealthStatus | java.lang.String
  type InstanceId = java.lang.String
  type InstanceIdSet = js.Array[String]
  type InstanceIdStringList = js.Array[String]
  type InstanceIdsSet = js.Array[InstanceId]
  type InstanceInterruptionBehavior = _InstanceInterruptionBehavior | java.lang.String
  type InstanceIpv6AddressList = js.Array[InstanceIpv6Address]
  type InstanceIpv6AddressListRequest = js.Array[InstanceIpv6AddressRequest]
  type InstanceLifecycle = _InstanceLifecycle | java.lang.String
  type InstanceLifecycleType = _InstanceLifecycleType | java.lang.String
  type InstanceList = js.Array[Instance]
  type InstanceMatchCriteria = _InstanceMatchCriteria | java.lang.String
  type InstanceMonitoringList = js.Array[InstanceMonitoring]
  type InstanceNetworkInterfaceList = js.Array[InstanceNetworkInterface]
  type InstanceNetworkInterfaceSpecificationList = js.Array[InstanceNetworkInterfaceSpecification]
  type InstancePrivateIpAddressList = js.Array[InstancePrivateIpAddress]
  type InstanceStateChangeList = js.Array[InstanceStateChange]
  type InstanceStateName = _InstanceStateName | java.lang.String
  type InstanceStatusDetailsList = js.Array[InstanceStatusDetails]
  type InstanceStatusEventList = js.Array[InstanceStatusEvent]
  type InstanceStatusList = js.Array[InstanceStatus]
  type InstanceType = _InstanceType | java.lang.String
  type InstanceTypeList = js.Array[InstanceType]
  type Integer = scala.Double
  type InterfacePermissionType = _InterfacePermissionType | java.lang.String
  type InternetGatewayAttachmentList = js.Array[InternetGatewayAttachment]
  type InternetGatewayList = js.Array[InternetGateway]
  type IpPermissionList = js.Array[IpPermission]
  type IpRangeList = js.Array[IpRange]
  type IpRanges = js.Array[String]
  type Ipv6Address = java.lang.String
  type Ipv6AddressList = js.Array[String]
  type Ipv6CidrBlockSet = js.Array[Ipv6CidrBlock]
  type Ipv6RangeList = js.Array[Ipv6Range]
  type Ipv6SupportValue = _Ipv6SupportValue | java.lang.String
  type KeyNameStringList = js.Array[String]
  type KeyPairList = js.Array[KeyPairInfo]
  type LaunchPermissionList = js.Array[LaunchPermission]
  type LaunchSpecsList = js.Array[SpotFleetLaunchSpecification]
  type LaunchTemplateBlockDeviceMappingList = js.Array[LaunchTemplateBlockDeviceMapping]
  type LaunchTemplateBlockDeviceMappingRequestList = js.Array[LaunchTemplateBlockDeviceMappingRequest]
  type LaunchTemplateConfigList = js.Array[LaunchTemplateConfig]
  type LaunchTemplateElasticInferenceAcceleratorList = js.Array[LaunchTemplateElasticInferenceAccelerator]
  type LaunchTemplateElasticInferenceAcceleratorResponseList = js.Array[LaunchTemplateElasticInferenceAcceleratorResponse]
  type LaunchTemplateErrorCode = _LaunchTemplateErrorCode | java.lang.String
  type LaunchTemplateInstanceNetworkInterfaceSpecificationList = js.Array[LaunchTemplateInstanceNetworkInterfaceSpecification]
  type LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList = js.Array[LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]
  type LaunchTemplateLicenseList = js.Array[LaunchTemplateLicenseConfiguration]
  type LaunchTemplateLicenseSpecificationListRequest = js.Array[LaunchTemplateLicenseConfigurationRequest]
  type LaunchTemplateName = java.lang.String
  type LaunchTemplateNameStringList = js.Array[LaunchTemplateName]
  type LaunchTemplateOverridesList = js.Array[LaunchTemplateOverrides]
  type LaunchTemplateSet = js.Array[LaunchTemplate]
  type LaunchTemplateTagSpecificationList = js.Array[LaunchTemplateTagSpecification]
  type LaunchTemplateTagSpecificationRequestList = js.Array[LaunchTemplateTagSpecificationRequest]
  type LaunchTemplateVersionSet = js.Array[LaunchTemplateVersion]
  type LicenseList = js.Array[LicenseConfiguration]
  type LicenseSpecificationListRequest = js.Array[LicenseConfigurationRequest]
  type ListingState = _ListingState | java.lang.String
  type ListingStatus = _ListingStatus | java.lang.String
  type LoadPermissionList = js.Array[LoadPermission]
  type LoadPermissionListRequest = js.Array[LoadPermissionRequest]
  type LogDestinationType = _LogDestinationType | java.lang.String
  type Long = scala.Double
  type MarketType = awsDashSdkLib.awsDashSdkLibStrings.spot | java.lang.String
  type MaxResults = scala.Double
  type MonitoringState = _MonitoringState | java.lang.String
  type MoveStatus = _MoveStatus | java.lang.String
  type MovingAddressStatusSet = js.Array[MovingAddressStatus]
  type NatGatewayAddressList = js.Array[NatGatewayAddress]
  type NatGatewayList = js.Array[NatGateway]
  type NatGatewayState = _NatGatewayState | java.lang.String
  type NetworkAclAssociationList = js.Array[NetworkAclAssociation]
  type NetworkAclEntryList = js.Array[NetworkAclEntry]
  type NetworkAclList = js.Array[NetworkAcl]
  type NetworkInterfaceAttribute = _NetworkInterfaceAttribute | java.lang.String
  type NetworkInterfaceIdList = js.Array[String]
  type NetworkInterfaceIpv6AddressesList = js.Array[NetworkInterfaceIpv6Address]
  type NetworkInterfaceList = js.Array[NetworkInterface]
  type NetworkInterfacePermissionIdList = js.Array[String]
  type NetworkInterfacePermissionList = js.Array[NetworkInterfacePermission]
  type NetworkInterfacePermissionStateCode = _NetworkInterfacePermissionStateCode | java.lang.String
  type NetworkInterfacePrivateIpAddressList = js.Array[NetworkInterfacePrivateIpAddress]
  type NetworkInterfaceStatus = _NetworkInterfaceStatus | java.lang.String
  type NetworkInterfaceType = _NetworkInterfaceType | java.lang.String
  type NewDhcpConfigurationList = js.Array[NewDhcpConfiguration]
  type NextToken = java.lang.String
  type OccurrenceDayRequestSet = js.Array[Integer]
  type OccurrenceDaySet = js.Array[Integer]
  type OfferingClassType = _OfferingClassType | java.lang.String
  type OfferingTypeValues = _OfferingTypeValues | java.lang.String
  type OnDemandAllocationStrategy = _OnDemandAllocationStrategy | java.lang.String
  type OperationType = _OperationType | java.lang.String
  type OwnerStringList = js.Array[String]
  type PaymentOption = _PaymentOption | java.lang.String
  type PermissionGroup = awsDashSdkLib.awsDashSdkLibStrings.all | java.lang.String
  type PlacementGroupList = js.Array[PlacementGroup]
  type PlacementGroupState = _PlacementGroupState | java.lang.String
  type PlacementGroupStringList = js.Array[String]
  type PlacementStrategy = _PlacementStrategy | java.lang.String
  type PlatformValues = awsDashSdkLib.awsDashSdkLibStrings.Windows | java.lang.String
  type PoolMaxResults = scala.Double
  type PrefixListIdList = js.Array[PrefixListId]
  type PrefixListIdSet = js.Array[String]
  type PrefixListSet = js.Array[PrefixList]
  type PriceScheduleList = js.Array[PriceSchedule]
  type PriceScheduleSpecificationList = js.Array[PriceScheduleSpecification]
  type PricingDetailsList = js.Array[PricingDetail]
  type PrincipalIdFormatList = js.Array[PrincipalIdFormat]
  type PrincipalType = _PrincipalType | java.lang.String
  type PrivateIpAddressConfigSet = js.Array[ScheduledInstancesPrivateIpAddressConfig]
  type PrivateIpAddressSpecificationList = js.Array[PrivateIpAddressSpecification]
  type PrivateIpAddressStringList = js.Array[String]
  type ProductCodeList = js.Array[ProductCode]
  type ProductCodeStringList = js.Array[String]
  type ProductCodeValues = _ProductCodeValues | java.lang.String
  type ProductDescriptionList = js.Array[String]
  type PropagatingVgwList = js.Array[PropagatingVgw]
  type PublicIpStringList = js.Array[String]
  type PublicIpv4PoolRangeSet = js.Array[PublicIpv4PoolRange]
  type PublicIpv4PoolSet = js.Array[PublicIpv4Pool]
  type PurchaseRequestSet = js.Array[PurchaseRequest]
  type PurchaseSet = js.Array[Purchase]
  type PurchasedScheduledInstanceSet = js.Array[ScheduledInstance]
  type RIProductDescription = _RIProductDescription | java.lang.String
  type ReasonCodesList = js.Array[ReportInstanceReasonCodes]
  type RecurringChargeFrequency = awsDashSdkLib.awsDashSdkLibStrings.Hourly | java.lang.String
  type RecurringChargesList = js.Array[RecurringCharge]
  type RegionList = js.Array[Region]
  type RegionNameStringList = js.Array[String]
  type ReportInstanceReasonCodes = _ReportInstanceReasonCodes | java.lang.String
  type ReportStatusType = _ReportStatusType | java.lang.String
  type RequestHostIdList = js.Array[String]
  type RequestHostIdSet = js.Array[String]
  type ReservationList = js.Array[Reservation]
  type ReservationState = _ReservationState | java.lang.String
  type ReservedInstanceIdSet = js.Array[String]
  type ReservedInstanceReservationValueSet = js.Array[ReservedInstanceReservationValue]
  type ReservedInstanceState = _ReservedInstanceState | java.lang.String
  type ReservedInstancesConfigurationList = js.Array[ReservedInstancesConfiguration]
  type ReservedInstancesIdStringList = js.Array[String]
  type ReservedInstancesList = js.Array[ReservedInstances]
  type ReservedInstancesListingList = js.Array[ReservedInstancesListing]
  type ReservedInstancesModificationIdStringList = js.Array[String]
  type ReservedInstancesModificationList = js.Array[ReservedInstancesModification]
  type ReservedInstancesModificationResultList = js.Array[ReservedInstancesModificationResult]
  type ReservedInstancesOfferingIdStringList = js.Array[String]
  type ReservedInstancesOfferingList = js.Array[ReservedInstancesOffering]
  type ReservedIntancesIds = js.Array[ReservedInstancesId]
  type ResetFpgaImageAttributeName = awsDashSdkLib.awsDashSdkLibStrings.loadPermission | java.lang.String
  type ResetImageAttributeName = awsDashSdkLib.awsDashSdkLibStrings.launchPermission | java.lang.String
  type ResourceIdList = js.Array[String]
  type ResourceList = js.Array[String]
  type ResourceType = _ResourceType | java.lang.String
  type ResponseHostIdList = js.Array[String]
  type ResponseHostIdSet = js.Array[String]
  type RestorableByStringList = js.Array[String]
  type RouteList = js.Array[Route]
  type RouteOrigin = _RouteOrigin | java.lang.String
  type RouteState = _RouteState | java.lang.String
  type RouteTableAssociationList = js.Array[RouteTableAssociation]
  type RouteTableList = js.Array[RouteTable]
  type RuleAction = _RuleAction | java.lang.String
  type ScheduledInstanceAvailabilitySet = js.Array[ScheduledInstanceAvailability]
  type ScheduledInstanceIdRequestSet = js.Array[String]
  type ScheduledInstanceSet = js.Array[ScheduledInstance]
  type ScheduledInstancesBlockDeviceMappingSet = js.Array[ScheduledInstancesBlockDeviceMapping]
  type ScheduledInstancesIpv6AddressList = js.Array[ScheduledInstancesIpv6Address]
  type ScheduledInstancesNetworkInterfaceSet = js.Array[ScheduledInstancesNetworkInterface]
  type ScheduledInstancesSecurityGroupIdSet = js.Array[String]
  type SecurityGroupIdStringList = js.Array[String]
  type SecurityGroupList = js.Array[SecurityGroup]
  type SecurityGroupReferences = js.Array[SecurityGroupReference]
  type SecurityGroupStringList = js.Array[String]
  type ServiceConfigurationSet = js.Array[ServiceConfiguration]
  type ServiceDetailSet = js.Array[ServiceDetail]
  type ServiceState = _ServiceState | java.lang.String
  type ServiceType = _ServiceType | java.lang.String
  type ServiceTypeDetailSet = js.Array[ServiceTypeDetail]
  type ShutdownBehavior = _ShutdownBehavior | java.lang.String
  type SnapshotAttributeName = _SnapshotAttributeName | java.lang.String
  type SnapshotDetailList = js.Array[SnapshotDetail]
  type SnapshotIdStringList = js.Array[String]
  type SnapshotList = js.Array[Snapshot]
  type SnapshotState = _SnapshotState | java.lang.String
  type SpotAllocationStrategy = _SpotAllocationStrategy | java.lang.String
  type SpotFleetRequestConfigSet = js.Array[SpotFleetRequestConfig]
  type SpotFleetTagSpecificationList = js.Array[SpotFleetTagSpecification]
  type SpotInstanceInterruptionBehavior = _SpotInstanceInterruptionBehavior | java.lang.String
  type SpotInstanceRequestIdList = js.Array[String]
  type SpotInstanceRequestList = js.Array[SpotInstanceRequest]
  type SpotInstanceState = _SpotInstanceState | java.lang.String
  type SpotInstanceType = _SpotInstanceType | java.lang.String
  type SpotPriceHistoryList = js.Array[SpotPrice]
  type StaleIpPermissionSet = js.Array[StaleIpPermission]
  type StaleSecurityGroupSet = js.Array[StaleSecurityGroup]
  type State = _State | java.lang.String
  type Status = _Status | java.lang.String
  type StatusName = awsDashSdkLib.awsDashSdkLibStrings.reachability | java.lang.String
  type StatusType = _StatusType | java.lang.String
  type String = java.lang.String
  type SubnetCidrBlockStateCode = _SubnetCidrBlockStateCode | java.lang.String
  type SubnetIdStringList = js.Array[String]
  type SubnetIpv6CidrBlockAssociationSet = js.Array[SubnetIpv6CidrBlockAssociation]
  type SubnetList = js.Array[Subnet]
  type SubnetState = _SubnetState | java.lang.String
  type SuccessfulInstanceCreditSpecificationSet = js.Array[SuccessfulInstanceCreditSpecificationItem]
  type SummaryStatus = _SummaryStatus | java.lang.String
  type TagDescriptionList = js.Array[TagDescription]
  type TagList = js.Array[Tag]
  type TagSpecificationList = js.Array[TagSpecification]
  type TargetConfigurationRequestSet = js.Array[TargetConfigurationRequest]
  type TargetGroups = js.Array[TargetGroup]
  type TargetNetworkSet = js.Array[TargetNetwork]
  type TargetReservationValueSet = js.Array[TargetReservationValue]
  type TelemetryStatus = _TelemetryStatus | java.lang.String
  type Tenancy = _Tenancy | java.lang.String
  type TerminateConnectionStatusSet = js.Array[TerminateConnectionStatus]
  type TrafficType = _TrafficType | java.lang.String
  type TransitGatewayAssociationState = _TransitGatewayAssociationState | java.lang.String
  type TransitGatewayAttachmentIdStringList = js.Array[String]
  type TransitGatewayAttachmentList = js.Array[TransitGatewayAttachment]
  type TransitGatewayAttachmentPropagationList = js.Array[TransitGatewayAttachmentPropagation]
  type TransitGatewayAttachmentResourceType = _TransitGatewayAttachmentResourceType | java.lang.String
  type TransitGatewayAttachmentState = _TransitGatewayAttachmentState | java.lang.String
  type TransitGatewayIdStringList = js.Array[String]
  type TransitGatewayList = js.Array[TransitGateway]
  type TransitGatewayMaxResults = scala.Double
  type TransitGatewayPropagationState = _TransitGatewayPropagationState | java.lang.String
  type TransitGatewayRouteAttachmentList = js.Array[TransitGatewayRouteAttachment]
  type TransitGatewayRouteList = js.Array[TransitGatewayRoute]
  type TransitGatewayRouteState = _TransitGatewayRouteState | java.lang.String
  type TransitGatewayRouteTableAssociationList = js.Array[TransitGatewayRouteTableAssociation]
  type TransitGatewayRouteTableIdStringList = js.Array[String]
  type TransitGatewayRouteTableList = js.Array[TransitGatewayRouteTable]
  type TransitGatewayRouteTablePropagationList = js.Array[TransitGatewayRouteTablePropagation]
  type TransitGatewayRouteTableState = _TransitGatewayRouteTableState | java.lang.String
  type TransitGatewayRouteType = _TransitGatewayRouteType | java.lang.String
  type TransitGatewayState = _TransitGatewayState | java.lang.String
  type TransitGatewayVpcAttachmentList = js.Array[TransitGatewayVpcAttachment]
  type TransportProtocol = _TransportProtocol | java.lang.String
  type TunnelOptionsList = js.Array[VpnTunnelOptionsSpecification]
  type UnsuccessfulInstanceCreditSpecificationErrorCode = _UnsuccessfulInstanceCreditSpecificationErrorCode | java.lang.String
  type UnsuccessfulInstanceCreditSpecificationSet = js.Array[UnsuccessfulInstanceCreditSpecificationItem]
  type UnsuccessfulItemList = js.Array[UnsuccessfulItem]
  type UnsuccessfulItemSet = js.Array[UnsuccessfulItem]
  type UserGroupStringList = js.Array[String]
  type UserIdGroupPairList = js.Array[UserIdGroupPair]
  type UserIdGroupPairSet = js.Array[UserIdGroupPair]
  type UserIdStringList = js.Array[String]
  type ValueStringList = js.Array[String]
  type VersionDescription = java.lang.String
  type VersionStringList = js.Array[String]
  type VgwTelemetryList = js.Array[VgwTelemetry]
  type VirtualizationType = _VirtualizationType | java.lang.String
  type VolumeAttachmentList = js.Array[VolumeAttachment]
  type VolumeAttachmentState = _VolumeAttachmentState | java.lang.String
  type VolumeAttributeName = _VolumeAttributeName | java.lang.String
  type VolumeIdStringList = js.Array[String]
  type VolumeList = js.Array[Volume]
  type VolumeModificationList = js.Array[VolumeModification]
  type VolumeModificationState = _VolumeModificationState | java.lang.String
  type VolumeState = _VolumeState | java.lang.String
  type VolumeStatusActionsList = js.Array[VolumeStatusAction]
  type VolumeStatusDetailsList = js.Array[VolumeStatusDetails]
  type VolumeStatusEventsList = js.Array[VolumeStatusEvent]
  type VolumeStatusInfoStatus = _VolumeStatusInfoStatus | java.lang.String
  type VolumeStatusList = js.Array[VolumeStatusItem]
  type VolumeStatusName = _VolumeStatusName | java.lang.String
  type VolumeType = _VolumeType | java.lang.String
  type VpcAttachmentList = js.Array[VpcAttachment]
  type VpcAttributeName = _VpcAttributeName | java.lang.String
  type VpcCidrBlockAssociationSet = js.Array[VpcCidrBlockAssociation]
  type VpcCidrBlockStateCode = _VpcCidrBlockStateCode | java.lang.String
  type VpcClassicLinkIdList = js.Array[String]
  type VpcClassicLinkList = js.Array[VpcClassicLink]
  type VpcEndpointConnectionSet = js.Array[VpcEndpointConnection]
  type VpcEndpointSet = js.Array[VpcEndpoint]
  type VpcEndpointType = _VpcEndpointType | java.lang.String
  type VpcIdStringList = js.Array[String]
  type VpcIpv6CidrBlockAssociationSet = js.Array[VpcIpv6CidrBlockAssociation]
  type VpcList = js.Array[Vpc]
  type VpcPeeringConnectionList = js.Array[VpcPeeringConnection]
  type VpcPeeringConnectionStateReasonCode = _VpcPeeringConnectionStateReasonCode | java.lang.String
  type VpcState = _VpcState | java.lang.String
  type VpcTenancy = awsDashSdkLib.awsDashSdkLibStrings.default | java.lang.String
  type VpnConnectionIdStringList = js.Array[String]
  type VpnConnectionList = js.Array[VpnConnection]
  type VpnEcmpSupportValue = _VpnEcmpSupportValue | java.lang.String
  type VpnGatewayIdStringList = js.Array[String]
  type VpnGatewayList = js.Array[VpnGateway]
  type VpnProtocol = awsDashSdkLib.awsDashSdkLibStrings.openvpn | java.lang.String
  type VpnState = _VpnState | java.lang.String
  type VpnStaticRouteList = js.Array[VpnStaticRoute]
  type VpnStaticRouteSource = awsDashSdkLib.awsDashSdkLibStrings.Static | java.lang.String
  type ZoneIdStringList = js.Array[String]
  type ZoneNameStringList = js.Array[String]
  type _Blob = nodeLib.Buffer | stdLib.Uint8Array | awsDashSdkLib.clientsEc2Mod.Blob | java.lang.String
  type apiVersion = _apiVersion | java.lang.String
  type scope = _scope | java.lang.String
}

