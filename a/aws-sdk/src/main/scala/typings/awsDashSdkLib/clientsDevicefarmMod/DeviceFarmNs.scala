package typings
package awsDashSdkLib.clientsDevicefarmMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@JSImport("aws-sdk/clients/devicefarm", "DeviceFarm")
@js.native
object DeviceFarmNs extends js.Object {
  trait AccountSettings extends js.Object {
    /**
      * The AWS account number specified in the AccountSettings container.
      */
    var awsAccountNumber: js.UndefOr[AWSAccountNumber] = js.undefined
    /**
      * The default number of minutes (at the account level) a test run will execute before it times out. Default value is 60 minutes.
      */
    var defaultJobTimeoutMinutes: js.UndefOr[JobTimeoutMinutes] = js.undefined
    /**
      * The maximum number of minutes a test run will execute before it times out.
      */
    var maxJobTimeoutMinutes: js.UndefOr[JobTimeoutMinutes] = js.undefined
    /**
      * The maximum number of device slots that the AWS account can purchase. Each maximum is expressed as an offering-id:number pair, where the offering-id represents one of the IDs returned by the ListOfferings command.
      */
    var maxSlots: js.UndefOr[MaxSlotMap] = js.undefined
    /**
      * When set to true, for private devices, Device Farm will not sign your app again. For public devices, Device Farm always signs your apps again and this parameter has no effect. For more information about how Device Farm re-signs your app(s), see Do you modify my app? in the AWS Device Farm FAQs.
      */
    var skipAppResign: js.UndefOr[SkipAppResign] = js.undefined
    /**
      * Information about an AWS account's usage of free trial device minutes.
      */
    var trialMinutes: js.UndefOr[TrialMinutes] = js.undefined
    /**
      * Returns the unmetered devices you have purchased or want to purchase.
      */
    var unmeteredDevices: js.UndefOr[PurchasedDevicesMap] = js.undefined
    /**
      * Returns the unmetered remote access devices you have purchased or want to purchase.
      */
    var unmeteredRemoteAccessDevices: js.UndefOr[PurchasedDevicesMap] = js.undefined
  }
  
  trait Artifact extends js.Object {
    /**
      * The artifact's ARN.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The artifact's file extension.
      */
    var extension: js.UndefOr[String] = js.undefined
    /**
      * The artifact's name.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * The artifact's type. Allowed values include the following:   UNKNOWN: An unknown type.   SCREENSHOT: The screenshot type.   DEVICE_LOG: The device log type.   MESSAGE_LOG: The message log type.   VIDEO_LOG: The video log type.   RESULT_LOG: The result log type.   SERVICE_LOG: The service log type.   WEBKIT_LOG: The web kit log type.   INSTRUMENTATION_OUTPUT: The instrumentation type.   EXERCISER_MONKEY_OUTPUT: For Android, the artifact (log) generated by an Android fuzz test.   CALABASH_JSON_OUTPUT: The Calabash JSON output type.   CALABASH_PRETTY_OUTPUT: The Calabash pretty output type.   CALABASH_STANDARD_OUTPUT: The Calabash standard output type.   CALABASH_JAVA_XML_OUTPUT: The Calabash Java XML output type.   AUTOMATION_OUTPUT: The automation output type.   APPIUM_SERVER_OUTPUT: The Appium server output type.   APPIUM_JAVA_OUTPUT: The Appium Java output type.   APPIUM_JAVA_XML_OUTPUT: The Appium Java XML output type.   APPIUM_PYTHON_OUTPUT: The Appium Python output type.   APPIUM_PYTHON_XML_OUTPUT: The Appium Python XML output type.   EXPLORER_EVENT_LOG: The Explorer event log output type.   EXPLORER_SUMMARY_LOG: The Explorer summary log output type.   APPLICATION_CRASH_REPORT: The application crash report output type.   XCTEST_LOG: The XCode test output type.   VIDEO: The Video output type.   CUSTOMER_ARTIFACT:The Customer Artifact output type.   CUSTOMER_ARTIFACT_LOG: The Customer Artifact Log output type.   TESTSPEC_OUTPUT: The Test Spec Output type.  
      */
    var `type`: js.UndefOr[ArtifactType] = js.undefined
    /**
      * The pre-signed Amazon S3 URL that can be used with a corresponding GET request to download the artifact's file.
      */
    var url: js.UndefOr[URL] = js.undefined
  }
  
  trait CPU extends js.Object {
    /**
      * The CPU's architecture, for example x86 or ARM.
      */
    var architecture: js.UndefOr[String] = js.undefined
    /**
      * The clock speed of the device's CPU, expressed in hertz (Hz). For example, a 1.2 GHz CPU is expressed as 1200000000.
      */
    var clock: js.UndefOr[Double] = js.undefined
    /**
      * The CPU's frequency.
      */
    var frequency: js.UndefOr[String] = js.undefined
  }
  
  trait ClientApiVersions extends js.Object {
    /**
      * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
      */
    var apiVersion: js.UndefOr[apiVersion] = js.undefined
  }
  
  trait Counters extends js.Object {
    /**
      * The number of errored entities.
      */
    var errored: js.UndefOr[Integer] = js.undefined
    /**
      * The number of failed entities.
      */
    var failed: js.UndefOr[Integer] = js.undefined
    /**
      * The number of passed entities.
      */
    var passed: js.UndefOr[Integer] = js.undefined
    /**
      * The number of skipped entities.
      */
    var skipped: js.UndefOr[Integer] = js.undefined
    /**
      * The number of stopped entities.
      */
    var stopped: js.UndefOr[Integer] = js.undefined
    /**
      * The total number of entities.
      */
    var total: js.UndefOr[Integer] = js.undefined
    /**
      * The number of warned entities.
      */
    var warned: js.UndefOr[Integer] = js.undefined
  }
  
  trait CreateDevicePoolRequest extends js.Object {
    /**
      * The device pool's description.
      */
    var description: js.UndefOr[Message] = js.undefined
    /**
      * The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and that meet the criteria that you assign for the rules parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter. By specifying the maximum number of devices, you can control the costs that you incur by running tests.
      */
    var maxDevices: js.UndefOr[Integer] = js.undefined
    /**
      * The device pool's name.
      */
    var name: Name
    /**
      * The ARN of the project for the device pool.
      */
    var projectArn: AmazonResourceName
    /**
      * The device pool's rules.
      */
    var rules: Rules
  }
  
  trait CreateDevicePoolResult extends js.Object {
    /**
      * The newly created device pool.
      */
    var devicePool: js.UndefOr[DevicePool] = js.undefined
  }
  
  trait CreateInstanceProfileRequest extends js.Object {
    /**
      * The description of your instance profile.
      */
    var description: js.UndefOr[Message] = js.undefined
    /**
      * An array of strings specifying the list of app packages that should not be cleaned up from the device after a test run is over. The list of packages is only considered if you set packageCleanup to true.
      */
    var excludeAppPackagesFromCleanup: js.UndefOr[PackageIds] = js.undefined
    /**
      * The name of your instance profile.
      */
    var name: Name
    /**
      * When set to true, Device Farm will remove app packages after a test run. The default value is false for private devices.
      */
    var packageCleanup: js.UndefOr[Boolean] = js.undefined
    /**
      * When set to true, Device Farm will reboot the instance after a test run. The default value is true.
      */
    var rebootAfterUse: js.UndefOr[Boolean] = js.undefined
  }
  
  trait CreateInstanceProfileResult extends js.Object {
    /**
      * An object containing information about your instance profile.
      */
    var instanceProfile: js.UndefOr[InstanceProfile] = js.undefined
  }
  
  trait CreateNetworkProfileRequest extends js.Object {
    /**
      * The description of the network profile.
      */
    var description: js.UndefOr[Message] = js.undefined
    /**
      * The data throughput rate in bits per second, as an integer from 0 to 104857600.
      */
    var downlinkBandwidthBits: js.UndefOr[Long] = js.undefined
    /**
      * Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
      */
    var downlinkDelayMs: js.UndefOr[Long] = js.undefined
    /**
      * Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
      */
    var downlinkJitterMs: js.UndefOr[Long] = js.undefined
    /**
      * Proportion of received packets that fail to arrive from 0 to 100 percent.
      */
    var downlinkLossPercent: js.UndefOr[PercentInteger] = js.undefined
    /**
      * The name you wish to specify for the new network profile.
      */
    var name: Name
    /**
      * The Amazon Resource Name (ARN) of the project for which you want to create a network profile.
      */
    var projectArn: AmazonResourceName
    /**
      * The type of network profile you wish to create. Valid values are listed below.
      */
    var `type`: js.UndefOr[NetworkProfileType] = js.undefined
    /**
      * The data throughput rate in bits per second, as an integer from 0 to 104857600.
      */
    var uplinkBandwidthBits: js.UndefOr[Long] = js.undefined
    /**
      * Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
      */
    var uplinkDelayMs: js.UndefOr[Long] = js.undefined
    /**
      * Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
      */
    var uplinkJitterMs: js.UndefOr[Long] = js.undefined
    /**
      * Proportion of transmitted packets that fail to arrive from 0 to 100 percent.
      */
    var uplinkLossPercent: js.UndefOr[PercentInteger] = js.undefined
  }
  
  trait CreateNetworkProfileResult extends js.Object {
    /**
      * The network profile that is returned by the create network profile request.
      */
    var networkProfile: js.UndefOr[NetworkProfile] = js.undefined
  }
  
  trait CreateProjectRequest extends js.Object {
    /**
      * Sets the execution timeout value (in minutes) for a project. All test runs in this project will use the specified execution timeout value unless overridden when scheduling a run.
      */
    var defaultJobTimeoutMinutes: js.UndefOr[JobTimeoutMinutes] = js.undefined
    /**
      * The project's name.
      */
    var name: Name
  }
  
  trait CreateProjectResult extends js.Object {
    /**
      * The newly created project.
      */
    var project: js.UndefOr[Project] = js.undefined
  }
  
  trait CreateRemoteAccessSessionConfiguration extends js.Object {
    /**
      * The billing method for the remote access session.
      */
    var billingMethod: js.UndefOr[BillingMethod] = js.undefined
    /**
      * An array of Amazon Resource Names (ARNs) included in the VPC endpoint configuration.
      */
    var vpceConfigurationArns: js.UndefOr[AmazonResourceNames] = js.undefined
  }
  
  trait CreateRemoteAccessSessionRequest extends js.Object {
    /**
      * Unique identifier for the client. If you want access to multiple devices on the same client, you should pass the same clientId value in each call to CreateRemoteAccessSession. This is required only if remoteDebugEnabled is set to true.
      */
    var clientId: js.UndefOr[ClientId] = js.undefined
    /**
      * The configuration information for the remote access session request.
      */
    var configuration: js.UndefOr[CreateRemoteAccessSessionConfiguration] = js.undefined
    /**
      * The Amazon Resource Name (ARN) of the device for which you want to create a remote access session.
      */
    var deviceArn: AmazonResourceName
    /**
      * The Amazon Resource Name (ARN) of the device instance for which you want to create a remote access session.
      */
    var instanceArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The interaction mode of the remote access session. Valid values are:   INTERACTIVE: You can interact with the iOS device by viewing, touching, and rotating the screen. You cannot run XCUITest framework-based tests in this mode.   NO_VIDEO: You are connected to the device but cannot interact with it or view the screen. This mode has the fastest test execution speed. You can run XCUITest framework-based tests in this mode.   VIDEO_ONLY: You can view the screen but cannot touch or rotate it. You can run XCUITest framework-based tests and watch the screen in this mode.  
      */
    var interactionMode: js.UndefOr[InteractionMode] = js.undefined
    /**
      * The name of the remote access session that you wish to create.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * The Amazon Resource Name (ARN) of the project for which you want to create a remote access session.
      */
    var projectArn: AmazonResourceName
    /**
      * Set to true if you want to access devices remotely for debugging in your remote access session.
      */
    var remoteDebugEnabled: js.UndefOr[Boolean] = js.undefined
    /**
      * The Amazon Resource Name (ARN) for the app to be recorded in the remote access session.
      */
    var remoteRecordAppArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * Set to true to enable remote recording for the remote access session.
      */
    var remoteRecordEnabled: js.UndefOr[Boolean] = js.undefined
    /**
      * When set to true, for private devices, Device Farm will not sign your app again. For public devices, Device Farm always signs your apps again and this parameter has no effect. For more information about how Device Farm re-signs your app(s), see Do you modify my app? in the AWS Device Farm FAQs.
      */
    var skipAppResign: js.UndefOr[Boolean] = js.undefined
    /**
      * The public key of the ssh key pair you want to use for connecting to remote devices in your remote debugging session. This is only required if remoteDebugEnabled is set to true.
      */
    var sshPublicKey: js.UndefOr[SshPublicKey] = js.undefined
  }
  
  trait CreateRemoteAccessSessionResult extends js.Object {
    /**
      * A container that describes the remote access session when the request to create a remote access session is sent.
      */
    var remoteAccessSession: js.UndefOr[RemoteAccessSession] = js.undefined
  }
  
  trait CreateUploadRequest extends js.Object {
    /**
      * The upload's content type (for example, "application/octet-stream").
      */
    var contentType: js.UndefOr[ContentType] = js.undefined
    /**
      * The upload's file name. The name should not contain the '/' character. If uploading an iOS app, the file name needs to end with the .ipa extension. If uploading an Android app, the file name needs to end with the .apk extension. For all others, the file name must end with the .zip file extension.
      */
    var name: Name
    /**
      * The ARN of the project for the upload.
      */
    var projectArn: AmazonResourceName
    /**
      * The upload's upload type. Must be one of the following values:   ANDROID_APP: An Android upload.   IOS_APP: An iOS upload.   WEB_APP: A web application upload.   EXTERNAL_DATA: An external data upload.   APPIUM_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload.   APPIUM_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload.   APPIUM_PYTHON_TEST_PACKAGE: An Appium Python test package upload.   APPIUM_NODE_TEST_PACKAGE: An Appium Node.js test package upload.   APPIUM_RUBY_TEST_PACKAGE: An Appium Ruby test package upload.   APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload for a web app.   APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload for a web app.   APPIUM_WEB_PYTHON_TEST_PACKAGE: An Appium Python test package upload for a web app.   APPIUM_WEB_NODE_TEST_PACKAGE: An Appium Node.js test package upload for a web app.   APPIUM_WEB_RUBY_TEST_PACKAGE: An Appium Ruby test package upload for a web app.   CALABASH_TEST_PACKAGE: A Calabash test package upload.   INSTRUMENTATION_TEST_PACKAGE: An instrumentation upload.   UIAUTOMATION_TEST_PACKAGE: A uiautomation test package upload.   UIAUTOMATOR_TEST_PACKAGE: A uiautomator test package upload.   XCTEST_TEST_PACKAGE: An XCode test package upload.   XCTEST_UI_TEST_PACKAGE: An XCode UI test package upload.   APPIUM_JAVA_JUNIT_TEST_SPEC: An Appium Java JUnit test spec upload.   APPIUM_JAVA_TESTNG_TEST_SPEC: An Appium Java TestNG test spec upload.   APPIUM_PYTHON_TEST_SPEC: An Appium Python test spec upload.   APPIUM_NODE_TEST_SPEC: An Appium Node.js test spec upload.   APPIUM_RUBY_TEST_SPEC: An Appium Ruby test spec upload.   APPIUM_WEB_JAVA_JUNIT_TEST_SPEC: An Appium Java JUnit test spec upload for a web app.   APPIUM_WEB_JAVA_TESTNG_TEST_SPEC: An Appium Java TestNG test spec upload for a web app.   APPIUM_WEB_PYTHON_TEST_SPEC: An Appium Python test spec upload for a web app.   APPIUM_WEB_NODE_TEST_SPEC: An Appium Node.js test spec upload for a web app.   APPIUM_WEB_RUBY_TEST_SPEC: An Appium Ruby test spec upload for a web app.   INSTRUMENTATION_TEST_SPEC: An instrumentation test spec upload.   XCTEST_UI_TEST_SPEC: An XCode UI test spec upload.    Note If you call CreateUpload with WEB_APP specified, AWS Device Farm throws an ArgumentException error.
      */
    var `type`: UploadType
  }
  
  trait CreateUploadResult extends js.Object {
    /**
      * The newly created upload.
      */
    var upload: js.UndefOr[Upload] = js.undefined
  }
  
  trait CreateVPCEConfigurationRequest extends js.Object {
    /**
      * The DNS name of the service running in your VPC that you want Device Farm to test.
      */
    var serviceDnsName: ServiceDnsName
    /**
      * An optional description, providing more details about your VPC endpoint configuration.
      */
    var vpceConfigurationDescription: js.UndefOr[VPCEConfigurationDescription] = js.undefined
    /**
      * The friendly name you give to your VPC endpoint configuration, to manage your configurations more easily.
      */
    var vpceConfigurationName: VPCEConfigurationName
    /**
      * The name of the VPC endpoint service running inside your AWS account that you want Device Farm to test.
      */
    var vpceServiceName: VPCEServiceName
  }
  
  trait CreateVPCEConfigurationResult extends js.Object {
    /**
      * An object containing information about your VPC endpoint configuration.
      */
    var vpceConfiguration: js.UndefOr[VPCEConfiguration] = js.undefined
  }
  
  trait CustomerArtifactPaths extends js.Object {
    /**
      * Comma-separated list of paths on the Android device where the artifacts generated by the customer's tests will be pulled from.
      */
    var androidPaths: js.UndefOr[AndroidPaths] = js.undefined
    /**
      * Comma-separated list of paths in the test execution environment where the artifacts generated by the customer's tests will be pulled from.
      */
    var deviceHostPaths: js.UndefOr[DeviceHostPaths] = js.undefined
    /**
      * Comma-separated list of paths on the iOS device where the artifacts generated by the customer's tests will be pulled from.
      */
    var iosPaths: js.UndefOr[IosPaths] = js.undefined
  }
  
  trait DeleteDevicePoolRequest extends js.Object {
    /**
      * Represents the Amazon Resource Name (ARN) of the Device Farm device pool you wish to delete.
      */
    var arn: AmazonResourceName
  }
  
  trait DeleteDevicePoolResult extends js.Object
  
  trait DeleteInstanceProfileRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the instance profile you are requesting to delete.
      */
    var arn: AmazonResourceName
  }
  
  trait DeleteInstanceProfileResult extends js.Object
  
  trait DeleteNetworkProfileRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the network profile you want to delete.
      */
    var arn: AmazonResourceName
  }
  
  trait DeleteNetworkProfileResult extends js.Object
  
  trait DeleteProjectRequest extends js.Object {
    /**
      * Represents the Amazon Resource Name (ARN) of the Device Farm project you wish to delete.
      */
    var arn: AmazonResourceName
  }
  
  trait DeleteProjectResult extends js.Object
  
  trait DeleteRemoteAccessSessionRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the sesssion for which you want to delete remote access.
      */
    var arn: AmazonResourceName
  }
  
  trait DeleteRemoteAccessSessionResult extends js.Object
  
  trait DeleteRunRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) for the run you wish to delete.
      */
    var arn: AmazonResourceName
  }
  
  trait DeleteRunResult extends js.Object
  
  trait DeleteUploadRequest extends js.Object {
    /**
      * Represents the Amazon Resource Name (ARN) of the Device Farm upload you wish to delete.
      */
    var arn: AmazonResourceName
  }
  
  trait DeleteUploadResult extends js.Object
  
  trait DeleteVPCEConfigurationRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to delete.
      */
    var arn: AmazonResourceName
  }
  
  trait DeleteVPCEConfigurationResult extends js.Object
  
  trait Device extends js.Object {
    /**
      * The device's ARN.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * Reflects how likely a device will be available for a test run. It is currently available in the ListDevices and GetDevice API methods.
      */
    var availability: js.UndefOr[DeviceAvailability] = js.undefined
    /**
      * The device's carrier.
      */
    var carrier: js.UndefOr[String] = js.undefined
    /**
      * Information about the device's CPU.
      */
    var cpu: js.UndefOr[CPU] = js.undefined
    /**
      * The name of the fleet to which this device belongs.
      */
    var fleetName: js.UndefOr[String] = js.undefined
    /**
      * The type of fleet to which this device belongs. Possible values for fleet type are PRIVATE and PUBLIC.
      */
    var fleetType: js.UndefOr[String] = js.undefined
    /**
      * The device's form factor. Allowed values include:   PHONE: The phone form factor.   TABLET: The tablet form factor.  
      */
    var formFactor: js.UndefOr[DeviceFormFactor] = js.undefined
    /**
      * The device's heap size, expressed in bytes.
      */
    var heapSize: js.UndefOr[Long] = js.undefined
    /**
      * The device's image name.
      */
    var image: js.UndefOr[String] = js.undefined
    /**
      * The instances belonging to this device.
      */
    var instances: js.UndefOr[DeviceInstances] = js.undefined
    /**
      * The device's manufacturer name.
      */
    var manufacturer: js.UndefOr[String] = js.undefined
    /**
      * The device's total memory size, expressed in bytes.
      */
    var memory: js.UndefOr[Long] = js.undefined
    /**
      * The device's model name.
      */
    var model: js.UndefOr[String] = js.undefined
    /**
      * The device's model ID.
      */
    var modelId: js.UndefOr[String] = js.undefined
    /**
      * The device's display name.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * The device's operating system type.
      */
    var os: js.UndefOr[String] = js.undefined
    /**
      * The device's platform. Allowed values include:   ANDROID: The Android platform.   IOS: The iOS platform.  
      */
    var platform: js.UndefOr[DevicePlatform] = js.undefined
    /**
      * The device's radio.
      */
    var radio: js.UndefOr[String] = js.undefined
    /**
      * Specifies whether remote access has been enabled for the specified device.
      */
    var remoteAccessEnabled: js.UndefOr[Boolean] = js.undefined
    /**
      * This flag is set to true if remote debugging is enabled for the device.
      */
    var remoteDebugEnabled: js.UndefOr[Boolean] = js.undefined
    /**
      * The resolution of the device.
      */
    var resolution: js.UndefOr[Resolution] = js.undefined
  }
  
  trait DeviceFilter extends js.Object {
    /**
      * The aspect of a device such as platform or model used as the selection criteria in a device filter. The supported operators for each attribute are provided in the following list.  ARN  The Amazon Resource Name (ARN) of the device. For example, "arn:aws:devicefarm:us-west-2::device:12345Example".  Supported operators: EQUALS, IN, NOT_IN   PLATFORM  The device platform. Valid values are "ANDROID" or "IOS".  Supported operators: EQUALS   OS_VERSION  The operating system version. For example, "10.3.2".  Supported operators: EQUALS, GREATER_THAN, GREATER_THAN_OR_EQUALS, IN, LESS_THAN, LESS_THAN_OR_EQUALS, NOT_IN   MODEL  The device model. For example, "iPad 5th Gen".  Supported operators: CONTAINS, EQUALS, IN, NOT_IN   AVAILABILITY  The current availability of the device. Valid values are "AVAILABLE", "HIGHLY_AVAILABLE", "BUSY", or "TEMPORARY_NOT_AVAILABLE".  Supported operators: EQUALS   FORM_FACTOR  The device form factor. Valid values are "PHONE" or "TABLET".  Supported operators: EQUALS   MANUFACTURER  The device manufacturer. For example, "Apple".  Supported operators: EQUALS, IN, NOT_IN   REMOTE_ACCESS_ENABLED  Whether the device is enabled for remote access. Valid values are "TRUE" or "FALSE".  Supported operators: EQUALS   REMOTE_DEBUG_ENABLED  Whether the device is enabled for remote debugging. Valid values are "TRUE" or "FALSE".  Supported operators: EQUALS   INSTANCE_ARN  The Amazon Resource Name (ARN) of the device instance.  Supported operators: EQUALS, IN, NOT_IN   INSTANCE_LABELS  The label of the device instance.  Supported operators: CONTAINS   FLEET_TYPE  The fleet type. Valid values are "PUBLIC" or "PRIVATE".  Supported operators: EQUALS   
      */
    var attribute: js.UndefOr[DeviceFilterAttribute] = js.undefined
    /**
      * Specifies how Device Farm compares the filter's attribute to the value. For the operators that are supported by each attribute, see the attribute descriptions.
      */
    var operator: js.UndefOr[RuleOperator] = js.undefined
    /**
      * An array of one or more filter values used in a device filter.  Operator Values    The IN and NOT_IN operators can take a values array that has more than one element.   The other operators require an array with a single element.    Attribute Values    The PLATFORM attribute can be set to "ANDROID" or "IOS".   The AVAILABILITY attribute can be set to "AVAILABLE", "HIGHLY_AVAILABLE", "BUSY", or "TEMPORARY_NOT_AVAILABLE".   The FORM_FACTOR attribute can be set to "PHONE" or "TABLET".   The FLEET_TYPE attribute can be set to "PUBLIC" or "PRIVATE".  
      */
    var values: js.UndefOr[DeviceFilterValues] = js.undefined
  }
  
  trait DeviceInstance extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the device instance.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The Amazon Resource Name (ARN) of the device.
      */
    var deviceArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * A object containing information about the instance profile.
      */
    var instanceProfile: js.UndefOr[InstanceProfile] = js.undefined
    /**
      * An array of strings describing the device instance.
      */
    var labels: js.UndefOr[InstanceLabels] = js.undefined
    /**
      * The status of the device instance. Valid values are listed below.
      */
    var status: js.UndefOr[InstanceStatus] = js.undefined
    /**
      * Unique device identifier for the device instance.
      */
    var udid: js.UndefOr[String] = js.undefined
  }
  
  trait DeviceMinutes extends js.Object {
    /**
      * When specified, represents only the sum of metered minutes used by the resource to run tests.
      */
    var metered: js.UndefOr[Double] = js.undefined
    /**
      * When specified, represents the total minutes used by the resource to run tests.
      */
    var total: js.UndefOr[Double] = js.undefined
    /**
      * When specified, represents only the sum of unmetered minutes used by the resource to run tests.
      */
    var unmetered: js.UndefOr[Double] = js.undefined
  }
  
  trait DevicePool extends js.Object {
    /**
      * The device pool's ARN.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The device pool's description.
      */
    var description: js.UndefOr[Message] = js.undefined
    /**
      * The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and that meet the criteria that you assign for the rules parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter. By specifying the maximum number of devices, you can control the costs that you incur by running tests.
      */
    var maxDevices: js.UndefOr[Integer] = js.undefined
    /**
      * The device pool's name.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * Information about the device pool's rules.
      */
    var rules: js.UndefOr[Rules] = js.undefined
    /**
      * The device pool's type. Allowed values include:   CURATED: A device pool that is created and managed by AWS Device Farm.   PRIVATE: A device pool that is created and managed by the device pool developer.  
      */
    var `type`: js.UndefOr[DevicePoolType] = js.undefined
  }
  
  trait DevicePoolCompatibilityResult extends js.Object {
    /**
      * Whether the result was compatible with the device pool.
      */
    var compatible: js.UndefOr[Boolean] = js.undefined
    /**
      * The device (phone or tablet) that you wish to return information about.
      */
    var device: js.UndefOr[Device] = js.undefined
    /**
      * Information about the compatibility.
      */
    var incompatibilityMessages: js.UndefOr[IncompatibilityMessages] = js.undefined
  }
  
  trait DeviceSelectionConfiguration extends js.Object {
    /**
      * Used to dynamically select a set of devices for a test run. A filter is made up of an attribute, an operator, and one or more values.    Attribute  The aspect of a device such as platform or model used as the selection criteria in a device filter. Allowed values include:   ARN: The Amazon Resource Name (ARN) of the device. For example, "arn:aws:devicefarm:us-west-2::device:12345Example".   PLATFORM: The device platform. Valid values are "ANDROID" or "IOS".   OS_VERSION: The operating system version. For example, "10.3.2".   MODEL: The device model. For example, "iPad 5th Gen".   AVAILABILITY: The current availability of the device. Valid values are "AVAILABLE", "HIGHLY_AVAILABLE", "BUSY", or "TEMPORARY_NOT_AVAILABLE".   FORM_FACTOR: The device form factor. Valid values are "PHONE" or "TABLET".   MANUFACTURER: The device manufacturer. For example, "Apple".   REMOTE_ACCESS_ENABLED: Whether the device is enabled for remote access. Valid values are "TRUE" or "FALSE".   REMOTE_DEBUG_ENABLED: Whether the device is enabled for remote debugging. Valid values are "TRUE" or "FALSE".   INSTANCE_ARN: The Amazon Resource Name (ARN) of the device instance.   INSTANCE_LABELS: The label of the device instance.   FLEET_TYPE: The fleet type. Valid values are "PUBLIC" or "PRIVATE".      Operator  The filter operator.   The EQUALS operator is available for every attribute except INSTANCE_LABELS.   The CONTAINS operator is available for the INSTANCE_LABELS and MODEL attributes.   The IN and NOT_IN operators are available for the ARN, OS_VERSION, MODEL, MANUFACTURER, and INSTANCE_ARN attributes.   The LESS_THAN, GREATER_THAN, LESS_THAN_OR_EQUALS, and GREATER_THAN_OR_EQUALS operators are also available for the OS_VERSION attribute.      Values  An array of one or more filter values.  Operator Values    The IN and NOT_IN operators can take a values array that has more than one element.   The other operators require an array with a single element.    Attribute Values    The PLATFORM attribute can be set to "ANDROID" or "IOS".   The AVAILABILITY attribute can be set to "AVAILABLE", "HIGHLY_AVAILABLE", "BUSY", or "TEMPORARY_NOT_AVAILABLE".   The FORM_FACTOR attribute can be set to "PHONE" or "TABLET".   The FLEET_TYPE attribute can be set to "PUBLIC" or "PRIVATE".    
      */
    var filters: DeviceFilters
    /**
      * The maximum number of devices to be included in a test run.
      */
    var maxDevices: Integer
  }
  
  trait DeviceSelectionResult extends js.Object {
    /**
      * The filters in a device selection result.
      */
    var filters: js.UndefOr[DeviceFilters] = js.undefined
    /**
      * The number of devices that matched the device filter selection criteria.
      */
    var matchedDevicesCount: js.UndefOr[Integer] = js.undefined
    /**
      * The maximum number of devices to be selected by a device filter and included in a test run.
      */
    var maxDevices: js.UndefOr[Integer] = js.undefined
  }
  
  trait ExecutionConfiguration extends js.Object {
    /**
      * True if account cleanup is enabled at the beginning of the test; otherwise, false.
      */
    var accountsCleanup: js.UndefOr[AccountsCleanup] = js.undefined
    /**
      * True if app package cleanup is enabled at the beginning of the test; otherwise, false.
      */
    var appPackagesCleanup: js.UndefOr[AppPackagesCleanup] = js.undefined
    /**
      * The number of minutes a test run will execute before it times out.
      */
    var jobTimeoutMinutes: js.UndefOr[JobTimeoutMinutes] = js.undefined
    /**
      * When set to true, for private devices, Device Farm will not sign your app again. For public devices, Device Farm always signs your apps again and this parameter has no effect. For more information about how Device Farm re-signs your app(s), see Do you modify my app? in the AWS Device Farm FAQs.
      */
    var skipAppResign: js.UndefOr[SkipAppResign] = js.undefined
    /**
      * Set to true to enable video capture; otherwise, set to false. The default is true.
      */
    var videoCapture: js.UndefOr[VideoCapture] = js.undefined
  }
  
  trait GetAccountSettingsRequest extends js.Object
  
  trait GetAccountSettingsResult extends js.Object {
    /**
      * The account settings.
      */
    var accountSettings: js.UndefOr[AccountSettings] = js.undefined
  }
  
  trait GetDeviceInstanceRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the instance you're requesting information about.
      */
    var arn: AmazonResourceName
  }
  
  trait GetDeviceInstanceResult extends js.Object {
    /**
      * An object containing information about your device instance.
      */
    var deviceInstance: js.UndefOr[DeviceInstance] = js.undefined
  }
  
  trait GetDevicePoolCompatibilityRequest extends js.Object {
    /**
      * The ARN of the app that is associated with the specified device pool.
      */
    var appArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * An object containing information about the settings for a run.
      */
    var configuration: js.UndefOr[ScheduleRunConfiguration] = js.undefined
    /**
      * The device pool's ARN.
      */
    var devicePoolArn: AmazonResourceName
    /**
      * Information about the uploaded test to be run against the device pool.
      */
    var test: js.UndefOr[ScheduleRunTest] = js.undefined
    /**
      * The test type for the specified device pool. Allowed values include the following:   BUILTIN_FUZZ: The built-in fuzz type.   BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.   APPIUM_JAVA_JUNIT: The Appium Java JUnit type.   APPIUM_JAVA_TESTNG: The Appium Java TestNG type.   APPIUM_PYTHON: The Appium Python type.   APPIUM_NODE: The Appium Node.js type.   APPIUM_RUBY: The Appium Ruby type.   APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for web apps.   APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for web apps.   APPIUM_WEB_PYTHON: The Appium Python type for web apps.   APPIUM_WEB_NODE: The Appium Node.js type for web apps.   APPIUM_WEB_RUBY: The Appium Ruby type for web apps.   CALABASH: The Calabash type.   INSTRUMENTATION: The Instrumentation type.   UIAUTOMATION: The uiautomation type.   UIAUTOMATOR: The uiautomator type.   XCTEST: The XCode test type.   XCTEST_UI: The XCode UI test type.  
      */
    var testType: js.UndefOr[TestType] = js.undefined
  }
  
  trait GetDevicePoolCompatibilityResult extends js.Object {
    /**
      * Information about compatible devices.
      */
    var compatibleDevices: js.UndefOr[DevicePoolCompatibilityResults] = js.undefined
    /**
      * Information about incompatible devices.
      */
    var incompatibleDevices: js.UndefOr[DevicePoolCompatibilityResults] = js.undefined
  }
  
  trait GetDevicePoolRequest extends js.Object {
    /**
      * The device pool's ARN.
      */
    var arn: AmazonResourceName
  }
  
  trait GetDevicePoolResult extends js.Object {
    /**
      * An object containing information about the requested device pool.
      */
    var devicePool: js.UndefOr[DevicePool] = js.undefined
  }
  
  trait GetDeviceRequest extends js.Object {
    /**
      * The device type's ARN.
      */
    var arn: AmazonResourceName
  }
  
  trait GetDeviceResult extends js.Object {
    /**
      * An object containing information about the requested device.
      */
    var device: js.UndefOr[Device] = js.undefined
  }
  
  trait GetInstanceProfileRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of your instance profile.
      */
    var arn: AmazonResourceName
  }
  
  trait GetInstanceProfileResult extends js.Object {
    /**
      * An object containing information about your instance profile.
      */
    var instanceProfile: js.UndefOr[InstanceProfile] = js.undefined
  }
  
  trait GetJobRequest extends js.Object {
    /**
      * The job's ARN.
      */
    var arn: AmazonResourceName
  }
  
  trait GetJobResult extends js.Object {
    /**
      * An object containing information about the requested job.
      */
    var job: js.UndefOr[Job] = js.undefined
  }
  
  trait GetNetworkProfileRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the network profile you want to return information about.
      */
    var arn: AmazonResourceName
  }
  
  trait GetNetworkProfileResult extends js.Object {
    /**
      * The network profile.
      */
    var networkProfile: js.UndefOr[NetworkProfile] = js.undefined
  }
  
  trait GetOfferingStatusRequest extends js.Object {
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait GetOfferingStatusResult extends js.Object {
    /**
      * When specified, gets the offering status for the current period.
      */
    var current: js.UndefOr[OfferingStatusMap] = js.undefined
    /**
      * When specified, gets the offering status for the next period.
      */
    var nextPeriod: js.UndefOr[OfferingStatusMap] = js.undefined
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait GetProjectRequest extends js.Object {
    /**
      * The project's ARN.
      */
    var arn: AmazonResourceName
  }
  
  trait GetProjectResult extends js.Object {
    /**
      * The project you wish to get information about.
      */
    var project: js.UndefOr[Project] = js.undefined
  }
  
  trait GetRemoteAccessSessionRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the remote access session about which you want to get session information.
      */
    var arn: AmazonResourceName
  }
  
  trait GetRemoteAccessSessionResult extends js.Object {
    /**
      * A container that lists detailed information about the remote access session.
      */
    var remoteAccessSession: js.UndefOr[RemoteAccessSession] = js.undefined
  }
  
  trait GetRunRequest extends js.Object {
    /**
      * The run's ARN.
      */
    var arn: AmazonResourceName
  }
  
  trait GetRunResult extends js.Object {
    /**
      * The run you wish to get results from.
      */
    var run: js.UndefOr[Run] = js.undefined
  }
  
  trait GetSuiteRequest extends js.Object {
    /**
      * The suite's ARN.
      */
    var arn: AmazonResourceName
  }
  
  trait GetSuiteResult extends js.Object {
    /**
      * A collection of one or more tests.
      */
    var suite: js.UndefOr[Suite] = js.undefined
  }
  
  trait GetTestRequest extends js.Object {
    /**
      * The test's ARN.
      */
    var arn: AmazonResourceName
  }
  
  trait GetTestResult extends js.Object {
    /**
      * A test condition that is evaluated.
      */
    var test: js.UndefOr[Test] = js.undefined
  }
  
  trait GetUploadRequest extends js.Object {
    /**
      * The upload's ARN.
      */
    var arn: AmazonResourceName
  }
  
  trait GetUploadResult extends js.Object {
    /**
      * An app or a set of one or more tests to upload or that have been uploaded.
      */
    var upload: js.UndefOr[Upload] = js.undefined
  }
  
  trait GetVPCEConfigurationRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to describe.
      */
    var arn: AmazonResourceName
  }
  
  trait GetVPCEConfigurationResult extends js.Object {
    /**
      * An object containing information about your VPC endpoint configuration.
      */
    var vpceConfiguration: js.UndefOr[VPCEConfiguration] = js.undefined
  }
  
  trait IncompatibilityMessage extends js.Object {
    /**
      * A message about the incompatibility.
      */
    var message: js.UndefOr[Message] = js.undefined
    /**
      * The type of incompatibility. Allowed values include:   ARN: The ARN.   FORM_FACTOR: The form factor (for example, phone or tablet).   MANUFACTURER: The manufacturer.   PLATFORM: The platform (for example, Android or iOS).   REMOTE_ACCESS_ENABLED: Whether the device is enabled for remote access.   APPIUM_VERSION: The Appium version for the test.  
      */
    var `type`: js.UndefOr[DeviceAttribute] = js.undefined
  }
  
  trait InstallToRemoteAccessSessionRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the app about which you are requesting information.
      */
    var appArn: AmazonResourceName
    /**
      * The Amazon Resource Name (ARN) of the remote access session about which you are requesting information.
      */
    var remoteAccessSessionArn: AmazonResourceName
  }
  
  trait InstallToRemoteAccessSessionResult extends js.Object {
    /**
      * An app to upload or that has been uploaded.
      */
    var appUpload: js.UndefOr[Upload] = js.undefined
  }
  
  trait InstanceProfile extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the instance profile.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The description of the instance profile.
      */
    var description: js.UndefOr[Message] = js.undefined
    /**
      * An array of strings specifying the list of app packages that should not be cleaned up from the device after a test run is over. The list of packages is only considered if you set packageCleanup to true.
      */
    var excludeAppPackagesFromCleanup: js.UndefOr[PackageIds] = js.undefined
    /**
      * The name of the instance profile.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * When set to true, Device Farm will remove app packages after a test run. The default value is false for private devices.
      */
    var packageCleanup: js.UndefOr[Boolean] = js.undefined
    /**
      * When set to true, Device Farm will reboot the instance after a test run. The default value is true.
      */
    var rebootAfterUse: js.UndefOr[Boolean] = js.undefined
  }
  
  trait Job extends js.Object {
    /**
      * The job's ARN.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The job's result counters.
      */
    var counters: js.UndefOr[Counters] = js.undefined
    /**
      * When the job was created.
      */
    var created: js.UndefOr[DateTime] = js.undefined
    /**
      * The device (phone or tablet).
      */
    var device: js.UndefOr[Device] = js.undefined
    /**
      * Represents the total (metered or unmetered) minutes used by the job.
      */
    var deviceMinutes: js.UndefOr[DeviceMinutes] = js.undefined
    /**
      * The Amazon Resource Name (ARN) of the instance.
      */
    var instanceArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * A message about the job's result.
      */
    var message: js.UndefOr[Message] = js.undefined
    /**
      * The job's name.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * The job's result. Allowed values include:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
      */
    var result: js.UndefOr[ExecutionResult] = js.undefined
    /**
      * The job's start time.
      */
    var started: js.UndefOr[DateTime] = js.undefined
    /**
      * The job's status. Allowed values include:   PENDING: A pending status.   PENDING_CONCURRENCY: A pending concurrency status.   PENDING_DEVICE: A pending device status.   PROCESSING: A processing status.   SCHEDULING: A scheduling status.   PREPARING: A preparing status.   RUNNING: A running status.   COMPLETED: A completed status.   STOPPING: A stopping status.  
      */
    var status: js.UndefOr[ExecutionStatus] = js.undefined
    /**
      * The job's stop time.
      */
    var stopped: js.UndefOr[DateTime] = js.undefined
    /**
      * The job's type. Allowed values include the following:   BUILTIN_FUZZ: The built-in fuzz type.   BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.   APPIUM_JAVA_JUNIT: The Appium Java JUnit type.   APPIUM_JAVA_TESTNG: The Appium Java TestNG type.   APPIUM_PYTHON: The Appium Python type.   APPIUM_NODE: The Appium Node.js type.   APPIUM_RUBY: The Appium Ruby type.   APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for web apps.   APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for web apps.   APPIUM_WEB_PYTHON: The Appium Python type for web apps.   APPIUM_WEB_NODE: The Appium Node.js type for web apps.   APPIUM_WEB_RUBY: The Appium Ruby test type for web apps.   CALABASH: The Calabash type.   INSTRUMENTATION: The Instrumentation type.   UIAUTOMATION: The uiautomation type.   UIAUTOMATOR: The uiautomator type.   XCTEST: The XCode test type.   XCTEST_UI: The XCode UI test type.  
      */
    var `type`: js.UndefOr[TestType] = js.undefined
    /**
      * This value is set to true if video capture is enabled; otherwise, it is set to false.
      */
    var videoCapture: js.UndefOr[VideoCapture] = js.undefined
    /**
      * The endpoint for streaming device video.
      */
    var videoEndpoint: js.UndefOr[String] = js.undefined
  }
  
  trait ListArtifactsRequest extends js.Object {
    /**
      * The Run, Job, Suite, or Test ARN.
      */
    var arn: AmazonResourceName
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * The artifacts' type. Allowed values include:   FILE: The artifacts are files.   LOG: The artifacts are logs.   SCREENSHOT: The artifacts are screenshots.  
      */
    var `type`: ArtifactCategory
  }
  
  trait ListArtifactsResult extends js.Object {
    /**
      * Information about the artifacts.
      */
    var artifacts: js.UndefOr[Artifacts] = js.undefined
    /**
      * If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListDeviceInstancesRequest extends js.Object {
    /**
      * An integer specifying the maximum number of items you want to return in the API response.
      */
    var maxResults: js.UndefOr[Integer] = js.undefined
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListDeviceInstancesResult extends js.Object {
    /**
      * An object containing information about your device instances.
      */
    var deviceInstances: js.UndefOr[DeviceInstances] = js.undefined
    /**
      * An identifier that can be used in the next call to this operation to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListDevicePoolsRequest extends js.Object {
    /**
      * The project ARN.
      */
    var arn: AmazonResourceName
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * The device pools' type. Allowed values include:   CURATED: A device pool that is created and managed by AWS Device Farm.   PRIVATE: A device pool that is created and managed by the device pool developer.  
      */
    var `type`: js.UndefOr[DevicePoolType] = js.undefined
  }
  
  trait ListDevicePoolsResult extends js.Object {
    /**
      * Information about the device pools.
      */
    var devicePools: js.UndefOr[DevicePools] = js.undefined
    /**
      * If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListDevicesRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the project.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * Used to select a set of devices. A filter is made up of an attribute, an operator, and one or more values.   Attribute: The aspect of a device such as platform or model used as the selction criteria in a device filter. Allowed values include:   ARN: The Amazon Resource Name (ARN) of the device. For example, "arn:aws:devicefarm:us-west-2::device:12345Example".   PLATFORM: The device platform. Valid values are "ANDROID" or "IOS".   OS_VERSION: The operating system version. For example, "10.3.2".   MODEL: The device model. For example, "iPad 5th Gen".   AVAILABILITY: The current availability of the device. Valid values are "AVAILABLE", "HIGHLY_AVAILABLE", "BUSY", or "TEMPORARY_NOT_AVAILABLE".   FORM_FACTOR: The device form factor. Valid values are "PHONE" or "TABLET".   MANUFACTURER: The device manufacturer. For example, "Apple".   REMOTE_ACCESS_ENABLED: Whether the device is enabled for remote access. Valid values are "TRUE" or "FALSE".   REMOTE_DEBUG_ENABLED: Whether the device is enabled for remote debugging. Valid values are "TRUE" or "FALSE".   INSTANCE_ARN: The Amazon Resource Name (ARN) of the device instance.   INSTANCE_LABELS: The label of the device instance.   FLEET_TYPE: The fleet type. Valid values are "PUBLIC" or "PRIVATE".     Operator: The filter operator.   The EQUALS operator is available for every attribute except INSTANCE_LABELS.   The CONTAINS operator is available for the INSTANCE_LABELS and MODEL attributes.   The IN and NOT_IN operators are available for the ARN, OS_VERSION, MODEL, MANUFACTURER, and INSTANCE_ARN attributes.   The LESS_THAN, GREATER_THAN, LESS_THAN_OR_EQUALS, and GREATER_THAN_OR_EQUALS operators are also available for the OS_VERSION attribute.     Values: An array of one or more filter values.   The IN and NOT_IN operators take a values array that has one or more elements.   The other operators require an array with a single element.   In a request, the AVAILABILITY attribute takes "AVAILABLE", "HIGHLY_AVAILABLE", "BUSY", or "TEMPORARY_NOT_AVAILABLE" as values.    
      */
    var filters: js.UndefOr[DeviceFilters] = js.undefined
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListDevicesResult extends js.Object {
    /**
      * Information about the devices.
      */
    var devices: js.UndefOr[Devices] = js.undefined
    /**
      * If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListInstanceProfilesRequest extends js.Object {
    /**
      * An integer specifying the maximum number of items you want to return in the API response.
      */
    var maxResults: js.UndefOr[Integer] = js.undefined
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListInstanceProfilesResult extends js.Object {
    /**
      * An object containing information about your instance profiles.
      */
    var instanceProfiles: js.UndefOr[InstanceProfiles] = js.undefined
    /**
      * An identifier that can be used in the next call to this operation to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListJobsRequest extends js.Object {
    /**
      * The run's Amazon Resource Name (ARN).
      */
    var arn: AmazonResourceName
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListJobsResult extends js.Object {
    /**
      * Information about the jobs.
      */
    var jobs: js.UndefOr[Jobs] = js.undefined
    /**
      * If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListNetworkProfilesRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the project for which you want to list network profiles.
      */
    var arn: AmazonResourceName
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * The type of network profile you wish to return information about. Valid values are listed below.
      */
    var `type`: js.UndefOr[NetworkProfileType] = js.undefined
  }
  
  trait ListNetworkProfilesResult extends js.Object {
    /**
      * A list of the available network profiles.
      */
    var networkProfiles: js.UndefOr[NetworkProfiles] = js.undefined
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListOfferingPromotionsRequest extends js.Object {
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListOfferingPromotionsResult extends js.Object {
    /**
      * An identifier to be used in the next call to this operation, to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * Information about the offering promotions.
      */
    var offeringPromotions: js.UndefOr[OfferingPromotions] = js.undefined
  }
  
  trait ListOfferingTransactionsRequest extends js.Object {
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListOfferingTransactionsResult extends js.Object {
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * The audit log of subscriptions you have purchased and modified through AWS Device Farm.
      */
    var offeringTransactions: js.UndefOr[OfferingTransactions] = js.undefined
  }
  
  trait ListOfferingsRequest extends js.Object {
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListOfferingsResult extends js.Object {
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * A value representing the list offering results.
      */
    var offerings: js.UndefOr[Offerings] = js.undefined
  }
  
  trait ListProjectsRequest extends js.Object {
    /**
      * Optional. If no Amazon Resource Name (ARN) is specified, then AWS Device Farm returns a list of all projects for the AWS account. You can also specify a project ARN.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListProjectsResult extends js.Object {
    /**
      * If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * Information about the projects.
      */
    var projects: js.UndefOr[Projects] = js.undefined
  }
  
  trait ListRemoteAccessSessionsRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the remote access session about which you are requesting information.
      */
    var arn: AmazonResourceName
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListRemoteAccessSessionsResult extends js.Object {
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * A container representing the metadata from the service about each remote access session you are requesting.
      */
    var remoteAccessSessions: js.UndefOr[RemoteAccessSessions] = js.undefined
  }
  
  trait ListRunsRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the project for which you want to list runs.
      */
    var arn: AmazonResourceName
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListRunsResult extends js.Object {
    /**
      * If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * Information about the runs.
      */
    var runs: js.UndefOr[Runs] = js.undefined
  }
  
  trait ListSamplesRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the job used to list samples.
      */
    var arn: AmazonResourceName
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListSamplesResult extends js.Object {
    /**
      * If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * Information about the samples.
      */
    var samples: js.UndefOr[Samples] = js.undefined
  }
  
  trait ListSuitesRequest extends js.Object {
    /**
      * The job's Amazon Resource Name (ARN).
      */
    var arn: AmazonResourceName
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListSuitesResult extends js.Object {
    /**
      * If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * Information about the suites.
      */
    var suites: js.UndefOr[Suites] = js.undefined
  }
  
  trait ListTestsRequest extends js.Object {
    /**
      * The test suite's Amazon Resource Name (ARN).
      */
    var arn: AmazonResourceName
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListTestsResult extends js.Object {
    /**
      * If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * Information about the tests.
      */
    var tests: js.UndefOr[Tests] = js.undefined
  }
  
  trait ListUniqueProblemsRequest extends js.Object {
    /**
      * The unique problems' ARNs.
      */
    var arn: AmazonResourceName
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListUniqueProblemsResult extends js.Object {
    /**
      * If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * Information about the unique problems. Allowed values include:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
      */
    var uniqueProblems: js.UndefOr[UniqueProblemsByExecutionResultMap] = js.undefined
  }
  
  trait ListUploadsRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the project for which you want to list uploads.
      */
    var arn: AmazonResourceName
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * The type of upload. Must be one of the following values:   ANDROID_APP: An Android upload.   IOS_APP: An iOS upload.   WEB_APP: A web appliction upload.   EXTERNAL_DATA: An external data upload.   APPIUM_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload.   APPIUM_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload.   APPIUM_PYTHON_TEST_PACKAGE: An Appium Python test package upload.   APPIUM_NODE_TEST_PACKAGE: An Appium Node.js test package upload.   APPIUM_RUBY_TEST_PACKAGE: An Appium Ruby test package upload.   APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload for a web app.   APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload for a web app.   APPIUM_WEB_PYTHON_TEST_PACKAGE: An Appium Python test package upload for a web app.   APPIUM_WEB_NODE_TEST_PACKAGE: An Appium Node.js test package upload for a web app.   APPIUM_WEB_RUBY_TEST_PACKAGE: An Appium Ruby test package upload for a web app.   CALABASH_TEST_PACKAGE: A Calabash test package upload.   INSTRUMENTATION_TEST_PACKAGE: An instrumentation upload.   UIAUTOMATION_TEST_PACKAGE: A uiautomation test package upload.   UIAUTOMATOR_TEST_PACKAGE: A uiautomator test package upload.   XCTEST_TEST_PACKAGE: An XCode test package upload.   XCTEST_UI_TEST_PACKAGE: An XCode UI test package upload.   APPIUM_JAVA_JUNIT_TEST_SPEC: An Appium Java JUnit test spec upload.   APPIUM_JAVA_TESTNG_TEST_SPEC: An Appium Java TestNG test spec upload.   APPIUM_PYTHON_TEST_SPEC: An Appium Python test spec upload.   APPIUM_NODE_TEST_SPEC: An Appium Node.js test spec upload.    APPIUM_RUBY_TEST_SPEC: An Appium Ruby test spec upload.   APPIUM_WEB_JAVA_JUNIT_TEST_SPEC: An Appium Java JUnit test spec upload for a web app.   APPIUM_WEB_JAVA_TESTNG_TEST_SPEC: An Appium Java TestNG test spec upload for a web app.   APPIUM_WEB_PYTHON_TEST_SPEC: An Appium Python test spec upload for a web app.   APPIUM_WEB_NODE_TEST_SPEC: An Appium Node.js test spec upload for a web app.   APPIUM_WEB_RUBY_TEST_SPEC: An Appium Ruby test spec upload for a web app.   INSTRUMENTATION_TEST_SPEC: An instrumentation test spec upload.   XCTEST_UI_TEST_SPEC: An XCode UI test spec upload.  
      */
    var `type`: js.UndefOr[UploadType] = js.undefined
  }
  
  trait ListUploadsResult extends js.Object {
    /**
      * If the number of items that are returned is significantly large, this is an identifier that is also returned, which can be used in a subsequent call to this operation to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * Information about the uploads.
      */
    var uploads: js.UndefOr[Uploads] = js.undefined
  }
  
  trait ListVPCEConfigurationsRequest extends js.Object {
    /**
      * An integer specifying the maximum number of items you want to return in the API response.
      */
    var maxResults: js.UndefOr[Integer] = js.undefined
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
  }
  
  trait ListVPCEConfigurationsResult extends js.Object {
    /**
      * An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
      */
    var nextToken: js.UndefOr[PaginationToken] = js.undefined
    /**
      * An array of VPCEConfiguration objects containing information about your VPC endpoint configuration.
      */
    var vpceConfigurations: js.UndefOr[VPCEConfigurations] = js.undefined
  }
  
  trait Location extends js.Object {
    /**
      * The latitude.
      */
    var latitude: Double
    /**
      * The longitude.
      */
    var longitude: Double
  }
  
  trait MaxSlotMap
    extends /* key */ org.scalablytyped.runtime.StringDictionary[Integer]
  
  trait MonetaryAmount extends js.Object {
    /**
      * The numerical amount of an offering or transaction.
      */
    var amount: js.UndefOr[Double] = js.undefined
    /**
      * The currency code of a monetary amount. For example, USD means "U.S. dollars."
      */
    var currencyCode: js.UndefOr[CurrencyCode] = js.undefined
  }
  
  trait NetworkProfile extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the network profile.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The description of the network profile.
      */
    var description: js.UndefOr[Message] = js.undefined
    /**
      * The data throughput rate in bits per second, as an integer from 0 to 104857600.
      */
    var downlinkBandwidthBits: js.UndefOr[Long] = js.undefined
    /**
      * Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
      */
    var downlinkDelayMs: js.UndefOr[Long] = js.undefined
    /**
      * Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
      */
    var downlinkJitterMs: js.UndefOr[Long] = js.undefined
    /**
      * Proportion of received packets that fail to arrive from 0 to 100 percent.
      */
    var downlinkLossPercent: js.UndefOr[PercentInteger] = js.undefined
    /**
      * The name of the network profile.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * The type of network profile. Valid values are listed below.
      */
    var `type`: js.UndefOr[NetworkProfileType] = js.undefined
    /**
      * The data throughput rate in bits per second, as an integer from 0 to 104857600.
      */
    var uplinkBandwidthBits: js.UndefOr[Long] = js.undefined
    /**
      * Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
      */
    var uplinkDelayMs: js.UndefOr[Long] = js.undefined
    /**
      * Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
      */
    var uplinkJitterMs: js.UndefOr[Long] = js.undefined
    /**
      * Proportion of transmitted packets that fail to arrive from 0 to 100 percent.
      */
    var uplinkLossPercent: js.UndefOr[PercentInteger] = js.undefined
  }
  
  trait Offering extends js.Object {
    /**
      * A string describing the offering.
      */
    var description: js.UndefOr[Message] = js.undefined
    /**
      * The ID that corresponds to a device offering.
      */
    var id: js.UndefOr[OfferingIdentifier] = js.undefined
    /**
      * The platform of the device (e.g., ANDROID or IOS).
      */
    var platform: js.UndefOr[DevicePlatform] = js.undefined
    /**
      * Specifies whether there are recurring charges for the offering.
      */
    var recurringCharges: js.UndefOr[RecurringCharges] = js.undefined
    /**
      * The type of offering (e.g., "RECURRING") for a device.
      */
    var `type`: js.UndefOr[OfferingType] = js.undefined
  }
  
  trait OfferingPromotion extends js.Object {
    /**
      * A string describing the offering promotion.
      */
    var description: js.UndefOr[Message] = js.undefined
    /**
      * The ID of the offering promotion.
      */
    var id: js.UndefOr[OfferingPromotionIdentifier] = js.undefined
  }
  
  trait OfferingStatus extends js.Object {
    /**
      * The date on which the offering is effective.
      */
    var effectiveOn: js.UndefOr[DateTime] = js.undefined
    /**
      * Represents the metadata of an offering status.
      */
    var offering: js.UndefOr[Offering] = js.undefined
    /**
      * The number of available devices in the offering.
      */
    var quantity: js.UndefOr[Integer] = js.undefined
    /**
      * The type specified for the offering status.
      */
    var `type`: js.UndefOr[OfferingTransactionType] = js.undefined
  }
  
  trait OfferingStatusMap
    extends /* key */ org.scalablytyped.runtime.StringDictionary[OfferingStatus]
  
  trait OfferingTransaction extends js.Object {
    /**
      * The cost of an offering transaction.
      */
    var cost: js.UndefOr[MonetaryAmount] = js.undefined
    /**
      * The date on which an offering transaction was created.
      */
    var createdOn: js.UndefOr[DateTime] = js.undefined
    /**
      * The ID that corresponds to a device offering promotion.
      */
    var offeringPromotionId: js.UndefOr[OfferingPromotionIdentifier] = js.undefined
    /**
      * The status of an offering transaction.
      */
    var offeringStatus: js.UndefOr[OfferingStatus] = js.undefined
    /**
      * The transaction ID of the offering transaction.
      */
    var transactionId: js.UndefOr[TransactionIdentifier] = js.undefined
  }
  
  trait Problem extends js.Object {
    /**
      * Information about the associated device.
      */
    var device: js.UndefOr[Device] = js.undefined
    /**
      * Information about the associated job.
      */
    var job: js.UndefOr[ProblemDetail] = js.undefined
    /**
      * A message about the problem's result.
      */
    var message: js.UndefOr[Message] = js.undefined
    /**
      * The problem's result. Allowed values include:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
      */
    var result: js.UndefOr[ExecutionResult] = js.undefined
    /**
      * Information about the associated run.
      */
    var run: js.UndefOr[ProblemDetail] = js.undefined
    /**
      * Information about the associated suite.
      */
    var suite: js.UndefOr[ProblemDetail] = js.undefined
    /**
      * Information about the associated test.
      */
    var test: js.UndefOr[ProblemDetail] = js.undefined
  }
  
  trait ProblemDetail extends js.Object {
    /**
      * The problem detail's ARN.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The problem detail's name.
      */
    var name: js.UndefOr[Name] = js.undefined
  }
  
  trait Project extends js.Object {
    /**
      * The project's ARN.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * When the project was created.
      */
    var created: js.UndefOr[DateTime] = js.undefined
    /**
      * The default number of minutes (at the project level) a test run will execute before it times out. Default value is 60 minutes.
      */
    var defaultJobTimeoutMinutes: js.UndefOr[JobTimeoutMinutes] = js.undefined
    /**
      * The project's name.
      */
    var name: js.UndefOr[Name] = js.undefined
  }
  
  trait PurchaseOfferingRequest extends js.Object {
    /**
      * The ID of the offering.
      */
    var offeringId: js.UndefOr[OfferingIdentifier] = js.undefined
    /**
      * The ID of the offering promotion to be applied to the purchase.
      */
    var offeringPromotionId: js.UndefOr[OfferingPromotionIdentifier] = js.undefined
    /**
      * The number of device slots you wish to purchase in an offering request.
      */
    var quantity: js.UndefOr[Integer] = js.undefined
  }
  
  trait PurchaseOfferingResult extends js.Object {
    /**
      * Represents the offering transaction for the purchase result.
      */
    var offeringTransaction: js.UndefOr[OfferingTransaction] = js.undefined
  }
  
  trait PurchasedDevicesMap
    extends /* key */ org.scalablytyped.runtime.StringDictionary[Integer]
  
  trait Radios extends js.Object {
    /**
      * True if Bluetooth is enabled at the beginning of the test; otherwise, false.
      */
    var bluetooth: js.UndefOr[Boolean] = js.undefined
    /**
      * True if GPS is enabled at the beginning of the test; otherwise, false.
      */
    var gps: js.UndefOr[Boolean] = js.undefined
    /**
      * True if NFC is enabled at the beginning of the test; otherwise, false.
      */
    var nfc: js.UndefOr[Boolean] = js.undefined
    /**
      * True if Wi-Fi is enabled at the beginning of the test; otherwise, false.
      */
    var wifi: js.UndefOr[Boolean] = js.undefined
  }
  
  trait RecurringCharge extends js.Object {
    /**
      * The cost of the recurring charge.
      */
    var cost: js.UndefOr[MonetaryAmount] = js.undefined
    /**
      * The frequency in which charges will recur.
      */
    var frequency: js.UndefOr[RecurringChargeFrequency] = js.undefined
  }
  
  trait RemoteAccessSession extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the remote access session.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The billing method of the remote access session. Possible values include METERED or UNMETERED. For more information about metered devices, see AWS Device Farm terminology."
      */
    var billingMethod: js.UndefOr[BillingMethod] = js.undefined
    /**
      * Unique identifier of your client for the remote access session. Only returned if remote debugging is enabled for the remote access session.
      */
    var clientId: js.UndefOr[ClientId] = js.undefined
    /**
      * The date and time the remote access session was created.
      */
    var created: js.UndefOr[DateTime] = js.undefined
    /**
      * The device (phone or tablet) used in the remote access session.
      */
    var device: js.UndefOr[Device] = js.undefined
    /**
      * The number of minutes a device is used in a remote access sesssion (including setup and teardown minutes).
      */
    var deviceMinutes: js.UndefOr[DeviceMinutes] = js.undefined
    /**
      * Unique device identifier for the remote device. Only returned if remote debugging is enabled for the remote access session.
      */
    var deviceUdid: js.UndefOr[String] = js.undefined
    /**
      * The endpoint for the remote access sesssion.
      */
    var endpoint: js.UndefOr[String] = js.undefined
    /**
      * IP address of the EC2 host where you need to connect to remotely debug devices. Only returned if remote debugging is enabled for the remote access session.
      */
    var hostAddress: js.UndefOr[HostAddress] = js.undefined
    /**
      * The Amazon Resource Name (ARN) of the instance.
      */
    var instanceArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The interaction mode of the remote access session. Valid values are:   INTERACTIVE: You can interact with the iOS device by viewing, touching, and rotating the screen. You cannot run XCUITest framework-based tests in this mode.   NO_VIDEO: You are connected to the device but cannot interact with it or view the screen. This mode has the fastest test execution speed. You can run XCUITest framework-based tests in this mode.   VIDEO_ONLY: You can view the screen but cannot touch or rotate it. You can run XCUITest framework-based tests and watch the screen in this mode.  
      */
    var interactionMode: js.UndefOr[InteractionMode] = js.undefined
    /**
      * A message about the remote access session.
      */
    var message: js.UndefOr[Message] = js.undefined
    /**
      * The name of the remote access session.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * This flag is set to true if remote debugging is enabled for the remote access session.
      */
    var remoteDebugEnabled: js.UndefOr[Boolean] = js.undefined
    /**
      * The Amazon Resource Name (ARN) for the app to be recorded in the remote access session.
      */
    var remoteRecordAppArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * This flag is set to true if remote recording is enabled for the remote access session.
      */
    var remoteRecordEnabled: js.UndefOr[Boolean] = js.undefined
    /**
      * The result of the remote access session. Can be any of the following:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
      */
    var result: js.UndefOr[ExecutionResult] = js.undefined
    /**
      * When set to true, for private devices, Device Farm will not sign your app again. For public devices, Device Farm always signs your apps again and this parameter has no effect. For more information about how Device Farm re-signs your app(s), see Do you modify my app? in the AWS Device Farm FAQs.
      */
    var skipAppResign: js.UndefOr[SkipAppResign] = js.undefined
    /**
      * The date and time the remote access session was started.
      */
    var started: js.UndefOr[DateTime] = js.undefined
    /**
      * The status of the remote access session. Can be any of the following:   PENDING: A pending status.   PENDING_CONCURRENCY: A pending concurrency status.   PENDING_DEVICE: A pending device status.   PROCESSING: A processing status.   SCHEDULING: A scheduling status.   PREPARING: A preparing status.   RUNNING: A running status.   COMPLETED: A completed status.   STOPPING: A stopping status.  
      */
    var status: js.UndefOr[ExecutionStatus] = js.undefined
    /**
      * The date and time the remote access session was stopped.
      */
    var stopped: js.UndefOr[DateTime] = js.undefined
  }
  
  trait RenewOfferingRequest extends js.Object {
    /**
      * The ID of a request to renew an offering.
      */
    var offeringId: js.UndefOr[OfferingIdentifier] = js.undefined
    /**
      * The quantity requested in an offering renewal.
      */
    var quantity: js.UndefOr[Integer] = js.undefined
  }
  
  trait RenewOfferingResult extends js.Object {
    /**
      * Represents the status of the offering transaction for the renewal.
      */
    var offeringTransaction: js.UndefOr[OfferingTransaction] = js.undefined
  }
  
  trait Resolution extends js.Object {
    /**
      * The screen resolution's height, expressed in pixels.
      */
    var height: js.UndefOr[Integer] = js.undefined
    /**
      * The screen resolution's width, expressed in pixels.
      */
    var width: js.UndefOr[Integer] = js.undefined
  }
  
  trait Rule extends js.Object {
    /**
      * The rule's stringified attribute. For example, specify the value as "\"abc\"". The supported operators for each attribute are provided in the following list.  APPIUM_VERSION  The Appium version for the test.  Supported operators: CONTAINS   ARN  The Amazon Resource Name (ARN) of the device. For example, "arn:aws:devicefarm:us-west-2::device:12345Example".  Supported operators: EQUALS, IN, NOT_IN   AVAILABILITY  The current availability of the device. Valid values are "AVAILABLE", "HIGHLY_AVAILABLE", "BUSY", or "TEMPORARY_NOT_AVAILABLE".  Supported operators: EQUALS   FLEET_TYPE  The fleet type. Valid values are "PUBLIC" or "PRIVATE".  Supported operators: EQUALS   FORM_FACTOR  The device form factor. Valid values are "PHONE" or "TABLET".  Supported operators: EQUALS, IN, NOT_IN   INSTANCE_ARN  The Amazon Resource Name (ARN) of the device instance.  Supported operators: IN, NOT_IN   INSTANCE_LABELS  The label of the device instance.  Supported operators: CONTAINS   MANUFACTURER  The device manufacturer. For example, "Apple".  Supported operators: EQUALS, IN, NOT_IN   MODEL  The device model, such as "Apple iPad Air 2" or "Google Pixel".  Supported operators: CONTAINS, EQUALS, IN, NOT_IN   OS_VERSION  The operating system version. For example, "10.3.2".  Supported operators: EQUALS, GREATER_THAN, GREATER_THAN_OR_EQUALS, IN, LESS_THAN, LESS_THAN_OR_EQUALS, NOT_IN   PLATFORM  The device platform. Valid values are "ANDROID" or "IOS".  Supported operators: EQUALS, IN, NOT_IN   REMOTE_ACCESS_ENABLED  Whether the device is enabled for remote access. Valid values are "TRUE" or "FALSE".  Supported operators: EQUALS   REMOTE_DEBUG_ENABLED  Whether the device is enabled for remote debugging. Valid values are "TRUE" or "FALSE".  Supported operators: EQUALS   
      */
    var attribute: js.UndefOr[DeviceAttribute] = js.undefined
    /**
      * Specifies how Device Farm compares the rule's attribute to the value. For the operators that are supported by each attribute, see the attribute descriptions.
      */
    var operator: js.UndefOr[RuleOperator] = js.undefined
    /**
      * The rule's value.
      */
    var value: js.UndefOr[String] = js.undefined
  }
  
  trait Run extends js.Object {
    /**
      * An app to upload or that has been uploaded.
      */
    var appUpload: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The run's ARN.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * Specifies the billing method for a test run: metered or unmetered. If the parameter is not specified, the default value is metered.
      */
    var billingMethod: js.UndefOr[BillingMethod] = js.undefined
    /**
      * The total number of completed jobs.
      */
    var completedJobs: js.UndefOr[Integer] = js.undefined
    /**
      * The run's result counters.
      */
    var counters: js.UndefOr[Counters] = js.undefined
    /**
      * When the run was created.
      */
    var created: js.UndefOr[DateTime] = js.undefined
    /**
      * Output CustomerArtifactPaths object for the test run.
      */
    var customerArtifactPaths: js.UndefOr[CustomerArtifactPaths] = js.undefined
    /**
      * Represents the total (metered or unmetered) minutes used by the test run.
      */
    var deviceMinutes: js.UndefOr[DeviceMinutes] = js.undefined
    /**
      * The ARN of the device pool for the run.
      */
    var devicePoolArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The results of a device filter used to select the devices for a test run.
      */
    var deviceSelectionResult: js.UndefOr[DeviceSelectionResult] = js.undefined
    /**
      * For fuzz tests, this is the number of events, between 1 and 10000, that the UI fuzz test should perform.
      */
    var eventCount: js.UndefOr[Integer] = js.undefined
    /**
      * The number of minutes the job will execute before it times out.
      */
    var jobTimeoutMinutes: js.UndefOr[JobTimeoutMinutes] = js.undefined
    /**
      * Information about the locale that is used for the run.
      */
    var locale: js.UndefOr[String] = js.undefined
    /**
      * Information about the location that is used for the run.
      */
    var location: js.UndefOr[Location] = js.undefined
    /**
      * A message about the run's result.
      */
    var message: js.UndefOr[Message] = js.undefined
    /**
      * The run's name.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * The network profile being used for a test run.
      */
    var networkProfile: js.UndefOr[NetworkProfile] = js.undefined
    /**
      * Read-only URL for an object in S3 bucket where you can get the parsing results of the test package. If the test package doesn't parse, the reason why it doesn't parse appears in the file that this URL points to.
      */
    var parsingResultUrl: js.UndefOr[String] = js.undefined
    /**
      * The run's platform. Allowed values include:   ANDROID: The Android platform.   IOS: The iOS platform.  
      */
    var platform: js.UndefOr[DevicePlatform] = js.undefined
    /**
      * Information about the radio states for the run.
      */
    var radios: js.UndefOr[Radios] = js.undefined
    /**
      * The run's result. Allowed values include:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
      */
    var result: js.UndefOr[ExecutionResult] = js.undefined
    /**
      * Supporting field for the result field. Set only if result is SKIPPED. PARSING_FAILED if the result is skipped because of test package parsing failure.
      */
    var resultCode: js.UndefOr[ExecutionResultCode] = js.undefined
    /**
      * For fuzz tests, this is a seed to use for randomizing the UI fuzz test. Using the same seed value between tests ensures identical event sequences.
      */
    var seed: js.UndefOr[Integer] = js.undefined
    /**
      * When set to true, for private devices, Device Farm will not sign your app again. For public devices, Device Farm always signs your apps again and this parameter has no effect. For more information about how Device Farm re-signs your app(s), see Do you modify my app? in the AWS Device Farm FAQs.
      */
    var skipAppResign: js.UndefOr[SkipAppResign] = js.undefined
    /**
      * The run's start time.
      */
    var started: js.UndefOr[DateTime] = js.undefined
    /**
      * The run's status. Allowed values include:   PENDING: A pending status.   PENDING_CONCURRENCY: A pending concurrency status.   PENDING_DEVICE: A pending device status.   PROCESSING: A processing status.   SCHEDULING: A scheduling status.   PREPARING: A preparing status.   RUNNING: A running status.   COMPLETED: A completed status.   STOPPING: A stopping status.  
      */
    var status: js.UndefOr[ExecutionStatus] = js.undefined
    /**
      * The run's stop time.
      */
    var stopped: js.UndefOr[DateTime] = js.undefined
    /**
      * The ARN of the YAML-formatted test specification for the run.
      */
    var testSpecArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The total number of jobs for the run.
      */
    var totalJobs: js.UndefOr[Integer] = js.undefined
    /**
      * The run's type. Must be one of the following values:   BUILTIN_FUZZ: The built-in fuzz type.   BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.   APPIUM_JAVA_JUNIT: The Appium Java JUnit type.   APPIUM_JAVA_TESTNG: The Appium Java TestNG type.   APPIUM_PYTHON: The Appium Python type.   APPIUM_NODE: The Appium Node.js type.   APPIUM_RUBY: The Appium Ruby type.   APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for web apps.   APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for web apps.   APPIUM_WEB_PYTHON: The Appium Python type for web apps.   APPIUM_WEB_NODE: The Appium Node.js type for web apps.   APPIUM_WEB_RUBY: The Appium Ruby type for web apps.   CALABASH: The Calabash type.   INSTRUMENTATION: The Instrumentation type.   UIAUTOMATION: The uiautomation type.   UIAUTOMATOR: The uiautomator type.   XCTEST: The XCode test type.   XCTEST_UI: The XCode UI test type.  
      */
    var `type`: js.UndefOr[TestType] = js.undefined
    /**
      * The Device Farm console URL for the recording of the run.
      */
    var webUrl: js.UndefOr[String] = js.undefined
  }
  
  trait Sample extends js.Object {
    /**
      * The sample's ARN.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The sample's type. Must be one of the following values:   CPU: A CPU sample type. This is expressed as the app processing CPU time (including child processes) as reported by process, as a percentage.   MEMORY: A memory usage sample type. This is expressed as the total proportional set size of an app process, in kilobytes.   NATIVE_AVG_DRAWTIME   NATIVE_FPS   NATIVE_FRAMES   NATIVE_MAX_DRAWTIME   NATIVE_MIN_DRAWTIME   OPENGL_AVG_DRAWTIME   OPENGL_FPS   OPENGL_FRAMES   OPENGL_MAX_DRAWTIME   OPENGL_MIN_DRAWTIME   RX   RX_RATE: The total number of bytes per second (TCP and UDP) that are sent, by app process.   THREADS: A threads sample type. This is expressed as the total number of threads per app process.   TX   TX_RATE: The total number of bytes per second (TCP and UDP) that are received, by app process.  
      */
    var `type`: js.UndefOr[SampleType] = js.undefined
    /**
      * The pre-signed Amazon S3 URL that can be used with a corresponding GET request to download the sample's file.
      */
    var url: js.UndefOr[URL] = js.undefined
  }
  
  trait ScheduleRunConfiguration extends js.Object {
    /**
      * A list of auxiliary apps for the run.
      */
    var auxiliaryApps: js.UndefOr[AmazonResourceNames] = js.undefined
    /**
      * Specifies the billing method for a test run: metered or unmetered. If the parameter is not specified, the default value is metered.
      */
    var billingMethod: js.UndefOr[BillingMethod] = js.undefined
    /**
      * Input CustomerArtifactPaths object for the scheduled run configuration.
      */
    var customerArtifactPaths: js.UndefOr[CustomerArtifactPaths] = js.undefined
    /**
      * The ARN of the extra data for the run. The extra data is a .zip file that AWS Device Farm will extract to external data for Android or the app's sandbox for iOS.
      */
    var extraDataPackageArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * Information about the locale that is used for the run.
      */
    var locale: js.UndefOr[String] = js.undefined
    /**
      * Information about the location that is used for the run.
      */
    var location: js.UndefOr[Location] = js.undefined
    /**
      * Reserved for internal use.
      */
    var networkProfileArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * Information about the radio states for the run.
      */
    var radios: js.UndefOr[Radios] = js.undefined
    /**
      * An array of Amazon Resource Names (ARNs) for your VPC endpoint configurations.
      */
    var vpceConfigurationArns: js.UndefOr[AmazonResourceNames] = js.undefined
  }
  
  trait ScheduleRunRequest extends js.Object {
    /**
      * The ARN of the app to schedule a run.
      */
    var appArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * Information about the settings for the run to be scheduled.
      */
    var configuration: js.UndefOr[ScheduleRunConfiguration] = js.undefined
    /**
      * The ARN of the device pool for the run to be scheduled.
      */
    var devicePoolArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The filter criteria used to dynamically select a set of devices for a test run, as well as the maximum number of devices to be included in the run. Either  devicePoolArn  or  deviceSelectionConfiguration  is required in a request.
      */
    var deviceSelectionConfiguration: js.UndefOr[DeviceSelectionConfiguration] = js.undefined
    /**
      * Specifies configuration information about a test run, such as the execution timeout (in minutes).
      */
    var executionConfiguration: js.UndefOr[ExecutionConfiguration] = js.undefined
    /**
      * The name for the run to be scheduled.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * The ARN of the project for the run to be scheduled.
      */
    var projectArn: AmazonResourceName
    /**
      * Information about the test for the run to be scheduled.
      */
    var test: ScheduleRunTest
  }
  
  trait ScheduleRunResult extends js.Object {
    /**
      * Information about the scheduled run.
      */
    var run: js.UndefOr[Run] = js.undefined
  }
  
  trait ScheduleRunTest extends js.Object {
    /**
      * The test's filter.
      */
    var filter: js.UndefOr[Filter] = js.undefined
    /**
      * The test's parameters, such as test framework parameters and fixture settings. Parameters are represented by name-value pairs of strings. For all tests:   app_performance_monitoring: Performance monitoring is enabled by default. Set this parameter to "false" to disable it.   For Calabash tests:   profile: A cucumber profile, for example, "my_profile_name".   tags: You can limit execution to features or scenarios that have (or don't have) certain tags, for example, "@smoke" or "@smoke,~@wip".   For Appium tests (all types):   appium_version: The Appium version. Currently supported values are "1.6.5" (and higher), "latest", and "default".   “latest” will run the latest Appium version supported by Device Farm (1.9.1).   For “default”, Device Farm will choose a compatible version of Appium for the device. The current behavior is to run 1.7.2 on Android devices and iOS 9 and earlier, 1.7.2 for iOS 10 and later.   This behavior is subject to change.     For Fuzz tests (Android only):   event_count: The number of events, between 1 and 10000, that the UI fuzz test should perform.   throttle: The time, in ms, between 0 and 1000, that the UI fuzz test should wait between events.   seed: A seed to use for randomizing the UI fuzz test. Using the same seed value between tests ensures identical event sequences.   For Explorer tests:   username: A username to use if the Explorer encounters a login form. If not supplied, no username will be inserted.   password: A password to use if the Explorer encounters a login form. If not supplied, no password will be inserted.   For Instrumentation:   filter: A test filter string. Examples:   Running a single test case: "com.android.abc.Test1"   Running a single test: "com.android.abc.Test1#smoke"   Running multiple tests: "com.android.abc.Test1,com.android.abc.Test2"     For XCTest and XCTestUI:   filter: A test filter string. Examples:   Running a single test class: "LoginTests"   Running a multiple test classes: "LoginTests,SmokeTests"   Running a single test: "LoginTests/testValid"   Running multiple tests: "LoginTests/testValid,LoginTests/testInvalid"     For UIAutomator:   filter: A test filter string. Examples:   Running a single test case: "com.android.abc.Test1"   Running a single test: "com.android.abc.Test1#smoke"   Running multiple tests: "com.android.abc.Test1,com.android.abc.Test2"    
      */
    var parameters: js.UndefOr[TestParameters] = js.undefined
    /**
      * The ARN of the uploaded test that will be run.
      */
    var testPackageArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The ARN of the YAML-formatted test specification.
      */
    var testSpecArn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The test's type. Must be one of the following values:   BUILTIN_FUZZ: The built-in fuzz type.   BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.   APPIUM_JAVA_JUNIT: The Appium Java JUnit type.   APPIUM_JAVA_TESTNG: The Appium Java TestNG type.   APPIUM_PYTHON: The Appium Python type.   APPIUM_NODE: The Appium Node.js type.   APPIUM_RUBY: The Appium Ruby type.   APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for web apps.   APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for web apps.   APPIUM_WEB_PYTHON: The Appium Python type for web apps.   APPIUM_WEB_NODE: The Appium Node.js type for web apps.   APPIUM_WEB_RUBY: The Appium Ruby type for web apps.   CALABASH: The Calabash type.   INSTRUMENTATION: The Instrumentation type.   UIAUTOMATION: The uiautomation type.   UIAUTOMATOR: The uiautomator type.   XCTEST: The XCode test type.   XCTEST_UI: The XCode UI test type.  
      */
    var `type`: TestType
  }
  
  trait StopJobRequest extends js.Object {
    /**
      * Represents the Amazon Resource Name (ARN) of the Device Farm job you wish to stop.
      */
    var arn: AmazonResourceName
  }
  
  trait StopJobResult extends js.Object {
    /**
      * The job that was stopped.
      */
    var job: js.UndefOr[Job] = js.undefined
  }
  
  trait StopRemoteAccessSessionRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the remote access session you wish to stop.
      */
    var arn: AmazonResourceName
  }
  
  trait StopRemoteAccessSessionResult extends js.Object {
    /**
      * A container representing the metadata from the service about the remote access session you are stopping.
      */
    var remoteAccessSession: js.UndefOr[RemoteAccessSession] = js.undefined
  }
  
  trait StopRunRequest extends js.Object {
    /**
      * Represents the Amazon Resource Name (ARN) of the Device Farm run you wish to stop.
      */
    var arn: AmazonResourceName
  }
  
  trait StopRunResult extends js.Object {
    /**
      * The run that was stopped.
      */
    var run: js.UndefOr[Run] = js.undefined
  }
  
  trait Suite extends js.Object {
    /**
      * The suite's ARN.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The suite's result counters.
      */
    var counters: js.UndefOr[Counters] = js.undefined
    /**
      * When the suite was created.
      */
    var created: js.UndefOr[DateTime] = js.undefined
    /**
      * Represents the total (metered or unmetered) minutes used by the test suite.
      */
    var deviceMinutes: js.UndefOr[DeviceMinutes] = js.undefined
    /**
      * A message about the suite's result.
      */
    var message: js.UndefOr[Message] = js.undefined
    /**
      * The suite's name.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * The suite's result. Allowed values include:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
      */
    var result: js.UndefOr[ExecutionResult] = js.undefined
    /**
      * The suite's start time.
      */
    var started: js.UndefOr[DateTime] = js.undefined
    /**
      * The suite's status. Allowed values include:   PENDING: A pending status.   PENDING_CONCURRENCY: A pending concurrency status.   PENDING_DEVICE: A pending device status.   PROCESSING: A processing status.   SCHEDULING: A scheduling status.   PREPARING: A preparing status.   RUNNING: A running status.   COMPLETED: A completed status.   STOPPING: A stopping status.  
      */
    var status: js.UndefOr[ExecutionStatus] = js.undefined
    /**
      * The suite's stop time.
      */
    var stopped: js.UndefOr[DateTime] = js.undefined
    /**
      * The suite's type. Must be one of the following values:   BUILTIN_FUZZ: The built-in fuzz type.   BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.   APPIUM_JAVA_JUNIT: The Appium Java JUnit type.   APPIUM_JAVA_TESTNG: The Appium Java TestNG type.   APPIUM_PYTHON: The Appium Python type.   APPIUM_NODE: The Appium Node.js type.   APPIUM_RUBY: The Appium Ruby type.   APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for web apps.   APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for web apps.   APPIUM_WEB_PYTHON: The Appium Python type for web apps.   APPIUM_WEB_NODE: The Appium Node.js type for web apps.   APPIUM_WEB_RUBY: The Appium Ruby type for web apps.   CALABASH: The Calabash type.   INSTRUMENTATION: The Instrumentation type.   UIAUTOMATION: The uiautomation type.   UIAUTOMATOR: The uiautomator type.   XCTEST: The XCode test type.   XCTEST_UI: The XCode UI test type.  
      */
    var `type`: js.UndefOr[TestType] = js.undefined
  }
  
  trait Test extends js.Object {
    /**
      * The test's ARN.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The test's result counters.
      */
    var counters: js.UndefOr[Counters] = js.undefined
    /**
      * When the test was created.
      */
    var created: js.UndefOr[DateTime] = js.undefined
    /**
      * Represents the total (metered or unmetered) minutes used by the test.
      */
    var deviceMinutes: js.UndefOr[DeviceMinutes] = js.undefined
    /**
      * A message about the test's result.
      */
    var message: js.UndefOr[Message] = js.undefined
    /**
      * The test's name.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * The test's result. Allowed values include:   PENDING: A pending condition.   PASSED: A passing condition.   WARNED: A warning condition.   FAILED: A failed condition.   SKIPPED: A skipped condition.   ERRORED: An error condition.   STOPPED: A stopped condition.  
      */
    var result: js.UndefOr[ExecutionResult] = js.undefined
    /**
      * The test's start time.
      */
    var started: js.UndefOr[DateTime] = js.undefined
    /**
      * The test's status. Allowed values include:   PENDING: A pending status.   PENDING_CONCURRENCY: A pending concurrency status.   PENDING_DEVICE: A pending device status.   PROCESSING: A processing status.   SCHEDULING: A scheduling status.   PREPARING: A preparing status.   RUNNING: A running status.   COMPLETED: A completed status.   STOPPING: A stopping status.  
      */
    var status: js.UndefOr[ExecutionStatus] = js.undefined
    /**
      * The test's stop time.
      */
    var stopped: js.UndefOr[DateTime] = js.undefined
    /**
      * The test's type. Must be one of the following values:   BUILTIN_FUZZ: The built-in fuzz type.   BUILTIN_EXPLORER: For Android, an app explorer that will traverse an Android app, interacting with it and capturing screenshots at the same time.   APPIUM_JAVA_JUNIT: The Appium Java JUnit type.   APPIUM_JAVA_TESTNG: The Appium Java TestNG type.   APPIUM_PYTHON: The Appium Python type.   APPIUM_NODE: The Appium Node.js type.   APPIUM_RUBY: The Appium Ruby type.   APPIUM_WEB_JAVA_JUNIT: The Appium Java JUnit type for web apps.   APPIUM_WEB_JAVA_TESTNG: The Appium Java TestNG type for web apps.   APPIUM_WEB_PYTHON: The Appium Python type for web apps.   APPIUM_WEB_NODE: The Appium Node.js type for web apps.   APPIUM_WEB_RUBY: The Appium Ruby type for web apps.   CALABASH: The Calabash type.   INSTRUMENTATION: The Instrumentation type.   UIAUTOMATION: The uiautomation type.   UIAUTOMATOR: The uiautomator type.   XCTEST: The XCode test type.   XCTEST_UI: The XCode UI test type.  
      */
    var `type`: js.UndefOr[TestType] = js.undefined
  }
  
  trait TestParameters
    extends /* key */ org.scalablytyped.runtime.StringDictionary[String]
  
  trait TrialMinutes extends js.Object {
    /**
      * The number of free trial minutes remaining in the account.
      */
    var remaining: js.UndefOr[Double] = js.undefined
    /**
      * The total number of free trial minutes that the account started with.
      */
    var total: js.UndefOr[Double] = js.undefined
  }
  
  @js.native
  trait Types
    extends awsDashSdkLib.libServiceMod.Service {
    @JSName("config")
    var config_Types: awsDashSdkLib.libConfigMod.ConfigBase with ClientConfiguration = js.native
    /**
      * Creates a device pool.
      */
    def createDevicePool(): awsDashSdkLib.libRequestMod.Request[CreateDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createDevicePool(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateDevicePoolResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a device pool.
      */
    def createDevicePool(params: CreateDevicePoolRequest): awsDashSdkLib.libRequestMod.Request[CreateDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createDevicePool(
      params: CreateDevicePoolRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateDevicePoolResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a profile that can be applied to one or more private fleet device instances.
      */
    def createInstanceProfile(): awsDashSdkLib.libRequestMod.Request[CreateInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createInstanceProfile(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateInstanceProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a profile that can be applied to one or more private fleet device instances.
      */
    def createInstanceProfile(params: CreateInstanceProfileRequest): awsDashSdkLib.libRequestMod.Request[CreateInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createInstanceProfile(
      params: CreateInstanceProfileRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateInstanceProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a network profile.
      */
    def createNetworkProfile(): awsDashSdkLib.libRequestMod.Request[CreateNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createNetworkProfile(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateNetworkProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a network profile.
      */
    def createNetworkProfile(params: CreateNetworkProfileRequest): awsDashSdkLib.libRequestMod.Request[CreateNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createNetworkProfile(
      params: CreateNetworkProfileRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateNetworkProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a new project.
      */
    def createProject(): awsDashSdkLib.libRequestMod.Request[CreateProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createProject(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateProjectResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a new project.
      */
    def createProject(params: CreateProjectRequest): awsDashSdkLib.libRequestMod.Request[CreateProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createProject(
      params: CreateProjectRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateProjectResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Specifies and starts a remote access session.
      */
    def createRemoteAccessSession(): awsDashSdkLib.libRequestMod.Request[CreateRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createRemoteAccessSession(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateRemoteAccessSessionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Specifies and starts a remote access session.
      */
    def createRemoteAccessSession(params: CreateRemoteAccessSessionRequest): awsDashSdkLib.libRequestMod.Request[CreateRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createRemoteAccessSession(
      params: CreateRemoteAccessSessionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateRemoteAccessSessionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Uploads an app or test scripts.
      */
    def createUpload(): awsDashSdkLib.libRequestMod.Request[CreateUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createUpload(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateUploadResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Uploads an app or test scripts.
      */
    def createUpload(params: CreateUploadRequest): awsDashSdkLib.libRequestMod.Request[CreateUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createUpload(
      params: CreateUploadRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateUploadResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud (VPC) endpoint.
      */
    def createVPCEConfiguration(): awsDashSdkLib.libRequestMod.Request[CreateVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVPCEConfiguration(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVPCEConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud (VPC) endpoint.
      */
    def createVPCEConfiguration(params: CreateVPCEConfigurationRequest): awsDashSdkLib.libRequestMod.Request[CreateVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def createVPCEConfiguration(
      params: CreateVPCEConfigurationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ CreateVPCEConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[CreateVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a device pool given the pool ARN. Does not allow deletion of curated pools owned by the system.
      */
    def deleteDevicePool(): awsDashSdkLib.libRequestMod.Request[DeleteDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteDevicePool(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteDevicePoolResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a device pool given the pool ARN. Does not allow deletion of curated pools owned by the system.
      */
    def deleteDevicePool(params: DeleteDevicePoolRequest): awsDashSdkLib.libRequestMod.Request[DeleteDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteDevicePool(
      params: DeleteDevicePoolRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteDevicePoolResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a profile that can be applied to one or more private device instances.
      */
    def deleteInstanceProfile(): awsDashSdkLib.libRequestMod.Request[DeleteInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteInstanceProfile(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteInstanceProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a profile that can be applied to one or more private device instances.
      */
    def deleteInstanceProfile(params: DeleteInstanceProfileRequest): awsDashSdkLib.libRequestMod.Request[DeleteInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteInstanceProfile(
      params: DeleteInstanceProfileRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteInstanceProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a network profile.
      */
    def deleteNetworkProfile(): awsDashSdkLib.libRequestMod.Request[DeleteNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteNetworkProfile(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteNetworkProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a network profile.
      */
    def deleteNetworkProfile(params: DeleteNetworkProfileRequest): awsDashSdkLib.libRequestMod.Request[DeleteNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteNetworkProfile(
      params: DeleteNetworkProfileRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteNetworkProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes an AWS Device Farm project, given the project ARN.  Note Deleting this resource does not stop an in-progress run.
      */
    def deleteProject(): awsDashSdkLib.libRequestMod.Request[DeleteProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteProject(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteProjectResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes an AWS Device Farm project, given the project ARN.  Note Deleting this resource does not stop an in-progress run.
      */
    def deleteProject(params: DeleteProjectRequest): awsDashSdkLib.libRequestMod.Request[DeleteProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteProject(
      params: DeleteProjectRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteProjectResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a completed remote access session and its results.
      */
    def deleteRemoteAccessSession(): awsDashSdkLib.libRequestMod.Request[DeleteRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteRemoteAccessSession(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteRemoteAccessSessionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a completed remote access session and its results.
      */
    def deleteRemoteAccessSession(params: DeleteRemoteAccessSessionRequest): awsDashSdkLib.libRequestMod.Request[DeleteRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteRemoteAccessSession(
      params: DeleteRemoteAccessSessionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteRemoteAccessSessionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the run, given the run ARN.  Note Deleting this resource does not stop an in-progress run.
      */
    def deleteRun(): awsDashSdkLib.libRequestMod.Request[DeleteRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteRun(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ DeleteRunResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[DeleteRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes the run, given the run ARN.  Note Deleting this resource does not stop an in-progress run.
      */
    def deleteRun(params: DeleteRunRequest): awsDashSdkLib.libRequestMod.Request[DeleteRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteRun(
      params: DeleteRunRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ DeleteRunResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[DeleteRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes an upload given the upload ARN.
      */
    def deleteUpload(): awsDashSdkLib.libRequestMod.Request[DeleteUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteUpload(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteUploadResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes an upload given the upload ARN.
      */
    def deleteUpload(params: DeleteUploadRequest): awsDashSdkLib.libRequestMod.Request[DeleteUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteUpload(
      params: DeleteUploadRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteUploadResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a configuration for your Amazon Virtual Private Cloud (VPC) endpoint.
      */
    def deleteVPCEConfiguration(): awsDashSdkLib.libRequestMod.Request[DeleteVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVPCEConfiguration(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteVPCEConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Deletes a configuration for your Amazon Virtual Private Cloud (VPC) endpoint.
      */
    def deleteVPCEConfiguration(params: DeleteVPCEConfigurationRequest): awsDashSdkLib.libRequestMod.Request[DeleteVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def deleteVPCEConfiguration(
      params: DeleteVPCEConfigurationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ DeleteVPCEConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[DeleteVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns the number of unmetered iOS and/or unmetered Android devices that have been purchased by the account.
      */
    def getAccountSettings(): awsDashSdkLib.libRequestMod.Request[GetAccountSettingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getAccountSettings(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetAccountSettingsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetAccountSettingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns the number of unmetered iOS and/or unmetered Android devices that have been purchased by the account.
      */
    def getAccountSettings(params: GetAccountSettingsRequest): awsDashSdkLib.libRequestMod.Request[GetAccountSettingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getAccountSettings(
      params: GetAccountSettingsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetAccountSettingsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetAccountSettingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a unique device type.
      */
    def getDevice(): awsDashSdkLib.libRequestMod.Request[GetDeviceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getDevice(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ GetDeviceResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[GetDeviceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a unique device type.
      */
    def getDevice(params: GetDeviceRequest): awsDashSdkLib.libRequestMod.Request[GetDeviceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getDevice(
      params: GetDeviceRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ GetDeviceResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[GetDeviceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about a device instance belonging to a private device fleet.
      */
    def getDeviceInstance(): awsDashSdkLib.libRequestMod.Request[GetDeviceInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getDeviceInstance(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetDeviceInstanceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetDeviceInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about a device instance belonging to a private device fleet.
      */
    def getDeviceInstance(params: GetDeviceInstanceRequest): awsDashSdkLib.libRequestMod.Request[GetDeviceInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getDeviceInstance(
      params: GetDeviceInstanceRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetDeviceInstanceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetDeviceInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a device pool.
      */
    def getDevicePool(): awsDashSdkLib.libRequestMod.Request[GetDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getDevicePool(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetDevicePoolResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a device pool.
      */
    def getDevicePool(params: GetDevicePoolRequest): awsDashSdkLib.libRequestMod.Request[GetDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getDevicePool(
      params: GetDevicePoolRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetDevicePoolResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about compatibility with a device pool.
      */
    def getDevicePoolCompatibility(): awsDashSdkLib.libRequestMod.Request[GetDevicePoolCompatibilityResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getDevicePoolCompatibility(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetDevicePoolCompatibilityResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetDevicePoolCompatibilityResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about compatibility with a device pool.
      */
    def getDevicePoolCompatibility(params: GetDevicePoolCompatibilityRequest): awsDashSdkLib.libRequestMod.Request[GetDevicePoolCompatibilityResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getDevicePoolCompatibility(
      params: GetDevicePoolCompatibilityRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetDevicePoolCompatibilityResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetDevicePoolCompatibilityResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about the specified instance profile.
      */
    def getInstanceProfile(): awsDashSdkLib.libRequestMod.Request[GetInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getInstanceProfile(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetInstanceProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about the specified instance profile.
      */
    def getInstanceProfile(params: GetInstanceProfileRequest): awsDashSdkLib.libRequestMod.Request[GetInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getInstanceProfile(
      params: GetInstanceProfileRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetInstanceProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a job.
      */
    def getJob(): awsDashSdkLib.libRequestMod.Request[GetJobResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getJob(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ GetJobResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[GetJobResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a job.
      */
    def getJob(params: GetJobRequest): awsDashSdkLib.libRequestMod.Request[GetJobResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getJob(
      params: GetJobRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ GetJobResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[GetJobResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about a network profile.
      */
    def getNetworkProfile(): awsDashSdkLib.libRequestMod.Request[GetNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getNetworkProfile(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetNetworkProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about a network profile.
      */
    def getNetworkProfile(params: GetNetworkProfileRequest): awsDashSdkLib.libRequestMod.Request[GetNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getNetworkProfile(
      params: GetNetworkProfileRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetNetworkProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets the current status and future status of all offerings purchased by an AWS account. The response indicates how many offerings are currently available and the offerings that will be available in the next period. The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
      */
    def getOfferingStatus(): awsDashSdkLib.libRequestMod.Request[GetOfferingStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getOfferingStatus(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetOfferingStatusResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetOfferingStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets the current status and future status of all offerings purchased by an AWS account. The response indicates how many offerings are currently available and the offerings that will be available in the next period. The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
      */
    def getOfferingStatus(params: GetOfferingStatusRequest): awsDashSdkLib.libRequestMod.Request[GetOfferingStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getOfferingStatus(
      params: GetOfferingStatusRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetOfferingStatusResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetOfferingStatusResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a project.
      */
    def getProject(): awsDashSdkLib.libRequestMod.Request[GetProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getProject(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetProjectResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a project.
      */
    def getProject(params: GetProjectRequest): awsDashSdkLib.libRequestMod.Request[GetProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getProject(
      params: GetProjectRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetProjectResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns a link to a currently running remote access session.
      */
    def getRemoteAccessSession(): awsDashSdkLib.libRequestMod.Request[GetRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getRemoteAccessSession(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetRemoteAccessSessionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns a link to a currently running remote access session.
      */
    def getRemoteAccessSession(params: GetRemoteAccessSessionRequest): awsDashSdkLib.libRequestMod.Request[GetRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getRemoteAccessSession(
      params: GetRemoteAccessSessionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetRemoteAccessSessionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a run.
      */
    def getRun(): awsDashSdkLib.libRequestMod.Request[GetRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getRun(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ GetRunResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[GetRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a run.
      */
    def getRun(params: GetRunRequest): awsDashSdkLib.libRequestMod.Request[GetRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getRun(
      params: GetRunRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ GetRunResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[GetRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a suite.
      */
    def getSuite(): awsDashSdkLib.libRequestMod.Request[GetSuiteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getSuite(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ GetSuiteResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[GetSuiteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a suite.
      */
    def getSuite(params: GetSuiteRequest): awsDashSdkLib.libRequestMod.Request[GetSuiteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getSuite(
      params: GetSuiteRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ GetSuiteResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[GetSuiteResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a test.
      */
    def getTest(): awsDashSdkLib.libRequestMod.Request[GetTestResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getTest(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ GetTestResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[GetTestResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about a test.
      */
    def getTest(params: GetTestRequest): awsDashSdkLib.libRequestMod.Request[GetTestResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getTest(
      params: GetTestRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ GetTestResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[GetTestResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about an upload.
      */
    def getUpload(): awsDashSdkLib.libRequestMod.Request[GetUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getUpload(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ GetUploadResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[GetUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about an upload.
      */
    def getUpload(params: GetUploadRequest): awsDashSdkLib.libRequestMod.Request[GetUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getUpload(
      params: GetUploadRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ GetUploadResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[GetUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about the configuration settings for your Amazon Virtual Private Cloud (VPC) endpoint.
      */
    def getVPCEConfiguration(): awsDashSdkLib.libRequestMod.Request[GetVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getVPCEConfiguration(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetVPCEConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about the configuration settings for your Amazon Virtual Private Cloud (VPC) endpoint.
      */
    def getVPCEConfiguration(params: GetVPCEConfigurationRequest): awsDashSdkLib.libRequestMod.Request[GetVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def getVPCEConfiguration(
      params: GetVPCEConfigurationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ GetVPCEConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[GetVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Installs an application to the device in a remote access session. For Android applications, the file must be in .apk format. For iOS applications, the file must be in .ipa format.
      */
    def installToRemoteAccessSession(): awsDashSdkLib.libRequestMod.Request[InstallToRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def installToRemoteAccessSession(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ InstallToRemoteAccessSessionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[InstallToRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Installs an application to the device in a remote access session. For Android applications, the file must be in .apk format. For iOS applications, the file must be in .ipa format.
      */
    def installToRemoteAccessSession(params: InstallToRemoteAccessSessionRequest): awsDashSdkLib.libRequestMod.Request[InstallToRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def installToRemoteAccessSession(
      params: InstallToRemoteAccessSessionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ InstallToRemoteAccessSessionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[InstallToRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about artifacts.
      */
    def listArtifacts(): awsDashSdkLib.libRequestMod.Request[ListArtifactsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listArtifacts(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListArtifactsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListArtifactsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about artifacts.
      */
    def listArtifacts(params: ListArtifactsRequest): awsDashSdkLib.libRequestMod.Request[ListArtifactsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listArtifacts(
      params: ListArtifactsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListArtifactsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListArtifactsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about the private device instances associated with one or more AWS accounts.
      */
    def listDeviceInstances(): awsDashSdkLib.libRequestMod.Request[ListDeviceInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listDeviceInstances(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListDeviceInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListDeviceInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about the private device instances associated with one or more AWS accounts.
      */
    def listDeviceInstances(params: ListDeviceInstancesRequest): awsDashSdkLib.libRequestMod.Request[ListDeviceInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listDeviceInstances(
      params: ListDeviceInstancesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListDeviceInstancesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListDeviceInstancesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about device pools.
      */
    def listDevicePools(): awsDashSdkLib.libRequestMod.Request[ListDevicePoolsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listDevicePools(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListDevicePoolsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListDevicePoolsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about device pools.
      */
    def listDevicePools(params: ListDevicePoolsRequest): awsDashSdkLib.libRequestMod.Request[ListDevicePoolsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listDevicePools(
      params: ListDevicePoolsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListDevicePoolsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListDevicePoolsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about unique device types.
      */
    def listDevices(): awsDashSdkLib.libRequestMod.Request[ListDevicesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listDevices(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListDevicesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListDevicesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about unique device types.
      */
    def listDevices(params: ListDevicesRequest): awsDashSdkLib.libRequestMod.Request[ListDevicesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listDevices(
      params: ListDevicesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListDevicesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListDevicesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about all the instance profiles in an AWS account.
      */
    def listInstanceProfiles(): awsDashSdkLib.libRequestMod.Request[ListInstanceProfilesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listInstanceProfiles(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListInstanceProfilesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListInstanceProfilesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about all the instance profiles in an AWS account.
      */
    def listInstanceProfiles(params: ListInstanceProfilesRequest): awsDashSdkLib.libRequestMod.Request[ListInstanceProfilesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listInstanceProfiles(
      params: ListInstanceProfilesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListInstanceProfilesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListInstanceProfilesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about jobs for a given test run.
      */
    def listJobs(): awsDashSdkLib.libRequestMod.Request[ListJobsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listJobs(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ ListJobsResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[ListJobsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about jobs for a given test run.
      */
    def listJobs(params: ListJobsRequest): awsDashSdkLib.libRequestMod.Request[ListJobsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listJobs(
      params: ListJobsRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ ListJobsResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[ListJobsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns the list of available network profiles.
      */
    def listNetworkProfiles(): awsDashSdkLib.libRequestMod.Request[ListNetworkProfilesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listNetworkProfiles(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListNetworkProfilesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListNetworkProfilesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns the list of available network profiles.
      */
    def listNetworkProfiles(params: ListNetworkProfilesRequest): awsDashSdkLib.libRequestMod.Request[ListNetworkProfilesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listNetworkProfiles(
      params: ListNetworkProfilesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListNetworkProfilesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListNetworkProfilesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns a list of offering promotions. Each offering promotion record contains the ID and description of the promotion. The API returns a NotEligible error if the caller is not permitted to invoke the operation. Contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
      */
    def listOfferingPromotions(): awsDashSdkLib.libRequestMod.Request[ListOfferingPromotionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listOfferingPromotions(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListOfferingPromotionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListOfferingPromotionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns a list of offering promotions. Each offering promotion record contains the ID and description of the promotion. The API returns a NotEligible error if the caller is not permitted to invoke the operation. Contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
      */
    def listOfferingPromotions(params: ListOfferingPromotionsRequest): awsDashSdkLib.libRequestMod.Request[ListOfferingPromotionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listOfferingPromotions(
      params: ListOfferingPromotionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListOfferingPromotionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListOfferingPromotionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS account. The list is paginated and ordered by a descending timestamp (most recent transactions are first). The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
      */
    def listOfferingTransactions(): awsDashSdkLib.libRequestMod.Request[ListOfferingTransactionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listOfferingTransactions(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListOfferingTransactionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListOfferingTransactionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS account. The list is paginated and ordered by a descending timestamp (most recent transactions are first). The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
      */
    def listOfferingTransactions(params: ListOfferingTransactionsRequest): awsDashSdkLib.libRequestMod.Request[ListOfferingTransactionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listOfferingTransactions(
      params: ListOfferingTransactionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListOfferingTransactionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListOfferingTransactionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns a list of products or offerings that the user can manage through the API. Each offering record indicates the recurring price per unit and the frequency for that offering. The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
      */
    def listOfferings(): awsDashSdkLib.libRequestMod.Request[ListOfferingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listOfferings(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListOfferingsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListOfferingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns a list of products or offerings that the user can manage through the API. Each offering record indicates the recurring price per unit and the frequency for that offering. The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
      */
    def listOfferings(params: ListOfferingsRequest): awsDashSdkLib.libRequestMod.Request[ListOfferingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listOfferings(
      params: ListOfferingsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListOfferingsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListOfferingsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about projects.
      */
    def listProjects(): awsDashSdkLib.libRequestMod.Request[ListProjectsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listProjects(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListProjectsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListProjectsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about projects.
      */
    def listProjects(params: ListProjectsRequest): awsDashSdkLib.libRequestMod.Request[ListProjectsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listProjects(
      params: ListProjectsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListProjectsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListProjectsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns a list of all currently running remote access sessions.
      */
    def listRemoteAccessSessions(): awsDashSdkLib.libRequestMod.Request[ListRemoteAccessSessionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listRemoteAccessSessions(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListRemoteAccessSessionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListRemoteAccessSessionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns a list of all currently running remote access sessions.
      */
    def listRemoteAccessSessions(params: ListRemoteAccessSessionsRequest): awsDashSdkLib.libRequestMod.Request[ListRemoteAccessSessionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listRemoteAccessSessions(
      params: ListRemoteAccessSessionsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListRemoteAccessSessionsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListRemoteAccessSessionsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about runs, given an AWS Device Farm project ARN.
      */
    def listRuns(): awsDashSdkLib.libRequestMod.Request[ListRunsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listRuns(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ ListRunsResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[ListRunsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about runs, given an AWS Device Farm project ARN.
      */
    def listRuns(params: ListRunsRequest): awsDashSdkLib.libRequestMod.Request[ListRunsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listRuns(
      params: ListRunsRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ ListRunsResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[ListRunsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about samples, given an AWS Device Farm job ARN.
      */
    def listSamples(): awsDashSdkLib.libRequestMod.Request[ListSamplesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listSamples(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListSamplesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListSamplesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about samples, given an AWS Device Farm job ARN.
      */
    def listSamples(params: ListSamplesRequest): awsDashSdkLib.libRequestMod.Request[ListSamplesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listSamples(
      params: ListSamplesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListSamplesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListSamplesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about test suites for a given job.
      */
    def listSuites(): awsDashSdkLib.libRequestMod.Request[ListSuitesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listSuites(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListSuitesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListSuitesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about test suites for a given job.
      */
    def listSuites(params: ListSuitesRequest): awsDashSdkLib.libRequestMod.Request[ListSuitesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listSuites(
      params: ListSuitesRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListSuitesResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListSuitesResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about tests in a given test suite.
      */
    def listTests(): awsDashSdkLib.libRequestMod.Request[ListTestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listTests(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ ListTestsResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[ListTestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about tests in a given test suite.
      */
    def listTests(params: ListTestsRequest): awsDashSdkLib.libRequestMod.Request[ListTestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listTests(
      params: ListTestsRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ ListTestsResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[ListTestsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about unique problems.
      */
    def listUniqueProblems(): awsDashSdkLib.libRequestMod.Request[ListUniqueProblemsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listUniqueProblems(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListUniqueProblemsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListUniqueProblemsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about unique problems.
      */
    def listUniqueProblems(params: ListUniqueProblemsRequest): awsDashSdkLib.libRequestMod.Request[ListUniqueProblemsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listUniqueProblems(
      params: ListUniqueProblemsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListUniqueProblemsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListUniqueProblemsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about uploads, given an AWS Device Farm project ARN.
      */
    def listUploads(): awsDashSdkLib.libRequestMod.Request[ListUploadsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listUploads(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListUploadsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListUploadsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Gets information about uploads, given an AWS Device Farm project ARN.
      */
    def listUploads(params: ListUploadsRequest): awsDashSdkLib.libRequestMod.Request[ListUploadsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listUploads(
      params: ListUploadsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListUploadsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListUploadsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about all Amazon Virtual Private Cloud (VPC) endpoint configurations in the AWS account.
      */
    def listVPCEConfigurations(): awsDashSdkLib.libRequestMod.Request[ListVPCEConfigurationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listVPCEConfigurations(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListVPCEConfigurationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListVPCEConfigurationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Returns information about all Amazon Virtual Private Cloud (VPC) endpoint configurations in the AWS account.
      */
    def listVPCEConfigurations(params: ListVPCEConfigurationsRequest): awsDashSdkLib.libRequestMod.Request[ListVPCEConfigurationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def listVPCEConfigurations(
      params: ListVPCEConfigurationsRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ListVPCEConfigurationsResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ListVPCEConfigurationsResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Immediately purchases offerings for an AWS account. Offerings renew with the latest total purchased quantity for an offering, unless the renewal was overridden. The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
      */
    def purchaseOffering(): awsDashSdkLib.libRequestMod.Request[PurchaseOfferingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def purchaseOffering(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ PurchaseOfferingResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[PurchaseOfferingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Immediately purchases offerings for an AWS account. Offerings renew with the latest total purchased quantity for an offering, unless the renewal was overridden. The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
      */
    def purchaseOffering(params: PurchaseOfferingRequest): awsDashSdkLib.libRequestMod.Request[PurchaseOfferingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def purchaseOffering(
      params: PurchaseOfferingRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ PurchaseOfferingResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[PurchaseOfferingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Explicitly sets the quantity of devices to renew for an offering, starting from the effectiveDate of the next period. The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
      */
    def renewOffering(): awsDashSdkLib.libRequestMod.Request[RenewOfferingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def renewOffering(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RenewOfferingResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RenewOfferingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Explicitly sets the quantity of devices to renew for an offering, starting from the effectiveDate of the next period. The API returns a NotEligible error if the user is not permitted to invoke the operation. Please contact aws-devicefarm-support@amazon.com if you believe that you should be able to invoke this operation.
      */
    def renewOffering(params: RenewOfferingRequest): awsDashSdkLib.libRequestMod.Request[RenewOfferingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def renewOffering(
      params: RenewOfferingRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ RenewOfferingResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[RenewOfferingResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Schedules a run.
      */
    def scheduleRun(): awsDashSdkLib.libRequestMod.Request[ScheduleRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def scheduleRun(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ScheduleRunResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ScheduleRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Schedules a run.
      */
    def scheduleRun(params: ScheduleRunRequest): awsDashSdkLib.libRequestMod.Request[ScheduleRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def scheduleRun(
      params: ScheduleRunRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ ScheduleRunResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[ScheduleRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Initiates a stop request for the current job. AWS Device Farm will immediately stop the job on the device where tests have not started executing, and you will not be billed for this device. On the device where tests have started executing, Setup Suite and Teardown Suite tests will run to completion before stopping execution on the device. You will be billed for Setup, Teardown, and any tests that were in progress or already completed.
      */
    def stopJob(): awsDashSdkLib.libRequestMod.Request[StopJobResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def stopJob(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ StopJobResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[StopJobResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Initiates a stop request for the current job. AWS Device Farm will immediately stop the job on the device where tests have not started executing, and you will not be billed for this device. On the device where tests have started executing, Setup Suite and Teardown Suite tests will run to completion before stopping execution on the device. You will be billed for Setup, Teardown, and any tests that were in progress or already completed.
      */
    def stopJob(params: StopJobRequest): awsDashSdkLib.libRequestMod.Request[StopJobResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def stopJob(
      params: StopJobRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ StopJobResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[StopJobResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Ends a specified remote access session.
      */
    def stopRemoteAccessSession(): awsDashSdkLib.libRequestMod.Request[StopRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def stopRemoteAccessSession(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ StopRemoteAccessSessionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[StopRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Ends a specified remote access session.
      */
    def stopRemoteAccessSession(params: StopRemoteAccessSessionRequest): awsDashSdkLib.libRequestMod.Request[StopRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def stopRemoteAccessSession(
      params: StopRemoteAccessSessionRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ StopRemoteAccessSessionResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[StopRemoteAccessSessionResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Initiates a stop request for the current test run. AWS Device Farm will immediately stop the run on devices where tests have not started executing, and you will not be billed for these devices. On devices where tests have started executing, Setup Suite and Teardown Suite tests will run to completion before stopping execution on those devices. You will be billed for Setup, Teardown, and any tests that were in progress or already completed.
      */
    def stopRun(): awsDashSdkLib.libRequestMod.Request[StopRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def stopRun(
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ StopRunResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[StopRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Initiates a stop request for the current test run. AWS Device Farm will immediately stop the run on devices where tests have not started executing, and you will not be billed for these devices. On devices where tests have started executing, Setup Suite and Teardown Suite tests will run to completion before stopping execution on those devices. You will be billed for Setup, Teardown, and any tests that were in progress or already completed.
      */
    def stopRun(params: StopRunRequest): awsDashSdkLib.libRequestMod.Request[StopRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def stopRun(
      params: StopRunRequest,
      callback: js.Function2[/* err */ awsDashSdkLib.libErrorMod.AWSError, /* data */ StopRunResult, scala.Unit]
    ): awsDashSdkLib.libRequestMod.Request[StopRunResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Updates information about an existing private device instance.
      */
    def updateDeviceInstance(): awsDashSdkLib.libRequestMod.Request[UpdateDeviceInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateDeviceInstance(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateDeviceInstanceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateDeviceInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Updates information about an existing private device instance.
      */
    def updateDeviceInstance(params: UpdateDeviceInstanceRequest): awsDashSdkLib.libRequestMod.Request[UpdateDeviceInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateDeviceInstance(
      params: UpdateDeviceInstanceRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateDeviceInstanceResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateDeviceInstanceResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the name, description, and rules in a device pool given the attributes and the pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a whole (or not at all).
      */
    def updateDevicePool(): awsDashSdkLib.libRequestMod.Request[UpdateDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateDevicePool(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateDevicePoolResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the name, description, and rules in a device pool given the attributes and the pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a whole (or not at all).
      */
    def updateDevicePool(params: UpdateDevicePoolRequest): awsDashSdkLib.libRequestMod.Request[UpdateDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateDevicePool(
      params: UpdateDevicePoolRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateDevicePoolResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateDevicePoolResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Updates information about an existing private device instance profile.
      */
    def updateInstanceProfile(): awsDashSdkLib.libRequestMod.Request[UpdateInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateInstanceProfile(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateInstanceProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Updates information about an existing private device instance profile.
      */
    def updateInstanceProfile(params: UpdateInstanceProfileRequest): awsDashSdkLib.libRequestMod.Request[UpdateInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateInstanceProfile(
      params: UpdateInstanceProfileRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateInstanceProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateInstanceProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Updates the network profile with specific settings.
      */
    def updateNetworkProfile(): awsDashSdkLib.libRequestMod.Request[UpdateNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateNetworkProfile(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateNetworkProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Updates the network profile with specific settings.
      */
    def updateNetworkProfile(params: UpdateNetworkProfileRequest): awsDashSdkLib.libRequestMod.Request[UpdateNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateNetworkProfile(
      params: UpdateNetworkProfileRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateNetworkProfileResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateNetworkProfileResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified project name, given the project ARN and a new name.
      */
    def updateProject(): awsDashSdkLib.libRequestMod.Request[UpdateProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateProject(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateProjectResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Modifies the specified project name, given the project ARN and a new name.
      */
    def updateProject(params: UpdateProjectRequest): awsDashSdkLib.libRequestMod.Request[UpdateProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateProject(
      params: UpdateProjectRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateProjectResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateProjectResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Update an uploaded test specification (test spec).
      */
    def updateUpload(): awsDashSdkLib.libRequestMod.Request[UpdateUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateUpload(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateUploadResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Update an uploaded test specification (test spec).
      */
    def updateUpload(params: UpdateUploadRequest): awsDashSdkLib.libRequestMod.Request[UpdateUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateUpload(
      params: UpdateUploadRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateUploadResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateUploadResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Updates information about an existing Amazon Virtual Private Cloud (VPC) endpoint configuration.
      */
    def updateVPCEConfiguration(): awsDashSdkLib.libRequestMod.Request[UpdateVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateVPCEConfiguration(
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateVPCEConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    /**
      * Updates information about an existing Amazon Virtual Private Cloud (VPC) endpoint configuration.
      */
    def updateVPCEConfiguration(params: UpdateVPCEConfigurationRequest): awsDashSdkLib.libRequestMod.Request[UpdateVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
    def updateVPCEConfiguration(
      params: UpdateVPCEConfigurationRequest,
      callback: js.Function2[
          /* err */ awsDashSdkLib.libErrorMod.AWSError, 
          /* data */ UpdateVPCEConfigurationResult, 
          scala.Unit
        ]
    ): awsDashSdkLib.libRequestMod.Request[UpdateVPCEConfigurationResult, awsDashSdkLib.libErrorMod.AWSError] = js.native
  }
  
  trait UniqueProblem extends js.Object {
    /**
      * A message about the unique problems' result.
      */
    var message: js.UndefOr[Message] = js.undefined
    /**
      * Information about the problems.
      */
    var problems: js.UndefOr[Problems] = js.undefined
  }
  
  trait UniqueProblemsByExecutionResultMap
    extends /* key */ org.scalablytyped.runtime.StringDictionary[UniqueProblems]
  
  trait UpdateDeviceInstanceRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the device instance.
      */
    var arn: AmazonResourceName
    /**
      * An array of strings that you want to associate with the device instance.
      */
    var labels: js.UndefOr[InstanceLabels] = js.undefined
    /**
      * The Amazon Resource Name (ARN) of the profile that you want to associate with the device instance.
      */
    var profileArn: js.UndefOr[AmazonResourceName] = js.undefined
  }
  
  trait UpdateDeviceInstanceResult extends js.Object {
    /**
      * An object containing information about your device instance.
      */
    var deviceInstance: js.UndefOr[DeviceInstance] = js.undefined
  }
  
  trait UpdateDevicePoolRequest extends js.Object {
    /**
      * The Amazon Resourc Name (ARN) of the Device Farm device pool you wish to update.
      */
    var arn: AmazonResourceName
    /**
      * Sets whether the maxDevices parameter applies to your device pool. If you set this parameter to true, the maxDevices parameter does not apply, and Device Farm does not limit the number of devices that it adds to your device pool. In this case, Device Farm adds all available devices that meet the criteria that are specified for the rules parameter. If you use this parameter in your request, you cannot use the maxDevices parameter in the same request.
      */
    var clearMaxDevices: js.UndefOr[Boolean] = js.undefined
    /**
      * A description of the device pool you wish to update.
      */
    var description: js.UndefOr[Message] = js.undefined
    /**
      * The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and that meet the criteria that you assign for the rules parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter. By specifying the maximum number of devices, you can control the costs that you incur by running tests. If you use this parameter in your request, you cannot use the clearMaxDevices parameter in the same request.
      */
    var maxDevices: js.UndefOr[Integer] = js.undefined
    /**
      * A string representing the name of the device pool you wish to update.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * Represents the rules you wish to modify for the device pool. Updating rules is optional; however, if you choose to update rules for your request, the update will replace the existing rules.
      */
    var rules: js.UndefOr[Rules] = js.undefined
  }
  
  trait UpdateDevicePoolResult extends js.Object {
    /**
      * The device pool you just updated.
      */
    var devicePool: js.UndefOr[DevicePool] = js.undefined
  }
  
  trait UpdateInstanceProfileRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the instance profile.
      */
    var arn: AmazonResourceName
    /**
      * The updated description for your instance profile.
      */
    var description: js.UndefOr[Message] = js.undefined
    /**
      * An array of strings specifying the list of app packages that should not be cleaned up from the device after a test run is over. The list of packages is only considered if you set packageCleanup to true.
      */
    var excludeAppPackagesFromCleanup: js.UndefOr[PackageIds] = js.undefined
    /**
      * The updated name for your instance profile.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * The updated choice for whether you want to specify package cleanup. The default value is false for private devices.
      */
    var packageCleanup: js.UndefOr[Boolean] = js.undefined
    /**
      * The updated choice for whether you want to reboot the device after use. The default value is true.
      */
    var rebootAfterUse: js.UndefOr[Boolean] = js.undefined
  }
  
  trait UpdateInstanceProfileResult extends js.Object {
    /**
      * An object containing information about your instance profile.
      */
    var instanceProfile: js.UndefOr[InstanceProfile] = js.undefined
  }
  
  trait UpdateNetworkProfileRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the project for which you want to update network profile settings.
      */
    var arn: AmazonResourceName
    /**
      * The descriptoin of the network profile about which you are returning information.
      */
    var description: js.UndefOr[Message] = js.undefined
    /**
      * The data throughput rate in bits per second, as an integer from 0 to 104857600.
      */
    var downlinkBandwidthBits: js.UndefOr[Long] = js.undefined
    /**
      * Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
      */
    var downlinkDelayMs: js.UndefOr[Long] = js.undefined
    /**
      * Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
      */
    var downlinkJitterMs: js.UndefOr[Long] = js.undefined
    /**
      * Proportion of received packets that fail to arrive from 0 to 100 percent.
      */
    var downlinkLossPercent: js.UndefOr[PercentInteger] = js.undefined
    /**
      * The name of the network profile about which you are returning information.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * The type of network profile you wish to return information about. Valid values are listed below.
      */
    var `type`: js.UndefOr[NetworkProfileType] = js.undefined
    /**
      * The data throughput rate in bits per second, as an integer from 0 to 104857600.
      */
    var uplinkBandwidthBits: js.UndefOr[Long] = js.undefined
    /**
      * Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
      */
    var uplinkDelayMs: js.UndefOr[Long] = js.undefined
    /**
      * Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
      */
    var uplinkJitterMs: js.UndefOr[Long] = js.undefined
    /**
      * Proportion of transmitted packets that fail to arrive from 0 to 100 percent.
      */
    var uplinkLossPercent: js.UndefOr[PercentInteger] = js.undefined
  }
  
  trait UpdateNetworkProfileResult extends js.Object {
    /**
      * A list of the available network profiles.
      */
    var networkProfile: js.UndefOr[NetworkProfile] = js.undefined
  }
  
  trait UpdateProjectRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the project whose name you wish to update.
      */
    var arn: AmazonResourceName
    /**
      * The number of minutes a test run in the project will execute before it times out.
      */
    var defaultJobTimeoutMinutes: js.UndefOr[JobTimeoutMinutes] = js.undefined
    /**
      * A string representing the new name of the project that you are updating.
      */
    var name: js.UndefOr[Name] = js.undefined
  }
  
  trait UpdateProjectResult extends js.Object {
    /**
      * The project you wish to update.
      */
    var project: js.UndefOr[Project] = js.undefined
  }
  
  trait UpdateUploadRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the uploaded test spec.
      */
    var arn: AmazonResourceName
    /**
      * The upload's content type (for example, "application/x-yaml").
      */
    var contentType: js.UndefOr[ContentType] = js.undefined
    /**
      * Set to true if the YAML file has changed and needs to be updated; otherwise, set to false.
      */
    var editContent: js.UndefOr[Boolean] = js.undefined
    /**
      * The upload's test spec file name. The name should not contain the '/' character. The test spec file name must end with the .yaml or .yml file extension.
      */
    var name: js.UndefOr[Name] = js.undefined
  }
  
  trait UpdateUploadResult extends js.Object {
    /**
      * A test spec uploaded to Device Farm.
      */
    var upload: js.UndefOr[Upload] = js.undefined
  }
  
  trait UpdateVPCEConfigurationRequest extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to update.
      */
    var arn: AmazonResourceName
    /**
      * The DNS (domain) name used to connect to your private service in your Amazon VPC. The DNS name must not already be in use on the Internet.
      */
    var serviceDnsName: js.UndefOr[ServiceDnsName] = js.undefined
    /**
      * An optional description, providing more details about your VPC endpoint configuration.
      */
    var vpceConfigurationDescription: js.UndefOr[VPCEConfigurationDescription] = js.undefined
    /**
      * The friendly name you give to your VPC endpoint configuration, to manage your configurations more easily.
      */
    var vpceConfigurationName: js.UndefOr[VPCEConfigurationName] = js.undefined
    /**
      * The name of the VPC endpoint service running inside your AWS account that you want Device Farm to test.
      */
    var vpceServiceName: js.UndefOr[VPCEServiceName] = js.undefined
  }
  
  trait UpdateVPCEConfigurationResult extends js.Object {
    /**
      * An object containing information about your VPC endpoint configuration.
      */
    var vpceConfiguration: js.UndefOr[VPCEConfiguration] = js.undefined
  }
  
  trait Upload extends js.Object {
    /**
      * The upload's ARN.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The upload's category. Allowed values include:   CURATED: An upload managed by AWS Device Farm.   PRIVATE: An upload managed by the AWS Device Farm customer.  
      */
    var category: js.UndefOr[UploadCategory] = js.undefined
    /**
      * The upload's content type (for example, "application/octet-stream").
      */
    var contentType: js.UndefOr[ContentType] = js.undefined
    /**
      * When the upload was created.
      */
    var created: js.UndefOr[DateTime] = js.undefined
    /**
      * A message about the upload's result.
      */
    var message: js.UndefOr[Message] = js.undefined
    /**
      * The upload's metadata. For example, for Android, this contains information that is parsed from the manifest and is displayed in the AWS Device Farm console after the associated app is uploaded.
      */
    var metadata: js.UndefOr[Metadata] = js.undefined
    /**
      * The upload's file name.
      */
    var name: js.UndefOr[Name] = js.undefined
    /**
      * The upload's status. Must be one of the following values:   FAILED: A failed status.   INITIALIZED: An initialized status.   PROCESSING: A processing status.   SUCCEEDED: A succeeded status.  
      */
    var status: js.UndefOr[UploadStatus] = js.undefined
    /**
      * The upload's type. Must be one of the following values:   ANDROID_APP: An Android upload.   IOS_APP: An iOS upload.   WEB_APP: A web appliction upload.   EXTERNAL_DATA: An external data upload.   APPIUM_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload.   APPIUM_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload.   APPIUM_PYTHON_TEST_PACKAGE: An Appium Python test package upload.   APPIUM_NODE_TEST_PACKAGE: An Appium Node.js test package upload.   APPIUM_RUBY_TEST_PACKAGE: An Appium Ruby test package upload.   APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE: An Appium Java JUnit test package upload for web apps.   APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE: An Appium Java TestNG test package upload for web apps.   APPIUM_WEB_PYTHON_TEST_PACKAGE: An Appium Python test package upload for web apps.   APPIUM_WEB_NODE_TEST_PACKAGE: An Appium Node.js test package upload for web apps.   APPIUM_WEB_RUBY_TEST_PACKAGE: An Appium Ruby test package upload for web apps.   CALABASH_TEST_PACKAGE: A Calabash test package upload.   INSTRUMENTATION_TEST_PACKAGE: An instrumentation upload.   UIAUTOMATION_TEST_PACKAGE: A uiautomation test package upload.   UIAUTOMATOR_TEST_PACKAGE: A uiautomator test package upload.   XCTEST_TEST_PACKAGE: An XCode test package upload.   XCTEST_UI_TEST_PACKAGE: An XCode UI test package upload.   APPIUM_JAVA_JUNIT_TEST_SPEC: An Appium Java JUnit test spec upload.   APPIUM_JAVA_TESTNG_TEST_SPEC: An Appium Java TestNG test spec upload.   APPIUM_PYTHON_TEST_SPEC: An Appium Python test spec upload.   APPIUM_NODE_TEST_SPEC: An Appium Node.js test spec upload.   APPIUM_RUBY_TEST_SPEC: An Appium Ruby test spec upload.   APPIUM_WEB_JAVA_JUNIT_TEST_SPEC: An Appium Java JUnit test spec upload for a web app.   APPIUM_WEB_JAVA_TESTNG_TEST_SPEC: An Appium Java TestNG test spec upload for a web app.   APPIUM_WEB_PYTHON_TEST_SPEC: An Appium Python test spec upload for a web app.   APPIUM_WEB_NODE_TEST_SPEC: An Appium Node.js test spec upload for a web app.   APPIUM_WEB_RUBY_TEST_SPEC: An Appium Ruby test spec upload for a web app.   INSTRUMENTATION_TEST_SPEC: An instrumentation test spec upload.   XCTEST_UI_TEST_SPEC: An XCode UI test spec upload.  
      */
    var `type`: js.UndefOr[UploadType] = js.undefined
    /**
      * The pre-signed Amazon S3 URL that was used to store a file through a corresponding PUT request.
      */
    var url: js.UndefOr[URL] = js.undefined
  }
  
  trait VPCEConfiguration extends js.Object {
    /**
      * The Amazon Resource Name (ARN) of the VPC endpoint configuration.
      */
    var arn: js.UndefOr[AmazonResourceName] = js.undefined
    /**
      * The DNS name that maps to the private IP address of the service you want to access.
      */
    var serviceDnsName: js.UndefOr[ServiceDnsName] = js.undefined
    /**
      * An optional description, providing more details about your VPC endpoint configuration.
      */
    var vpceConfigurationDescription: js.UndefOr[VPCEConfigurationDescription] = js.undefined
    /**
      * The friendly name you give to your VPC endpoint configuration, to manage your configurations more easily.
      */
    var vpceConfigurationName: js.UndefOr[VPCEConfigurationName] = js.undefined
    /**
      * The name of the VPC endpoint service running inside your AWS account that you want Device Farm to test.
      */
    var vpceServiceName: js.UndefOr[VPCEServiceName] = js.undefined
  }
  
  trait _ArtifactCategory extends js.Object
  
  trait _ArtifactType extends js.Object
  
  trait _BillingMethod extends js.Object
  
  trait _DeviceAttribute extends js.Object
  
  trait _DeviceAvailability extends js.Object
  
  trait _DeviceFilterAttribute extends js.Object
  
  trait _DeviceFormFactor extends js.Object
  
  trait _DevicePlatform extends js.Object
  
  trait _DevicePoolType extends js.Object
  
  trait _ExecutionResult extends js.Object
  
  trait _ExecutionResultCode extends js.Object
  
  trait _ExecutionStatus extends js.Object
  
  trait _InstanceStatus extends js.Object
  
  trait _InteractionMode extends js.Object
  
  trait _NetworkProfileType extends js.Object
  
  trait _OfferingTransactionType extends js.Object
  
  trait _RuleOperator extends js.Object
  
  trait _SampleType extends js.Object
  
  trait _TestType extends js.Object
  
  trait _UploadCategory extends js.Object
  
  trait _UploadStatus extends js.Object
  
  trait _UploadType extends js.Object
  
  trait _apiVersion extends js.Object
  
  val TypesNs: this.type = js.native
  type AWSAccountNumber = java.lang.String
  type AccountsCleanup = scala.Boolean
  type AmazonResourceName = java.lang.String
  type AmazonResourceNames = js.Array[AmazonResourceName]
  type AndroidPaths = js.Array[String]
  type AppPackagesCleanup = scala.Boolean
  type ArtifactCategory = _ArtifactCategory | java.lang.String
  type ArtifactType = _ArtifactType | java.lang.String
  type Artifacts = js.Array[Artifact]
  type BillingMethod = _BillingMethod | java.lang.String
  type Boolean = scala.Boolean
  type ClientConfiguration = awsDashSdkLib.libServiceMod.ServiceConfigurationOptions with ClientApiVersions
  type ClientId = java.lang.String
  type ContentType = java.lang.String
  type CurrencyCode = awsDashSdkLib.awsDashSdkLibStrings.USD | java.lang.String
  type DateTime = stdLib.Date
  type DeviceAttribute = _DeviceAttribute | java.lang.String
  type DeviceAvailability = _DeviceAvailability | java.lang.String
  type DeviceFilterAttribute = _DeviceFilterAttribute | java.lang.String
  type DeviceFilterValues = js.Array[String]
  type DeviceFilters = js.Array[DeviceFilter]
  type DeviceFormFactor = _DeviceFormFactor | java.lang.String
  type DeviceHostPaths = js.Array[String]
  type DeviceInstances = js.Array[DeviceInstance]
  type DevicePlatform = _DevicePlatform | java.lang.String
  type DevicePoolCompatibilityResults = js.Array[DevicePoolCompatibilityResult]
  type DevicePoolType = _DevicePoolType | java.lang.String
  type DevicePools = js.Array[DevicePool]
  type Devices = js.Array[Device]
  type Double = scala.Double
  type ExecutionResult = _ExecutionResult | java.lang.String
  type ExecutionResultCode = _ExecutionResultCode | java.lang.String
  type ExecutionStatus = _ExecutionStatus | java.lang.String
  type Filter = java.lang.String
  type HostAddress = java.lang.String
  type IncompatibilityMessages = js.Array[IncompatibilityMessage]
  type InstanceLabels = js.Array[String]
  type InstanceProfiles = js.Array[InstanceProfile]
  type InstanceStatus = _InstanceStatus | java.lang.String
  type Integer = scala.Double
  type InteractionMode = _InteractionMode | java.lang.String
  type IosPaths = js.Array[String]
  type JobTimeoutMinutes = scala.Double
  type Jobs = js.Array[Job]
  type Long = scala.Double
  type Message = java.lang.String
  type Metadata = java.lang.String
  type Name = java.lang.String
  type NetworkProfileType = _NetworkProfileType | java.lang.String
  type NetworkProfiles = js.Array[NetworkProfile]
  type OfferingIdentifier = java.lang.String
  type OfferingPromotionIdentifier = java.lang.String
  type OfferingPromotions = js.Array[OfferingPromotion]
  type OfferingTransactionType = _OfferingTransactionType | java.lang.String
  type OfferingTransactions = js.Array[OfferingTransaction]
  type OfferingType = awsDashSdkLib.awsDashSdkLibStrings.RECURRING | java.lang.String
  type Offerings = js.Array[Offering]
  type PackageIds = js.Array[String]
  type PaginationToken = java.lang.String
  type PercentInteger = scala.Double
  type Problems = js.Array[Problem]
  type Projects = js.Array[Project]
  type RecurringChargeFrequency = awsDashSdkLib.awsDashSdkLibStrings.MONTHLY | java.lang.String
  type RecurringCharges = js.Array[RecurringCharge]
  type RemoteAccessSessions = js.Array[RemoteAccessSession]
  type RuleOperator = _RuleOperator | java.lang.String
  type Rules = js.Array[Rule]
  type Runs = js.Array[Run]
  type SampleType = _SampleType | java.lang.String
  type Samples = js.Array[Sample]
  type ServiceDnsName = java.lang.String
  type SkipAppResign = scala.Boolean
  type SshPublicKey = java.lang.String
  type String = java.lang.String
  type Suites = js.Array[Suite]
  type TestType = _TestType | java.lang.String
  type Tests = js.Array[Test]
  type TransactionIdentifier = java.lang.String
  type URL = java.lang.String
  type UniqueProblems = js.Array[UniqueProblem]
  type UploadCategory = _UploadCategory | java.lang.String
  type UploadStatus = _UploadStatus | java.lang.String
  type UploadType = _UploadType | java.lang.String
  type Uploads = js.Array[Upload]
  type VPCEConfigurationDescription = java.lang.String
  type VPCEConfigurationName = java.lang.String
  type VPCEConfigurations = js.Array[VPCEConfiguration]
  type VPCEServiceName = java.lang.String
  type VideoCapture = scala.Boolean
  type apiVersion = _apiVersion | java.lang.String
}

