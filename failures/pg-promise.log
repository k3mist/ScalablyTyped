[info ] InferredDependency.scala:20 Inferred dependencies Set(TsIdentLibrarySimple(node)) for TsIdentLibrarySimple(pg-promise) [id => pg-promise, phase => typescript, file => ../pg-promise/typescript/pg-promise.d.ts] 
[debug] PhaseRunner.scala:82 Success [id => pg-promise, phase => typescript] 
[info ] InferredDependency.scala:20 Inferred dependencies Set(TsIdentLibrarySimple(node)) for TsIdentLibrarySimple(pg-promise) [id => pg-promise, phase => typescript, file => ../pg-promise/typescript/pg-subset.d.ts] 
[debug] PhaseRunner.scala:82 Success [id => pg-promise, phase => typescript] 
[debug] PhaseRunner.scala:82 Success [id => pg-promise, phase => typescript] 
[info ] Phase1ReadTypescript.scala:160 Preprocessing TsHelperFile(InFile(/home/olvind/tmp/tso-cache/npm/node_modules/pg-promise/typescript/ext-promise.d.ts),FromFolder(InFolder(/home/olvind/tmp/tso-cache/npm/node_modules/pg-promise),TsIdentLibrarySimple(pg-promise)),TsIdentModule(None,List(pg-promise, typescript, ext-promise))) [id => pg-promise, phase => typescript] 
[info ] InferredDefaultModule.scala:39 Inferred module TsIdentModule(None,List(pg-promise, typescript, ext-promise)) [id => pg-promise, phase => typescript] 
[info ] Phase1ReadTypescript.scala:160 Preprocessing TsHelperFile(InFile(/home/olvind/tmp/tso-cache/npm/node_modules/pg-promise/typescript/pg-promise.d.ts),FromFolder(InFolder(/home/olvind/tmp/tso-cache/npm/node_modules/pg-promise),TsIdentLibrarySimple(pg-promise)),TsIdentModule(None,List(pg-promise))) [id => pg-promise, phase => typescript] 
[info ] InferredDefaultModule.scala:39 Inferred module TsIdentModule(None,List(pg-promise)) [id => pg-promise, phase => typescript] 
[info ] Phase1ReadTypescript.scala:160 Preprocessing TsHelperFile(InFile(/home/olvind/tmp/tso-cache/npm/node_modules/pg-promise/typescript/pg-subset.d.ts),FromFolder(InFolder(/home/olvind/tmp/tso-cache/npm/node_modules/pg-promise),TsIdentLibrarySimple(pg-promise)),TsIdentModule(None,List(pg-promise, typescript, pg-subset))) [id => pg-promise, phase => typescript] 
[info ] InferredDefaultModule.scala:39 Inferred module TsIdentModule(None,List(pg-promise, typescript, pg-subset)) [id => pg-promise, phase => typescript] 
[warn ] Phase1ReadTypescript.scala:200 Processing TsIdentLibrarySimple(pg-promise) [id => pg-promise, phase => typescript] 
[info ] ResolveTypeQueries.scala:138 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(pgMinify)))) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclVar(minify) / TsTypeQuery())] 
[info ] ResolveTypeQueries.scala:138 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(PromiseAdapter)))) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IMain) / TsMemberProperty(PromiseAdapter) / TsTypeQuery())] 
[info ] ResolveTypeQueries.scala:138 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(PreparedStatement)))) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IMain) / TsMemberProperty(PreparedStatement) / TsTypeQuery())] 
[info ] ResolveTypeQueries.scala:138 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(ParameterizedQuery)))) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IMain) / TsMemberProperty(ParameterizedQuery) / TsTypeQuery())] 
[info ] ResolveTypeQueries.scala:138 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(QueryFile)))) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IMain) / TsMemberProperty(QueryFile) / TsTypeQuery())] 
[warn ] ResolveTypeQueries.scala:126 Couldn't resolve typeof queryResult [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IMain) / TsMemberProperty(queryResult) / TsTypeQuery())] 
[info ] ResolveTypeQueries.scala:138 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(pgMinify)))) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IMain) / TsMemberProperty(minify) / TsTypeQuery())] 
[info ] ResolveTypeQueries.scala:138 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(errors)))) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IMain) / TsMemberProperty(errors) / TsTypeQuery())] 
[info ] ResolveTypeQueries.scala:138 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(pg)))) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IMain) / TsMemberProperty(pg) / TsTypeQuery())] 
[warn ] ResolveTypeQueries.scala:126 Couldn't resolve typeof isolationLevel [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(ITXMode) / TsMemberProperty(isolationLevel) / TsTypeQuery())] 
[info ] ResolveTypeQueries.scala:138 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(TransactionMode)))) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(ITXMode) / TsMemberProperty(TransactionMode) / TsTypeQuery())] 
[info ] ResolveTypeQueries.scala:138 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(Column)))) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IHelpers) / TsMemberProperty(Column) / TsTypeQuery())] 
[info ] ResolveTypeQueries.scala:138 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(ColumnSet)))) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IHelpers) / TsMemberProperty(ColumnSet) / TsTypeQuery())] 
[info ] ResolveTypeQueries.scala:138 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(TableName)))) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IHelpers) / TsMemberProperty(TableName) / TsTypeQuery())] 
[info ] ResolveTypeQueries.scala:138 Resolved TsTypeQuery(TsQIdent(List(TsIdentSimple(checkServerIdentity)))) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise/typescript/pg-subset) / TsDeclNamespace(pg) / TsDeclTypeAlias(TSSLConfig) / TsTypeObject() / TsMemberProperty(checkServerIdentity) / TsTypeQuery())] 
[info ] ExpandCallables.scala:51 Expanded minify into 2 methods [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IMain))] 
[info ] ExpandCallables.scala:51 Expanded promise into 1 methods [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(ILibConfig))] 
[info ] ExpandCallables.scala:51 Expanded pgp into 1 methods [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(ILibConfig))] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_Options) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclVar(minify) / TsTypeObject())] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_Deferrable) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclClass(TransactionMode) / TsMemberFunction(constructor) / TsFunSig() / TsFunParam() / TsTypeObject())] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_Name) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(TSqlBuildConfig) / TsMemberProperty(module) / TsTypeObject())] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_Options) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IMain) / TsMemberProperty(minify) / TsTypeObject())] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_ParameterizedQueryError) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IMain) / TsMemberProperty(errors) / TsTypeObject())] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_Client) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IMain) / TsMemberProperty(pg) / TsTypeObject())] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_Duration) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IBaseProtocol) / TsMemberFunction(stream) / TsFunSig() / TsTypeRef() / TsTypeObject())] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_Tag) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IBaseProtocol) / TsMemberFunction(task) / TsFunSig() / TsFunParam() / TsTypeObject())] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_Cnd) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IBaseProtocol) / TsMemberFunction(taskIf) / TsFunSig() / TsFunParam() / TsTypeObject())] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_Mode) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IBaseProtocol) / TsMemberFunction(tx) / TsFunSig() / TsFunParam() / TsTypeObject())] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_CndMode) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IBaseProtocol) / TsMemberFunction(txIf) / TsFunSig() / TsFunParam() / TsTypeObject())] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_CndModeTag) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(ITaskArguments) / TsMemberProperty(options) / TsTypeIntersect() / TsTypeObject())] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_IgnoreErrors) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IUtils) / TsMemberFunction(enumSql) / TsFunSig() / TsFunParam() / TsTypeObject())] 
[info ] ExtractInterfaces.scala:37 Extracted anonymous interface TsIdentSimple(Anon_IgnoreErrors) [id => pg-promise, phase => typescript, scope => TreeScope(TsParsedFile() / TsDeclModule(pg-promise) / TsDeclNamespace(pgPromise) / TsDeclInterface(IUtils) / TsMemberFunction(enumSql) / TsFunSig() / TsFunParam() / TsTypeObject())] 
[debug] PhaseRunner.scala:82 Success [id => pg-promise, phase => typescript] 
[warn ] Phase2ToScalaJs.scala:40 Processing pg-promise [id => pg-promise, phase => scala.js] 
[info ] CombineOverloads.scala:82 Dropping 1 incompatible `apply` overloads (have no way to express this) at Name(pgDashPromiseLib) / Name(pgDashPromiseMod) / Name(^) [id => pg-promise, phase => scala.js, this => Name(pgDashPromiseLib) / Name(pgDashPromiseMod) / Name(^)] 
[info ] CombineOverloads.scala:82 Dropping 1 incompatible `apply` overloads (have no way to express this) at Name(pgDashPromiseLib) / Name(pgDashPromiseMod) / Name(^) [id => pg-promise, phase => scala.js, this => Name(pgDashPromiseLib) / Name(pgDashPromiseMod) / Name(^)] 
[info ] CompleteClass.scala:62 Completed implementations Vector(name, schema, table, toPostgres) [id => pg-promise, phase => scala.js, this => Name(pgDashPromiseLib) / Name(pgDashPromiseMod) / Name(TableName)] 
[info ] CompleteClass.scala:62 Completed implementations Vector(name, result, query, code, stack_QueryResultError, values, message, received) [id => pg-promise, phase => scala.js, this => Name(pgDashPromiseLib) / Name(pgDashPromiseMod) / Name(errorsNs) / Name(QueryResultError)] 
[debug] PhaseRunner.scala:82 Success [id => pg-promise, phase => scala.js] 
[error] package.scala:12 illegal cyclic reference involving type TQuery,   type TVirtualQuery = js.Function1[/* values */ js.UndefOr[js.Any], TQuery] [id => pg-promise, phase => build] 
[error] PhaseRunner.scala:86 Failure, [pg-promise => Compilation failed] [id => pg-promise, phase => build] 
