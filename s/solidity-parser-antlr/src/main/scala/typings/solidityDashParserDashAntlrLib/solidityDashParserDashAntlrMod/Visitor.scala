package typings
package solidityDashParserDashAntlrLib.solidityDashParserDashAntlrMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait Visitor extends js.Object {
  var AssemblyAssignment: js.UndefOr[js.Function1[/* node */ AssemblyAssignment, _]] = js.undefined
  var AssemblyBlock: js.UndefOr[js.Function1[/* node */ AssemblyBlock, _]] = js.undefined
  var AssemblyCall: js.UndefOr[js.Function1[/* node */ AssemblyCall, _]] = js.undefined
  var AssemblyCase: js.UndefOr[js.Function1[/* node */ AssemblyCase, _]] = js.undefined
  var AssemblyExpression: js.UndefOr[js.Function1[/* node */ AssemblyExpression, _]] = js.undefined
  var AssemblyFor: js.UndefOr[js.Function1[/* node */ AssemblyFor, _]] = js.undefined
  var AssemblyFunctionDefinition: js.UndefOr[js.Function1[/* node */ AssemblyFunctionDefinition, _]] = js.undefined
  var AssemblyFunctionReturns: js.UndefOr[js.Function1[/* node */ AssemblyFunctionReturns, _]] = js.undefined
  var AssemblyIdentifierList: js.UndefOr[js.Function1[/* node */ AssemblyIdentifierList, _]] = js.undefined
  var AssemblyIdentifierOrList: js.UndefOr[js.Function1[/* node */ AssemblyIdentifierOrList, _]] = js.undefined
  var AssemblyIf: js.UndefOr[js.Function1[/* node */ AssemblyIf, _]] = js.undefined
  var AssemblyItem: js.UndefOr[js.Function1[/* node */ AssemblyItem, _]] = js.undefined
  var AssemblyLiteral: js.UndefOr[js.Function1[/* node */ AssemblyLiteral, _]] = js.undefined
  var AssemblyLocalDefinition: js.UndefOr[js.Function1[/* node */ AssemblyLocalDefinition, _]] = js.undefined
  var AssemblyStackAssignment: js.UndefOr[js.Function1[/* node */ AssemblyStackAssignment, _]] = js.undefined
  var AssemblySwitch: js.UndefOr[js.Function1[/* node */ AssemblySwitch, _]] = js.undefined
  var BinaryOperation: js.UndefOr[js.Function1[/* node */ BinaryOperation, _]] = js.undefined
  var Block: js.UndefOr[js.Function1[/* node */ Block, _]] = js.undefined
  var BreakStatement: js.UndefOr[js.Function1[/* node */ BreakStatement, _]] = js.undefined
  var Conditional: js.UndefOr[js.Function1[/* node */ Conditional, _]] = js.undefined
  var ContinueStatement: js.UndefOr[js.Function1[/* node */ ContinueStatement, _]] = js.undefined
  var ContractDefinition: js.UndefOr[js.Function1[/* node */ ContractDefinition, _]] = js.undefined
  var ContractPart: js.UndefOr[js.Function1[/* node */ ContractPart, _]] = js.undefined
  var DoWhileStatement: js.UndefOr[js.Function1[/* node */ DoWhileStatement, _]] = js.undefined
  var ElementaryTypeName: js.UndefOr[js.Function1[/* node */ ElementaryTypeName, _]] = js.undefined
  var ElementaryTypeNameExpression: js.UndefOr[js.Function1[/* node */ ElementaryTypeNameExpression, _]] = js.undefined
  var EnumDefinition: js.UndefOr[js.Function1[/* node */ EnumDefinition, _]] = js.undefined
  var EnumValue: js.UndefOr[js.Function1[/* node */ EnumValue, _]] = js.undefined
  var EventDefinition: js.UndefOr[js.Function1[/* node */ EventDefinition, _]] = js.undefined
  var EventParameter: js.UndefOr[js.Function1[/* node */ EventParameter, _]] = js.undefined
  var EventParameterList: js.UndefOr[js.Function1[/* node */ EventParameterList, _]] = js.undefined
  var Expression: js.UndefOr[js.Function1[/* node */ Expression, _]] = js.undefined
  var ExpressionList: js.UndefOr[js.Function1[/* node */ ExpressionList, _]] = js.undefined
  var ExpressionStatement: js.UndefOr[js.Function1[/* node */ ExpressionStatement, _]] = js.undefined
  var ForStatement: js.UndefOr[js.Function1[/* node */ ForStatement, _]] = js.undefined
  var FunctionCallArguments: js.UndefOr[js.Function1[/* node */ FunctionCallArguments, _]] = js.undefined
  var FunctionDefinition: js.UndefOr[js.Function1[/* node */ FunctionDefinition, _]] = js.undefined
  var FunctionTypeName: js.UndefOr[js.Function1[/* node */ FunctionTypeName, _]] = js.undefined
  var FunctionTypeParameter: js.UndefOr[js.Function1[/* node */ FunctionTypeParameter, _]] = js.undefined
  var FunctionTypeParameterList: js.UndefOr[js.Function1[/* node */ FunctionTypeParameterList, _]] = js.undefined
  var Identifier: js.UndefOr[js.Function1[/* node */ Identifier, _]] = js.undefined
  var IdentifierList: js.UndefOr[js.Function1[/* node */ IdentifierList, _]] = js.undefined
  var IfStatement: js.UndefOr[js.Function1[/* node */ IfStatement, _]] = js.undefined
  var ImportDeclaration: js.UndefOr[js.Function1[/* node */ ImportDeclaration, _]] = js.undefined
  var ImportDirective: js.UndefOr[js.Function1[/* node */ ImportDirective, _]] = js.undefined
  var InheritanceSpecifier: js.UndefOr[js.Function1[/* node */ InheritanceSpecifier, _]] = js.undefined
  var InlineAssemblyStatement: js.UndefOr[js.Function1[/* node */ InlineAssemblyStatement, _]] = js.undefined
  var LabelDefinition: js.UndefOr[js.Function1[/* node */ LabelDefinition, _]] = js.undefined
  var Mapping: js.UndefOr[js.Function1[/* node */ Mapping, _]] = js.undefined
  var ModifierDefinition: js.UndefOr[js.Function1[/* node */ ModifierDefinition, _]] = js.undefined
  var ModifierInvocation: js.UndefOr[js.Function1[/* node */ ModifierInvocation, _]] = js.undefined
  var ModifierList: js.UndefOr[js.Function1[/* node */ ModifierList, _]] = js.undefined
  var NameValue: js.UndefOr[js.Function1[/* node */ NameValue, _]] = js.undefined
  var NameValueList: js.UndefOr[js.Function1[/* node */ NameValueList, _]] = js.undefined
  var NumberLiteral: js.UndefOr[js.Function1[/* node */ NumberLiteral, _]] = js.undefined
  var Parameter: js.UndefOr[js.Function1[/* node */ Parameter, _]] = js.undefined
  var ParameterList: js.UndefOr[js.Function1[/* node */ ParameterList, _]] = js.undefined
  var PragmaDirective: js.UndefOr[js.Function1[/* node */ PragmaDirective, _]] = js.undefined
  var PragmaName: js.UndefOr[js.Function1[/* node */ PragmaName, _]] = js.undefined
  var PragmaValue: js.UndefOr[js.Function1[/* node */ PragmaValue, _]] = js.undefined
  var PrimaryExpression: js.UndefOr[js.Function1[/* node */ PrimaryExpression, _]] = js.undefined
  var ReturnParameters: js.UndefOr[js.Function1[/* node */ ReturnParameters, _]] = js.undefined
  var ReturnStatement: js.UndefOr[js.Function1[/* node */ ReturnStatement, _]] = js.undefined
  var SimpleStatement: js.UndefOr[js.Function1[/* node */ SimpleStatement, _]] = js.undefined
  var SourceUnit: js.UndefOr[js.Function1[/* node */ SourceUnit, _]] = js.undefined
  var StateMutability: js.UndefOr[js.Function1[/* node */ StateMutability, _]] = js.undefined
  var StateVariableDeclaration: js.UndefOr[js.Function1[/* node */ StateVariableDeclaration, _]] = js.undefined
  var Statement: js.UndefOr[js.Function1[/* node */ Statement, _]] = js.undefined
  var StorageLocation: js.UndefOr[js.Function1[/* node */ StorageLocation, _]] = js.undefined
  var StructDefinition: js.UndefOr[js.Function1[/* node */ StructDefinition, _]] = js.undefined
  var SubAssembly: js.UndefOr[js.Function1[/* node */ SubAssembly, _]] = js.undefined
  var ThrowStatement: js.UndefOr[js.Function1[/* node */ ThrowStatement, _]] = js.undefined
  var TupleExpression: js.UndefOr[js.Function1[/* node */ TupleExpression, _]] = js.undefined
  var TypeName: js.UndefOr[js.Function1[/* node */ TypeName, _]] = js.undefined
  var UserDefinedTypeName: js.UndefOr[js.Function1[/* node */ UserDefinedTypeName, _]] = js.undefined
  var UsingForDeclaration: js.UndefOr[js.Function1[/* node */ UsingForDeclaration, _]] = js.undefined
  var VariableDeclaration: js.UndefOr[js.Function1[/* node */ VariableDeclaration, _]] = js.undefined
  var VariableDeclarationStatement: js.UndefOr[js.Function1[/* node */ VariableDeclarationStatement, _]] = js.undefined
  var Version: js.UndefOr[js.Function1[/* node */ Version, _]] = js.undefined
  var VersionConstraint: js.UndefOr[js.Function1[/* node */ VersionConstraint, _]] = js.undefined
  var VersionOperator: js.UndefOr[js.Function1[/* node */ VersionOperator, _]] = js.undefined
  var WhileStatement: js.UndefOr[js.Function1[/* node */ WhileStatement, _]] = js.undefined
}

object Visitor {
  @scala.inline
  def apply(
    AssemblyAssignment: js.Function1[/* node */ AssemblyAssignment, _] = null,
    AssemblyBlock: js.Function1[/* node */ AssemblyBlock, _] = null,
    AssemblyCall: js.Function1[/* node */ AssemblyCall, _] = null,
    AssemblyCase: js.Function1[/* node */ AssemblyCase, _] = null,
    AssemblyExpression: js.Function1[/* node */ AssemblyExpression, _] = null,
    AssemblyFor: js.Function1[/* node */ AssemblyFor, _] = null,
    AssemblyFunctionDefinition: js.Function1[/* node */ AssemblyFunctionDefinition, _] = null,
    AssemblyFunctionReturns: js.Function1[/* node */ AssemblyFunctionReturns, _] = null,
    AssemblyIdentifierList: js.Function1[/* node */ AssemblyIdentifierList, _] = null,
    AssemblyIdentifierOrList: js.Function1[/* node */ AssemblyIdentifierOrList, _] = null,
    AssemblyIf: js.Function1[/* node */ AssemblyIf, _] = null,
    AssemblyItem: js.Function1[/* node */ AssemblyItem, _] = null,
    AssemblyLiteral: js.Function1[/* node */ AssemblyLiteral, _] = null,
    AssemblyLocalDefinition: js.Function1[/* node */ AssemblyLocalDefinition, _] = null,
    AssemblyStackAssignment: js.Function1[/* node */ AssemblyStackAssignment, _] = null,
    AssemblySwitch: js.Function1[/* node */ AssemblySwitch, _] = null,
    BinaryOperation: js.Function1[/* node */ BinaryOperation, _] = null,
    Block: js.Function1[/* node */ Block, _] = null,
    BreakStatement: js.Function1[/* node */ BreakStatement, _] = null,
    Conditional: js.Function1[/* node */ Conditional, _] = null,
    ContinueStatement: js.Function1[/* node */ ContinueStatement, _] = null,
    ContractDefinition: js.Function1[/* node */ ContractDefinition, _] = null,
    ContractPart: js.Function1[/* node */ ContractPart, _] = null,
    DoWhileStatement: js.Function1[/* node */ DoWhileStatement, _] = null,
    ElementaryTypeName: js.Function1[/* node */ ElementaryTypeName, _] = null,
    ElementaryTypeNameExpression: js.Function1[/* node */ ElementaryTypeNameExpression, _] = null,
    EnumDefinition: js.Function1[/* node */ EnumDefinition, _] = null,
    EnumValue: js.Function1[/* node */ EnumValue, _] = null,
    EventDefinition: js.Function1[/* node */ EventDefinition, _] = null,
    EventParameter: js.Function1[/* node */ EventParameter, _] = null,
    EventParameterList: js.Function1[/* node */ EventParameterList, _] = null,
    Expression: js.Function1[/* node */ Expression, _] = null,
    ExpressionList: js.Function1[/* node */ ExpressionList, _] = null,
    ExpressionStatement: js.Function1[/* node */ ExpressionStatement, _] = null,
    ForStatement: js.Function1[/* node */ ForStatement, _] = null,
    FunctionCallArguments: js.Function1[/* node */ FunctionCallArguments, _] = null,
    FunctionDefinition: js.Function1[/* node */ FunctionDefinition, _] = null,
    FunctionTypeName: js.Function1[/* node */ FunctionTypeName, _] = null,
    FunctionTypeParameter: js.Function1[/* node */ FunctionTypeParameter, _] = null,
    FunctionTypeParameterList: js.Function1[/* node */ FunctionTypeParameterList, _] = null,
    Identifier: js.Function1[/* node */ Identifier, _] = null,
    IdentifierList: js.Function1[/* node */ IdentifierList, _] = null,
    IfStatement: js.Function1[/* node */ IfStatement, _] = null,
    ImportDeclaration: js.Function1[/* node */ ImportDeclaration, _] = null,
    ImportDirective: js.Function1[/* node */ ImportDirective, _] = null,
    InheritanceSpecifier: js.Function1[/* node */ InheritanceSpecifier, _] = null,
    InlineAssemblyStatement: js.Function1[/* node */ InlineAssemblyStatement, _] = null,
    LabelDefinition: js.Function1[/* node */ LabelDefinition, _] = null,
    Mapping: js.Function1[/* node */ Mapping, _] = null,
    ModifierDefinition: js.Function1[/* node */ ModifierDefinition, _] = null,
    ModifierInvocation: js.Function1[/* node */ ModifierInvocation, _] = null,
    ModifierList: js.Function1[/* node */ ModifierList, _] = null,
    NameValue: js.Function1[/* node */ NameValue, _] = null,
    NameValueList: js.Function1[/* node */ NameValueList, _] = null,
    NumberLiteral: js.Function1[/* node */ NumberLiteral, _] = null,
    Parameter: js.Function1[/* node */ Parameter, _] = null,
    ParameterList: js.Function1[/* node */ ParameterList, _] = null,
    PragmaDirective: js.Function1[/* node */ PragmaDirective, _] = null,
    PragmaName: js.Function1[/* node */ PragmaName, _] = null,
    PragmaValue: js.Function1[/* node */ PragmaValue, _] = null,
    PrimaryExpression: js.Function1[/* node */ PrimaryExpression, _] = null,
    ReturnParameters: js.Function1[/* node */ ReturnParameters, _] = null,
    ReturnStatement: js.Function1[/* node */ ReturnStatement, _] = null,
    SimpleStatement: js.Function1[/* node */ SimpleStatement, _] = null,
    SourceUnit: js.Function1[/* node */ SourceUnit, _] = null,
    StateMutability: js.Function1[/* node */ StateMutability, _] = null,
    StateVariableDeclaration: js.Function1[/* node */ StateVariableDeclaration, _] = null,
    Statement: js.Function1[/* node */ Statement, _] = null,
    StorageLocation: js.Function1[/* node */ StorageLocation, _] = null,
    StructDefinition: js.Function1[/* node */ StructDefinition, _] = null,
    SubAssembly: js.Function1[/* node */ SubAssembly, _] = null,
    ThrowStatement: js.Function1[/* node */ ThrowStatement, _] = null,
    TupleExpression: js.Function1[/* node */ TupleExpression, _] = null,
    TypeName: js.Function1[/* node */ TypeName, _] = null,
    UserDefinedTypeName: js.Function1[/* node */ UserDefinedTypeName, _] = null,
    UsingForDeclaration: js.Function1[/* node */ UsingForDeclaration, _] = null,
    VariableDeclaration: js.Function1[/* node */ VariableDeclaration, _] = null,
    VariableDeclarationStatement: js.Function1[/* node */ VariableDeclarationStatement, _] = null,
    Version: js.Function1[/* node */ Version, _] = null,
    VersionConstraint: js.Function1[/* node */ VersionConstraint, _] = null,
    VersionOperator: js.Function1[/* node */ VersionOperator, _] = null,
    WhileStatement: js.Function1[/* node */ WhileStatement, _] = null
  ): Visitor = {
    val __obj = js.Dynamic.literal()
    if (AssemblyAssignment != null) __obj.updateDynamic("AssemblyAssignment")(AssemblyAssignment)
    if (AssemblyBlock != null) __obj.updateDynamic("AssemblyBlock")(AssemblyBlock)
    if (AssemblyCall != null) __obj.updateDynamic("AssemblyCall")(AssemblyCall)
    if (AssemblyCase != null) __obj.updateDynamic("AssemblyCase")(AssemblyCase)
    if (AssemblyExpression != null) __obj.updateDynamic("AssemblyExpression")(AssemblyExpression)
    if (AssemblyFor != null) __obj.updateDynamic("AssemblyFor")(AssemblyFor)
    if (AssemblyFunctionDefinition != null) __obj.updateDynamic("AssemblyFunctionDefinition")(AssemblyFunctionDefinition)
    if (AssemblyFunctionReturns != null) __obj.updateDynamic("AssemblyFunctionReturns")(AssemblyFunctionReturns)
    if (AssemblyIdentifierList != null) __obj.updateDynamic("AssemblyIdentifierList")(AssemblyIdentifierList)
    if (AssemblyIdentifierOrList != null) __obj.updateDynamic("AssemblyIdentifierOrList")(AssemblyIdentifierOrList)
    if (AssemblyIf != null) __obj.updateDynamic("AssemblyIf")(AssemblyIf)
    if (AssemblyItem != null) __obj.updateDynamic("AssemblyItem")(AssemblyItem)
    if (AssemblyLiteral != null) __obj.updateDynamic("AssemblyLiteral")(AssemblyLiteral)
    if (AssemblyLocalDefinition != null) __obj.updateDynamic("AssemblyLocalDefinition")(AssemblyLocalDefinition)
    if (AssemblyStackAssignment != null) __obj.updateDynamic("AssemblyStackAssignment")(AssemblyStackAssignment)
    if (AssemblySwitch != null) __obj.updateDynamic("AssemblySwitch")(AssemblySwitch)
    if (BinaryOperation != null) __obj.updateDynamic("BinaryOperation")(BinaryOperation)
    if (Block != null) __obj.updateDynamic("Block")(Block)
    if (BreakStatement != null) __obj.updateDynamic("BreakStatement")(BreakStatement)
    if (Conditional != null) __obj.updateDynamic("Conditional")(Conditional)
    if (ContinueStatement != null) __obj.updateDynamic("ContinueStatement")(ContinueStatement)
    if (ContractDefinition != null) __obj.updateDynamic("ContractDefinition")(ContractDefinition)
    if (ContractPart != null) __obj.updateDynamic("ContractPart")(ContractPart)
    if (DoWhileStatement != null) __obj.updateDynamic("DoWhileStatement")(DoWhileStatement)
    if (ElementaryTypeName != null) __obj.updateDynamic("ElementaryTypeName")(ElementaryTypeName)
    if (ElementaryTypeNameExpression != null) __obj.updateDynamic("ElementaryTypeNameExpression")(ElementaryTypeNameExpression)
    if (EnumDefinition != null) __obj.updateDynamic("EnumDefinition")(EnumDefinition)
    if (EnumValue != null) __obj.updateDynamic("EnumValue")(EnumValue)
    if (EventDefinition != null) __obj.updateDynamic("EventDefinition")(EventDefinition)
    if (EventParameter != null) __obj.updateDynamic("EventParameter")(EventParameter)
    if (EventParameterList != null) __obj.updateDynamic("EventParameterList")(EventParameterList)
    if (Expression != null) __obj.updateDynamic("Expression")(Expression)
    if (ExpressionList != null) __obj.updateDynamic("ExpressionList")(ExpressionList)
    if (ExpressionStatement != null) __obj.updateDynamic("ExpressionStatement")(ExpressionStatement)
    if (ForStatement != null) __obj.updateDynamic("ForStatement")(ForStatement)
    if (FunctionCallArguments != null) __obj.updateDynamic("FunctionCallArguments")(FunctionCallArguments)
    if (FunctionDefinition != null) __obj.updateDynamic("FunctionDefinition")(FunctionDefinition)
    if (FunctionTypeName != null) __obj.updateDynamic("FunctionTypeName")(FunctionTypeName)
    if (FunctionTypeParameter != null) __obj.updateDynamic("FunctionTypeParameter")(FunctionTypeParameter)
    if (FunctionTypeParameterList != null) __obj.updateDynamic("FunctionTypeParameterList")(FunctionTypeParameterList)
    if (Identifier != null) __obj.updateDynamic("Identifier")(Identifier)
    if (IdentifierList != null) __obj.updateDynamic("IdentifierList")(IdentifierList)
    if (IfStatement != null) __obj.updateDynamic("IfStatement")(IfStatement)
    if (ImportDeclaration != null) __obj.updateDynamic("ImportDeclaration")(ImportDeclaration)
    if (ImportDirective != null) __obj.updateDynamic("ImportDirective")(ImportDirective)
    if (InheritanceSpecifier != null) __obj.updateDynamic("InheritanceSpecifier")(InheritanceSpecifier)
    if (InlineAssemblyStatement != null) __obj.updateDynamic("InlineAssemblyStatement")(InlineAssemblyStatement)
    if (LabelDefinition != null) __obj.updateDynamic("LabelDefinition")(LabelDefinition)
    if (Mapping != null) __obj.updateDynamic("Mapping")(Mapping)
    if (ModifierDefinition != null) __obj.updateDynamic("ModifierDefinition")(ModifierDefinition)
    if (ModifierInvocation != null) __obj.updateDynamic("ModifierInvocation")(ModifierInvocation)
    if (ModifierList != null) __obj.updateDynamic("ModifierList")(ModifierList)
    if (NameValue != null) __obj.updateDynamic("NameValue")(NameValue)
    if (NameValueList != null) __obj.updateDynamic("NameValueList")(NameValueList)
    if (NumberLiteral != null) __obj.updateDynamic("NumberLiteral")(NumberLiteral)
    if (Parameter != null) __obj.updateDynamic("Parameter")(Parameter)
    if (ParameterList != null) __obj.updateDynamic("ParameterList")(ParameterList)
    if (PragmaDirective != null) __obj.updateDynamic("PragmaDirective")(PragmaDirective)
    if (PragmaName != null) __obj.updateDynamic("PragmaName")(PragmaName)
    if (PragmaValue != null) __obj.updateDynamic("PragmaValue")(PragmaValue)
    if (PrimaryExpression != null) __obj.updateDynamic("PrimaryExpression")(PrimaryExpression)
    if (ReturnParameters != null) __obj.updateDynamic("ReturnParameters")(ReturnParameters)
    if (ReturnStatement != null) __obj.updateDynamic("ReturnStatement")(ReturnStatement)
    if (SimpleStatement != null) __obj.updateDynamic("SimpleStatement")(SimpleStatement)
    if (SourceUnit != null) __obj.updateDynamic("SourceUnit")(SourceUnit)
    if (StateMutability != null) __obj.updateDynamic("StateMutability")(StateMutability)
    if (StateVariableDeclaration != null) __obj.updateDynamic("StateVariableDeclaration")(StateVariableDeclaration)
    if (Statement != null) __obj.updateDynamic("Statement")(Statement)
    if (StorageLocation != null) __obj.updateDynamic("StorageLocation")(StorageLocation)
    if (StructDefinition != null) __obj.updateDynamic("StructDefinition")(StructDefinition)
    if (SubAssembly != null) __obj.updateDynamic("SubAssembly")(SubAssembly)
    if (ThrowStatement != null) __obj.updateDynamic("ThrowStatement")(ThrowStatement)
    if (TupleExpression != null) __obj.updateDynamic("TupleExpression")(TupleExpression)
    if (TypeName != null) __obj.updateDynamic("TypeName")(TypeName)
    if (UserDefinedTypeName != null) __obj.updateDynamic("UserDefinedTypeName")(UserDefinedTypeName)
    if (UsingForDeclaration != null) __obj.updateDynamic("UsingForDeclaration")(UsingForDeclaration)
    if (VariableDeclaration != null) __obj.updateDynamic("VariableDeclaration")(VariableDeclaration)
    if (VariableDeclarationStatement != null) __obj.updateDynamic("VariableDeclarationStatement")(VariableDeclarationStatement)
    if (Version != null) __obj.updateDynamic("Version")(Version)
    if (VersionConstraint != null) __obj.updateDynamic("VersionConstraint")(VersionConstraint)
    if (VersionOperator != null) __obj.updateDynamic("VersionOperator")(VersionOperator)
    if (WhileStatement != null) __obj.updateDynamic("WhileStatement")(WhileStatement)
    __obj.asInstanceOf[Visitor]
  }
}

