package typings
package gapiDotClientDotComputeLib.gapiNs.clientNs.computeNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait NetworkInterface extends js.Object {
  /**
    * An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs
    * specified, then this instance will have no external internet access.
    */
  var accessConfigs: js.UndefOr[js.Array[AccessConfig]] = js.undefined
  /** An array of alias IP ranges for this network interface. Can only be specified for network interfaces on subnet-mode networks. */
  var aliasIpRanges: js.UndefOr[js.Array[AliasIpRange]] = js.undefined
  /** [Output Only] Type of the resource. Always compute#networkInterface for network interfaces. */
  var kind: js.UndefOr[java.lang.String] = js.undefined
  /** [Output Only] The name of the network interface, generated by the server. For network devices, these are eth0, eth1, etc. */
  var name: js.UndefOr[java.lang.String] = js.undefined
  /**
    * URL of the network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network
    * global/networks/default is used; if the network is not specified but the subnetwork is specified, the network is inferred.
    *
    * This field is optional when creating a firewall rule. If not specified when creating a firewall rule, the default network global/networks/default is
    * used.
    *
    * If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs:
    * - https://www.googleapis.com/compute/v1/projects/project/global/networks/network
    * - projects/project/global/networks/network
    * - global/networks/default
    */
  var network: js.UndefOr[java.lang.String] = js.undefined
  /**
    * An IPv4 internal network address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned
    * by the system.
    */
  var networkIP: js.UndefOr[java.lang.String] = js.undefined
  /**
    * The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not provide this property. If the network is in
    * auto subnet mode, providing the subnetwork is optional. If the network is in custom subnet mode, then this field should be specified. If you specify
    * this property, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs:
    * - https://www.googleapis.com/compute/v1/projects/project/regions/region/subnetworks/subnetwork
    * - regions/region/subnetworks/subnetwork
    */
  var subnetwork: js.UndefOr[java.lang.String] = js.undefined
}

object NetworkInterface {
  @scala.inline
  def apply(
    accessConfigs: js.Array[AccessConfig] = null,
    aliasIpRanges: js.Array[AliasIpRange] = null,
    kind: java.lang.String = null,
    name: java.lang.String = null,
    network: java.lang.String = null,
    networkIP: java.lang.String = null,
    subnetwork: java.lang.String = null
  ): NetworkInterface = {
    val __obj = js.Dynamic.literal()
    if (accessConfigs != null) __obj.updateDynamic("accessConfigs")(accessConfigs)
    if (aliasIpRanges != null) __obj.updateDynamic("aliasIpRanges")(aliasIpRanges)
    if (kind != null) __obj.updateDynamic("kind")(kind)
    if (name != null) __obj.updateDynamic("name")(name)
    if (network != null) __obj.updateDynamic("network")(network)
    if (networkIP != null) __obj.updateDynamic("networkIP")(networkIP)
    if (subnetwork != null) __obj.updateDynamic("subnetwork")(subnetwork)
    __obj.asInstanceOf[NetworkInterface]
  }
}

