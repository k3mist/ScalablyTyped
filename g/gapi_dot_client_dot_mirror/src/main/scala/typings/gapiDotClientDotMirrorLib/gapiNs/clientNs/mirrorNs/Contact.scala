package typings
package gapiDotClientDotMirrorLib.gapiNs.clientNs.mirrorNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait Contact extends js.Object {
  /**
    * A list of voice menu commands that a contact can handle. Glass shows up to three contacts for each voice menu command. If there are more than that, the
    * three contacts with the highest priority are shown for that particular command.
    */
  var acceptCommands: js.UndefOr[js.Array[Command]] = js.undefined
  /**
    * A list of MIME types that a contact supports. The contact will be shown to the user if any of its acceptTypes matches any of the types of the
    * attachments on the item. If no acceptTypes are given, the contact will be shown for all items.
    */
  var acceptTypes: js.UndefOr[js.Array[java.lang.String]] = js.undefined
  /** The name to display for this contact. */
  var displayName: js.UndefOr[java.lang.String] = js.undefined
  /** An ID for this contact. This is generated by the application and is treated as an opaque token. */
  var id: js.UndefOr[java.lang.String] = js.undefined
  /**
    * Set of image URLs to display for a contact. Most contacts will have a single image, but a "group" contact may include up to 8 image URLs and they will
    * be resized and cropped into a mosaic on the client.
    */
  var imageUrls: js.UndefOr[js.Array[java.lang.String]] = js.undefined
  /** The type of resource. This is always mirror#contact. */
  var kind: js.UndefOr[java.lang.String] = js.undefined
  /** Primary phone number for the contact. This can be a fully-qualified number, with country calling code and area code, or a local number. */
  var phoneNumber: js.UndefOr[java.lang.String] = js.undefined
  /** Priority for the contact to determine ordering in a list of contacts. Contacts with higher priorities will be shown before ones with lower priorities. */
  var priority: js.UndefOr[scala.Double] = js.undefined
  /**
    * A list of sharing features that a contact can handle. Allowed values are:
    * - ADD_CAPTION
    */
  var sharingFeatures: js.UndefOr[js.Array[java.lang.String]] = js.undefined
  /** The ID of the application that created this contact. This is populated by the API */
  var source: js.UndefOr[java.lang.String] = js.undefined
  /**
    * Name of this contact as it should be pronounced. If this contact's name must be spoken as part of a voice disambiguation menu, this name is used as the
    * expected pronunciation. This is useful for contact names with unpronounceable characters or whose display spelling is otherwise not phonetic.
    */
  var speakableName: js.UndefOr[java.lang.String] = js.undefined
  /**
    * The type for this contact. This is used for sorting in UIs. Allowed values are:
    * - INDIVIDUAL - Represents a single person. This is the default.
    * - GROUP - Represents more than a single person.
    */
  var `type`: js.UndefOr[java.lang.String] = js.undefined
}

object Contact {
  @scala.inline
  def apply(
    acceptCommands: js.Array[Command] = null,
    acceptTypes: js.Array[java.lang.String] = null,
    displayName: java.lang.String = null,
    id: java.lang.String = null,
    imageUrls: js.Array[java.lang.String] = null,
    kind: java.lang.String = null,
    phoneNumber: java.lang.String = null,
    priority: scala.Int | scala.Double = null,
    sharingFeatures: js.Array[java.lang.String] = null,
    source: java.lang.String = null,
    speakableName: java.lang.String = null,
    `type`: java.lang.String = null
  ): Contact = {
    val __obj = js.Dynamic.literal()
    if (acceptCommands != null) __obj.updateDynamic("acceptCommands")(acceptCommands)
    if (acceptTypes != null) __obj.updateDynamic("acceptTypes")(acceptTypes)
    if (displayName != null) __obj.updateDynamic("displayName")(displayName)
    if (id != null) __obj.updateDynamic("id")(id)
    if (imageUrls != null) __obj.updateDynamic("imageUrls")(imageUrls)
    if (kind != null) __obj.updateDynamic("kind")(kind)
    if (phoneNumber != null) __obj.updateDynamic("phoneNumber")(phoneNumber)
    if (priority != null) __obj.updateDynamic("priority")(priority.asInstanceOf[js.Any])
    if (sharingFeatures != null) __obj.updateDynamic("sharingFeatures")(sharingFeatures)
    if (source != null) __obj.updateDynamic("source")(source)
    if (speakableName != null) __obj.updateDynamic("speakableName")(speakableName)
    if (`type` != null) __obj.updateDynamic("type")(`type`)
    __obj.asInstanceOf[Contact]
  }
}

