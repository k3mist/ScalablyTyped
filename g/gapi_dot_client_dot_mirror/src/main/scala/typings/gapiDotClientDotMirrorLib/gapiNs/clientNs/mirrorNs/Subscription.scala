package typings
package gapiDotClientDotMirrorLib.gapiNs.clientNs.mirrorNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait Subscription extends js.Object {
  /** The URL where notifications should be delivered (must start with https://). */
  var callbackUrl: js.UndefOr[java.lang.String] = js.undefined
  /**
    * The collection to subscribe to. Allowed values are:
    * - timeline - Changes in the timeline including insertion, deletion, and updates.
    * - locations - Location updates.
    * - settings - Settings updates.
    */
  var collection: js.UndefOr[java.lang.String] = js.undefined
  /** The ID of the subscription. */
  var id: js.UndefOr[java.lang.String] = js.undefined
  /** The type of resource. This is always mirror#subscription. */
  var kind: js.UndefOr[java.lang.String] = js.undefined
  /** Container object for notifications. This is not populated in the Subscription resource. */
  var notification: js.UndefOr[Notification] = js.undefined
  /**
    * A list of operations that should be subscribed to. An empty list indicates that all operations on the collection should be subscribed to. Allowed
    * values are:
    * - UPDATE - The item has been updated.
    * - INSERT - A new item has been inserted.
    * - DELETE - The item has been deleted.
    * - MENU_ACTION - A custom menu item has been triggered by the user.
    */
  var operation: js.UndefOr[js.Array[java.lang.String]] = js.undefined
  /** The time at which this subscription was last modified, formatted according to RFC 3339. */
  var updated: js.UndefOr[java.lang.String] = js.undefined
  /** An opaque token sent to the subscriber in notifications so that it can determine the ID of the user. */
  var userToken: js.UndefOr[java.lang.String] = js.undefined
  /** A secret token sent to the subscriber in notifications so that it can verify that the notification was generated by Google. */
  var verifyToken: js.UndefOr[java.lang.String] = js.undefined
}

object Subscription {
  @scala.inline
  def apply(
    callbackUrl: java.lang.String = null,
    collection: java.lang.String = null,
    id: java.lang.String = null,
    kind: java.lang.String = null,
    notification: Notification = null,
    operation: js.Array[java.lang.String] = null,
    updated: java.lang.String = null,
    userToken: java.lang.String = null,
    verifyToken: java.lang.String = null
  ): Subscription = {
    val __obj = js.Dynamic.literal()
    if (callbackUrl != null) __obj.updateDynamic("callbackUrl")(callbackUrl)
    if (collection != null) __obj.updateDynamic("collection")(collection)
    if (id != null) __obj.updateDynamic("id")(id)
    if (kind != null) __obj.updateDynamic("kind")(kind)
    if (notification != null) __obj.updateDynamic("notification")(notification)
    if (operation != null) __obj.updateDynamic("operation")(operation)
    if (updated != null) __obj.updateDynamic("updated")(updated)
    if (userToken != null) __obj.updateDynamic("userToken")(userToken)
    if (verifyToken != null) __obj.updateDynamic("verifyToken")(verifyToken)
    __obj.asInstanceOf[Subscription]
  }
}

