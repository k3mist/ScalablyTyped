package typings
package babelDashTraverseLib.babelDashTraverseMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait Visitor[S] extends VisitNodeObject[Node] {
  var AnyTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.AnyTypeAnnotation]] = js.undefined
  var ArrayExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ArrayExpression]] = js.undefined
  var ArrayPattern: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ArrayPattern]] = js.undefined
  var ArrayTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ArrayTypeAnnotation]] = js.undefined
  var ArrowFunctionExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ArrowFunctionExpression]] = js.undefined
  var AssignmentExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.AssignmentExpression]] = js.undefined
  var AssignmentPattern: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.AssignmentPattern]] = js.undefined
  var AwaitExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.AwaitExpression]] = js.undefined
  var Binary: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Binary]] = js.undefined
  var BinaryExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.BinaryExpression]] = js.undefined
  var BindExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.BindExpression]] = js.undefined
  var Block: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Block]] = js.undefined
  var BlockParent: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.BlockParent]] = js.undefined
  var BlockStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.BlockStatement]] = js.undefined
  var BooleanLiteral: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.BooleanLiteral]] = js.undefined
  var BooleanLiteralTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.BooleanLiteralTypeAnnotation]] = js.undefined
  var BooleanTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.BooleanTypeAnnotation]] = js.undefined
  var BreakStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.BreakStatement]] = js.undefined
  var CallExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.CallExpression]] = js.undefined
  var CatchClause: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.CatchClause]] = js.undefined
  var Class: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Class]] = js.undefined
  var ClassBody: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ClassBody]] = js.undefined
  var ClassDeclaration: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ClassDeclaration]] = js.undefined
  var ClassExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ClassExpression]] = js.undefined
  var ClassImplements: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ClassImplements]] = js.undefined
  var ClassMethod: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ClassMethod]] = js.undefined
  var ClassProperty: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ClassProperty]] = js.undefined
  var CompletionStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.CompletionStatement]] = js.undefined
  var Conditional: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Conditional]] = js.undefined
  var ConditionalExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ConditionalExpression]] = js.undefined
  var ContinueStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ContinueStatement]] = js.undefined
  var DebuggerStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.DebuggerStatement]] = js.undefined
  var Declaration: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Declaration]] = js.undefined
  var DeclareClass: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.DeclareClass]] = js.undefined
  var DeclareFunction: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.DeclareFunction]] = js.undefined
  var DeclareInterface: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.DeclareInterface]] = js.undefined
  var DeclareModule: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.DeclareModule]] = js.undefined
  var DeclareTypeAlias: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.DeclareTypeAlias]] = js.undefined
  var DeclareVariable: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.DeclareVariable]] = js.undefined
  var Decorator: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Decorator]] = js.undefined
  var Directive: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Directive]] = js.undefined
  var DirectiveLiteral: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.DirectiveLiteral]] = js.undefined
  var DoExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.DoExpression]] = js.undefined
  var DoWhileStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.DoWhileStatement]] = js.undefined
  var EmptyStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.EmptyStatement]] = js.undefined
  var ExistentialTypeParam: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExistentialTypeParam]] = js.undefined
  var ExportAllDeclaration: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportAllDeclaration]] = js.undefined
  var ExportDeclaration: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportDeclaration]] = js.undefined
  var ExportDefaultDeclaration: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportDefaultDeclaration]] = js.undefined
  var ExportDefaultSpecifier: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportDefaultSpecifier]] = js.undefined
  var ExportNamedDeclaration: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportNamedDeclaration]] = js.undefined
  var ExportNamespaceSpecifier: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportNamespaceSpecifier]] = js.undefined
  var ExportSpecifier: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportSpecifier]] = js.undefined
  var Expression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Expression]] = js.undefined
  var ExpressionStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExpressionStatement]] = js.undefined
  var ExpressionWrapper: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExpressionWrapper]] = js.undefined
  var File: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.File]] = js.undefined
  var Flow: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Flow]] = js.undefined
  var FlowBaseAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.FlowBaseAnnotation]] = js.undefined
  var FlowDeclaration: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.FlowDeclaration]] = js.undefined
  var For: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.For]] = js.undefined
  var ForInStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ForInStatement]] = js.undefined
  var ForOfStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ForOfStatement]] = js.undefined
  var ForStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ForStatement]] = js.undefined
  var ForXStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ForXStatement]] = js.undefined
  var Function: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Function]] = js.undefined
  var FunctionDeclaration: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.FunctionDeclaration]] = js.undefined
  var FunctionExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.FunctionExpression]] = js.undefined
  var FunctionParent: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.FunctionParent]] = js.undefined
  var FunctionTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.FunctionTypeAnnotation]] = js.undefined
  var FunctionTypeParam: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.FunctionTypeParam]] = js.undefined
  var GenericTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.GenericTypeAnnotation]] = js.undefined
  var Identifier: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Identifier]] = js.undefined
  var IfStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.IfStatement]] = js.undefined
  var Immutable: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Immutable]] = js.undefined
  var ImportDeclaration: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ImportDeclaration]] = js.undefined
  var ImportDefaultSpecifier: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ImportDefaultSpecifier]] = js.undefined
  var ImportNamespaceSpecifier: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ImportNamespaceSpecifier]] = js.undefined
  var ImportSpecifier: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ImportSpecifier]] = js.undefined
  var InterfaceDeclaration: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.InterfaceDeclaration]] = js.undefined
  var InterfaceExtends: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.InterfaceExtends]] = js.undefined
  var IntersectionTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.IntersectionTypeAnnotation]] = js.undefined
  var JSX: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSX]] = js.undefined
  var JSXAttribute: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXAttribute]] = js.undefined
  var JSXClosingElement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXClosingElement]] = js.undefined
  var JSXElement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXElement]] = js.undefined
  var JSXEmptyExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXEmptyExpression]] = js.undefined
  var JSXExpressionContainer: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXExpressionContainer]] = js.undefined
  var JSXIdentifier: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXIdentifier]] = js.undefined
  var JSXMemberExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXMemberExpression]] = js.undefined
  var JSXNamespacedName: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXNamespacedName]] = js.undefined
  var JSXOpeningElement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXOpeningElement]] = js.undefined
  var JSXSpreadAttribute: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXSpreadAttribute]] = js.undefined
  var JSXText: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXText]] = js.undefined
  var LVal: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.LVal]] = js.undefined
  var LabeledStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.LabeledStatement]] = js.undefined
  var Literal: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Literal]] = js.undefined
  var LogicalExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.LogicalExpression]] = js.undefined
  var Loop: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Loop]] = js.undefined
  var MemberExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.MemberExpression]] = js.undefined
  var MetaProperty: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.MetaProperty]] = js.undefined
  var Method: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Method]] = js.undefined
  var MixedTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.MixedTypeAnnotation]] = js.undefined
  var ModuleDeclaration: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ModuleDeclaration]] = js.undefined
  var ModuleSpecifier: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ModuleSpecifier]] = js.undefined
  var NewExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.NewExpression]] = js.undefined
  var Noop: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Noop]] = js.undefined
  var NullLiteral: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.NullLiteral]] = js.undefined
  var NullLiteralTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.NullLiteralTypeAnnotation]] = js.undefined
  var NullableTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.NullableTypeAnnotation]] = js.undefined
  var NumberTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.NumberTypeAnnotation]] = js.undefined
  var NumericLiteral: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.NumericLiteral]] = js.undefined
  var NumericLiteralTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.NumericLiteralTypeAnnotation]] = js.undefined
  var ObjectExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectExpression]] = js.undefined
  var ObjectMember: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectMember]] = js.undefined
  var ObjectMethod: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectMethod]] = js.undefined
  var ObjectPattern: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectPattern]] = js.undefined
  var ObjectProperty: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectProperty]] = js.undefined
  var ObjectTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectTypeAnnotation]] = js.undefined
  var ObjectTypeCallProperty: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectTypeCallProperty]] = js.undefined
  var ObjectTypeIndexer: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectTypeIndexer]] = js.undefined
  var ObjectTypeProperty: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectTypeProperty]] = js.undefined
  var ParenthesizedExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ParenthesizedExpression]] = js.undefined
  var Pattern: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Pattern]] = js.undefined
  var Program: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Program]] = js.undefined
  var Property: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Property]] = js.undefined
  var Pureish: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Pureish]] = js.undefined
  var QualifiedTypeIdentifier: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.QualifiedTypeIdentifier]] = js.undefined
  var RegExpLiteral: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.RegExpLiteral]] = js.undefined
  var RestElement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.RestElement]] = js.undefined
  var RestProperty: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.RestProperty]] = js.undefined
  var ReturnStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ReturnStatement]] = js.undefined
  var Scopable: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Scopable]] = js.undefined
  var Scope: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Scopable]] = js.undefined
  var SequenceExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.SequenceExpression]] = js.undefined
  var SpreadElement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.SpreadElement]] = js.undefined
  var SpreadProperty: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.SpreadProperty]] = js.undefined
  var Statement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Statement]] = js.undefined
  var StringLiteral: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.StringLiteral]] = js.undefined
  var StringLiteralTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.StringLiteralTypeAnnotation]] = js.undefined
  var StringTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.StringTypeAnnotation]] = js.undefined
  var Super: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Super]] = js.undefined
  var SwitchCase: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.SwitchCase]] = js.undefined
  var SwitchStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.SwitchStatement]] = js.undefined
  var TaggedTemplateExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.TaggedTemplateExpression]] = js.undefined
  var TemplateElement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.TemplateElement]] = js.undefined
  var TemplateLiteral: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.TemplateLiteral]] = js.undefined
  var Terminatorless: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.Terminatorless]] = js.undefined
  var ThisExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ThisExpression]] = js.undefined
  var ThisTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ThisTypeAnnotation]] = js.undefined
  var ThrowStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.ThrowStatement]] = js.undefined
  var TryStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.TryStatement]] = js.undefined
  var TupleTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.TupleTypeAnnotation]] = js.undefined
  var TypeAlias: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.TypeAlias]] = js.undefined
  var TypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.TypeAnnotation]] = js.undefined
  var TypeCastExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.TypeCastExpression]] = js.undefined
  var TypeParameterDeclaration: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.TypeParameterDeclaration]] = js.undefined
  var TypeParameterInstantiation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.TypeParameterInstantiation]] = js.undefined
  var TypeofTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.TypeofTypeAnnotation]] = js.undefined
  var UnaryExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.UnaryExpression]] = js.undefined
  var UnaryLike: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.UnaryLike]] = js.undefined
  var UnionTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.UnionTypeAnnotation]] = js.undefined
  var UpdateExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.UpdateExpression]] = js.undefined
  var UserWhitespacable: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.UserWhitespacable]] = js.undefined
  var VariableDeclaration: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.VariableDeclaration]] = js.undefined
  var VariableDeclarator: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.VariableDeclarator]] = js.undefined
  var VoidTypeAnnotation: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.VoidTypeAnnotation]] = js.undefined
  var While: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.While]] = js.undefined
  var WhileStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.WhileStatement]] = js.undefined
  var WithStatement: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.WithStatement]] = js.undefined
  var YieldExpression: js.UndefOr[VisitNode[S, babelDashTypesLib.babelDashTypesMod.YieldExpression]] = js.undefined
}

object Visitor {
  @scala.inline
  def apply[S](
    AnyTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.AnyTypeAnnotation] = null,
    ArrayExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ArrayExpression] = null,
    ArrayPattern: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ArrayPattern] = null,
    ArrayTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ArrayTypeAnnotation] = null,
    ArrowFunctionExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ArrowFunctionExpression] = null,
    AssignmentExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.AssignmentExpression] = null,
    AssignmentPattern: VisitNode[S, babelDashTypesLib.babelDashTypesMod.AssignmentPattern] = null,
    AwaitExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.AwaitExpression] = null,
    Binary: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Binary] = null,
    BinaryExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.BinaryExpression] = null,
    BindExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.BindExpression] = null,
    Block: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Block] = null,
    BlockParent: VisitNode[S, babelDashTypesLib.babelDashTypesMod.BlockParent] = null,
    BlockStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.BlockStatement] = null,
    BooleanLiteral: VisitNode[S, babelDashTypesLib.babelDashTypesMod.BooleanLiteral] = null,
    BooleanLiteralTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.BooleanLiteralTypeAnnotation] = null,
    BooleanTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.BooleanTypeAnnotation] = null,
    BreakStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.BreakStatement] = null,
    CallExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.CallExpression] = null,
    CatchClause: VisitNode[S, babelDashTypesLib.babelDashTypesMod.CatchClause] = null,
    Class: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Class] = null,
    ClassBody: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ClassBody] = null,
    ClassDeclaration: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ClassDeclaration] = null,
    ClassExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ClassExpression] = null,
    ClassImplements: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ClassImplements] = null,
    ClassMethod: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ClassMethod] = null,
    ClassProperty: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ClassProperty] = null,
    CompletionStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.CompletionStatement] = null,
    Conditional: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Conditional] = null,
    ConditionalExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ConditionalExpression] = null,
    ContinueStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ContinueStatement] = null,
    DebuggerStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.DebuggerStatement] = null,
    Declaration: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Declaration] = null,
    DeclareClass: VisitNode[S, babelDashTypesLib.babelDashTypesMod.DeclareClass] = null,
    DeclareFunction: VisitNode[S, babelDashTypesLib.babelDashTypesMod.DeclareFunction] = null,
    DeclareInterface: VisitNode[S, babelDashTypesLib.babelDashTypesMod.DeclareInterface] = null,
    DeclareModule: VisitNode[S, babelDashTypesLib.babelDashTypesMod.DeclareModule] = null,
    DeclareTypeAlias: VisitNode[S, babelDashTypesLib.babelDashTypesMod.DeclareTypeAlias] = null,
    DeclareVariable: VisitNode[S, babelDashTypesLib.babelDashTypesMod.DeclareVariable] = null,
    Decorator: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Decorator] = null,
    Directive: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Directive] = null,
    DirectiveLiteral: VisitNode[S, babelDashTypesLib.babelDashTypesMod.DirectiveLiteral] = null,
    DoExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.DoExpression] = null,
    DoWhileStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.DoWhileStatement] = null,
    EmptyStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.EmptyStatement] = null,
    ExistentialTypeParam: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExistentialTypeParam] = null,
    ExportAllDeclaration: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportAllDeclaration] = null,
    ExportDeclaration: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportDeclaration] = null,
    ExportDefaultDeclaration: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportDefaultDeclaration] = null,
    ExportDefaultSpecifier: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportDefaultSpecifier] = null,
    ExportNamedDeclaration: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportNamedDeclaration] = null,
    ExportNamespaceSpecifier: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportNamespaceSpecifier] = null,
    ExportSpecifier: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExportSpecifier] = null,
    Expression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Expression] = null,
    ExpressionStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExpressionStatement] = null,
    ExpressionWrapper: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ExpressionWrapper] = null,
    File: VisitNode[S, babelDashTypesLib.babelDashTypesMod.File] = null,
    Flow: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Flow] = null,
    FlowBaseAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.FlowBaseAnnotation] = null,
    FlowDeclaration: VisitNode[S, babelDashTypesLib.babelDashTypesMod.FlowDeclaration] = null,
    For: VisitNode[S, babelDashTypesLib.babelDashTypesMod.For] = null,
    ForInStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ForInStatement] = null,
    ForOfStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ForOfStatement] = null,
    ForStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ForStatement] = null,
    ForXStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ForXStatement] = null,
    Function: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Function] = null,
    FunctionDeclaration: VisitNode[S, babelDashTypesLib.babelDashTypesMod.FunctionDeclaration] = null,
    FunctionExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.FunctionExpression] = null,
    FunctionParent: VisitNode[S, babelDashTypesLib.babelDashTypesMod.FunctionParent] = null,
    FunctionTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.FunctionTypeAnnotation] = null,
    FunctionTypeParam: VisitNode[S, babelDashTypesLib.babelDashTypesMod.FunctionTypeParam] = null,
    GenericTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.GenericTypeAnnotation] = null,
    Identifier: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Identifier] = null,
    IfStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.IfStatement] = null,
    Immutable: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Immutable] = null,
    ImportDeclaration: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ImportDeclaration] = null,
    ImportDefaultSpecifier: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ImportDefaultSpecifier] = null,
    ImportNamespaceSpecifier: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ImportNamespaceSpecifier] = null,
    ImportSpecifier: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ImportSpecifier] = null,
    InterfaceDeclaration: VisitNode[S, babelDashTypesLib.babelDashTypesMod.InterfaceDeclaration] = null,
    InterfaceExtends: VisitNode[S, babelDashTypesLib.babelDashTypesMod.InterfaceExtends] = null,
    IntersectionTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.IntersectionTypeAnnotation] = null,
    JSX: VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSX] = null,
    JSXAttribute: VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXAttribute] = null,
    JSXClosingElement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXClosingElement] = null,
    JSXElement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXElement] = null,
    JSXEmptyExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXEmptyExpression] = null,
    JSXExpressionContainer: VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXExpressionContainer] = null,
    JSXIdentifier: VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXIdentifier] = null,
    JSXMemberExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXMemberExpression] = null,
    JSXNamespacedName: VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXNamespacedName] = null,
    JSXOpeningElement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXOpeningElement] = null,
    JSXSpreadAttribute: VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXSpreadAttribute] = null,
    JSXText: VisitNode[S, babelDashTypesLib.babelDashTypesMod.JSXText] = null,
    LVal: VisitNode[S, babelDashTypesLib.babelDashTypesMod.LVal] = null,
    LabeledStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.LabeledStatement] = null,
    Literal: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Literal] = null,
    LogicalExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.LogicalExpression] = null,
    Loop: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Loop] = null,
    MemberExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.MemberExpression] = null,
    MetaProperty: VisitNode[S, babelDashTypesLib.babelDashTypesMod.MetaProperty] = null,
    Method: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Method] = null,
    MixedTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.MixedTypeAnnotation] = null,
    ModuleDeclaration: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ModuleDeclaration] = null,
    ModuleSpecifier: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ModuleSpecifier] = null,
    NewExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.NewExpression] = null,
    Noop: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Noop] = null,
    NullLiteral: VisitNode[S, babelDashTypesLib.babelDashTypesMod.NullLiteral] = null,
    NullLiteralTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.NullLiteralTypeAnnotation] = null,
    NullableTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.NullableTypeAnnotation] = null,
    NumberTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.NumberTypeAnnotation] = null,
    NumericLiteral: VisitNode[S, babelDashTypesLib.babelDashTypesMod.NumericLiteral] = null,
    NumericLiteralTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.NumericLiteralTypeAnnotation] = null,
    ObjectExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectExpression] = null,
    ObjectMember: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectMember] = null,
    ObjectMethod: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectMethod] = null,
    ObjectPattern: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectPattern] = null,
    ObjectProperty: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectProperty] = null,
    ObjectTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectTypeAnnotation] = null,
    ObjectTypeCallProperty: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectTypeCallProperty] = null,
    ObjectTypeIndexer: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectTypeIndexer] = null,
    ObjectTypeProperty: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ObjectTypeProperty] = null,
    ParenthesizedExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ParenthesizedExpression] = null,
    Pattern: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Pattern] = null,
    Program: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Program] = null,
    Property: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Property] = null,
    Pureish: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Pureish] = null,
    QualifiedTypeIdentifier: VisitNode[S, babelDashTypesLib.babelDashTypesMod.QualifiedTypeIdentifier] = null,
    RegExpLiteral: VisitNode[S, babelDashTypesLib.babelDashTypesMod.RegExpLiteral] = null,
    RestElement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.RestElement] = null,
    RestProperty: VisitNode[S, babelDashTypesLib.babelDashTypesMod.RestProperty] = null,
    ReturnStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ReturnStatement] = null,
    Scopable: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Scopable] = null,
    Scope: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Scopable] = null,
    SequenceExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.SequenceExpression] = null,
    SpreadElement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.SpreadElement] = null,
    SpreadProperty: VisitNode[S, babelDashTypesLib.babelDashTypesMod.SpreadProperty] = null,
    Statement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Statement] = null,
    StringLiteral: VisitNode[S, babelDashTypesLib.babelDashTypesMod.StringLiteral] = null,
    StringLiteralTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.StringLiteralTypeAnnotation] = null,
    StringTypeAnnotation: VisitNode[S, babelDashTypesLib.babelDashTypesMod.StringTypeAnnotation] = null,
    Super: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Super] = null,
    SwitchCase: VisitNode[S, babelDashTypesLib.babelDashTypesMod.SwitchCase] = null,
    SwitchStatement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.SwitchStatement] = null,
    TaggedTemplateExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.TaggedTemplateExpression] = null,
    TemplateElement: VisitNode[S, babelDashTypesLib.babelDashTypesMod.TemplateElement] = null,
    TemplateLiteral: VisitNode[S, babelDashTypesLib.babelDashTypesMod.TemplateLiteral] = null,
    Terminatorless: VisitNode[S, babelDashTypesLib.babelDashTypesMod.Terminatorless] = null,
    ThisExpression: VisitNode[S, babelDashTypesLib.babelDashTypesMod.ThisExpression] = null,
    VisitNodeObject: VisitNodeObject[Node] = null
  ): Visitor[S] = {
    val __obj = js.Dynamic.literal()
    if (AnyTypeAnnotation != null) __obj.updateDynamic("AnyTypeAnnotation")(AnyTypeAnnotation.asInstanceOf[js.Any])
    if (ArrayExpression != null) __obj.updateDynamic("ArrayExpression")(ArrayExpression.asInstanceOf[js.Any])
    if (ArrayPattern != null) __obj.updateDynamic("ArrayPattern")(ArrayPattern.asInstanceOf[js.Any])
    if (ArrayTypeAnnotation != null) __obj.updateDynamic("ArrayTypeAnnotation")(ArrayTypeAnnotation.asInstanceOf[js.Any])
    if (ArrowFunctionExpression != null) __obj.updateDynamic("ArrowFunctionExpression")(ArrowFunctionExpression.asInstanceOf[js.Any])
    if (AssignmentExpression != null) __obj.updateDynamic("AssignmentExpression")(AssignmentExpression.asInstanceOf[js.Any])
    if (AssignmentPattern != null) __obj.updateDynamic("AssignmentPattern")(AssignmentPattern.asInstanceOf[js.Any])
    if (AwaitExpression != null) __obj.updateDynamic("AwaitExpression")(AwaitExpression.asInstanceOf[js.Any])
    if (Binary != null) __obj.updateDynamic("Binary")(Binary.asInstanceOf[js.Any])
    if (BinaryExpression != null) __obj.updateDynamic("BinaryExpression")(BinaryExpression.asInstanceOf[js.Any])
    if (BindExpression != null) __obj.updateDynamic("BindExpression")(BindExpression.asInstanceOf[js.Any])
    if (Block != null) __obj.updateDynamic("Block")(Block.asInstanceOf[js.Any])
    if (BlockParent != null) __obj.updateDynamic("BlockParent")(BlockParent.asInstanceOf[js.Any])
    if (BlockStatement != null) __obj.updateDynamic("BlockStatement")(BlockStatement.asInstanceOf[js.Any])
    if (BooleanLiteral != null) __obj.updateDynamic("BooleanLiteral")(BooleanLiteral.asInstanceOf[js.Any])
    if (BooleanLiteralTypeAnnotation != null) __obj.updateDynamic("BooleanLiteralTypeAnnotation")(BooleanLiteralTypeAnnotation.asInstanceOf[js.Any])
    if (BooleanTypeAnnotation != null) __obj.updateDynamic("BooleanTypeAnnotation")(BooleanTypeAnnotation.asInstanceOf[js.Any])
    if (BreakStatement != null) __obj.updateDynamic("BreakStatement")(BreakStatement.asInstanceOf[js.Any])
    if (CallExpression != null) __obj.updateDynamic("CallExpression")(CallExpression.asInstanceOf[js.Any])
    if (CatchClause != null) __obj.updateDynamic("CatchClause")(CatchClause.asInstanceOf[js.Any])
    if (Class != null) __obj.updateDynamic("Class")(Class.asInstanceOf[js.Any])
    if (ClassBody != null) __obj.updateDynamic("ClassBody")(ClassBody.asInstanceOf[js.Any])
    if (ClassDeclaration != null) __obj.updateDynamic("ClassDeclaration")(ClassDeclaration.asInstanceOf[js.Any])
    if (ClassExpression != null) __obj.updateDynamic("ClassExpression")(ClassExpression.asInstanceOf[js.Any])
    if (ClassImplements != null) __obj.updateDynamic("ClassImplements")(ClassImplements.asInstanceOf[js.Any])
    if (ClassMethod != null) __obj.updateDynamic("ClassMethod")(ClassMethod.asInstanceOf[js.Any])
    if (ClassProperty != null) __obj.updateDynamic("ClassProperty")(ClassProperty.asInstanceOf[js.Any])
    if (CompletionStatement != null) __obj.updateDynamic("CompletionStatement")(CompletionStatement.asInstanceOf[js.Any])
    if (Conditional != null) __obj.updateDynamic("Conditional")(Conditional.asInstanceOf[js.Any])
    if (ConditionalExpression != null) __obj.updateDynamic("ConditionalExpression")(ConditionalExpression.asInstanceOf[js.Any])
    if (ContinueStatement != null) __obj.updateDynamic("ContinueStatement")(ContinueStatement.asInstanceOf[js.Any])
    if (DebuggerStatement != null) __obj.updateDynamic("DebuggerStatement")(DebuggerStatement.asInstanceOf[js.Any])
    if (Declaration != null) __obj.updateDynamic("Declaration")(Declaration.asInstanceOf[js.Any])
    if (DeclareClass != null) __obj.updateDynamic("DeclareClass")(DeclareClass.asInstanceOf[js.Any])
    if (DeclareFunction != null) __obj.updateDynamic("DeclareFunction")(DeclareFunction.asInstanceOf[js.Any])
    if (DeclareInterface != null) __obj.updateDynamic("DeclareInterface")(DeclareInterface.asInstanceOf[js.Any])
    if (DeclareModule != null) __obj.updateDynamic("DeclareModule")(DeclareModule.asInstanceOf[js.Any])
    if (DeclareTypeAlias != null) __obj.updateDynamic("DeclareTypeAlias")(DeclareTypeAlias.asInstanceOf[js.Any])
    if (DeclareVariable != null) __obj.updateDynamic("DeclareVariable")(DeclareVariable.asInstanceOf[js.Any])
    if (Decorator != null) __obj.updateDynamic("Decorator")(Decorator.asInstanceOf[js.Any])
    if (Directive != null) __obj.updateDynamic("Directive")(Directive.asInstanceOf[js.Any])
    if (DirectiveLiteral != null) __obj.updateDynamic("DirectiveLiteral")(DirectiveLiteral.asInstanceOf[js.Any])
    if (DoExpression != null) __obj.updateDynamic("DoExpression")(DoExpression.asInstanceOf[js.Any])
    if (DoWhileStatement != null) __obj.updateDynamic("DoWhileStatement")(DoWhileStatement.asInstanceOf[js.Any])
    if (EmptyStatement != null) __obj.updateDynamic("EmptyStatement")(EmptyStatement.asInstanceOf[js.Any])
    if (ExistentialTypeParam != null) __obj.updateDynamic("ExistentialTypeParam")(ExistentialTypeParam.asInstanceOf[js.Any])
    if (ExportAllDeclaration != null) __obj.updateDynamic("ExportAllDeclaration")(ExportAllDeclaration.asInstanceOf[js.Any])
    if (ExportDeclaration != null) __obj.updateDynamic("ExportDeclaration")(ExportDeclaration.asInstanceOf[js.Any])
    if (ExportDefaultDeclaration != null) __obj.updateDynamic("ExportDefaultDeclaration")(ExportDefaultDeclaration.asInstanceOf[js.Any])
    if (ExportDefaultSpecifier != null) __obj.updateDynamic("ExportDefaultSpecifier")(ExportDefaultSpecifier.asInstanceOf[js.Any])
    if (ExportNamedDeclaration != null) __obj.updateDynamic("ExportNamedDeclaration")(ExportNamedDeclaration.asInstanceOf[js.Any])
    if (ExportNamespaceSpecifier != null) __obj.updateDynamic("ExportNamespaceSpecifier")(ExportNamespaceSpecifier.asInstanceOf[js.Any])
    if (ExportSpecifier != null) __obj.updateDynamic("ExportSpecifier")(ExportSpecifier.asInstanceOf[js.Any])
    if (Expression != null) __obj.updateDynamic("Expression")(Expression.asInstanceOf[js.Any])
    if (ExpressionStatement != null) __obj.updateDynamic("ExpressionStatement")(ExpressionStatement.asInstanceOf[js.Any])
    if (ExpressionWrapper != null) __obj.updateDynamic("ExpressionWrapper")(ExpressionWrapper.asInstanceOf[js.Any])
    if (File != null) __obj.updateDynamic("File")(File.asInstanceOf[js.Any])
    if (Flow != null) __obj.updateDynamic("Flow")(Flow.asInstanceOf[js.Any])
    if (FlowBaseAnnotation != null) __obj.updateDynamic("FlowBaseAnnotation")(FlowBaseAnnotation.asInstanceOf[js.Any])
    if (FlowDeclaration != null) __obj.updateDynamic("FlowDeclaration")(FlowDeclaration.asInstanceOf[js.Any])
    if (For != null) __obj.updateDynamic("For")(For.asInstanceOf[js.Any])
    if (ForInStatement != null) __obj.updateDynamic("ForInStatement")(ForInStatement.asInstanceOf[js.Any])
    if (ForOfStatement != null) __obj.updateDynamic("ForOfStatement")(ForOfStatement.asInstanceOf[js.Any])
    if (ForStatement != null) __obj.updateDynamic("ForStatement")(ForStatement.asInstanceOf[js.Any])
    if (ForXStatement != null) __obj.updateDynamic("ForXStatement")(ForXStatement.asInstanceOf[js.Any])
    if (Function != null) __obj.updateDynamic("Function")(Function.asInstanceOf[js.Any])
    if (FunctionDeclaration != null) __obj.updateDynamic("FunctionDeclaration")(FunctionDeclaration.asInstanceOf[js.Any])
    if (FunctionExpression != null) __obj.updateDynamic("FunctionExpression")(FunctionExpression.asInstanceOf[js.Any])
    if (FunctionParent != null) __obj.updateDynamic("FunctionParent")(FunctionParent.asInstanceOf[js.Any])
    if (FunctionTypeAnnotation != null) __obj.updateDynamic("FunctionTypeAnnotation")(FunctionTypeAnnotation.asInstanceOf[js.Any])
    if (FunctionTypeParam != null) __obj.updateDynamic("FunctionTypeParam")(FunctionTypeParam.asInstanceOf[js.Any])
    if (GenericTypeAnnotation != null) __obj.updateDynamic("GenericTypeAnnotation")(GenericTypeAnnotation.asInstanceOf[js.Any])
    if (Identifier != null) __obj.updateDynamic("Identifier")(Identifier.asInstanceOf[js.Any])
    if (IfStatement != null) __obj.updateDynamic("IfStatement")(IfStatement.asInstanceOf[js.Any])
    if (Immutable != null) __obj.updateDynamic("Immutable")(Immutable.asInstanceOf[js.Any])
    if (ImportDeclaration != null) __obj.updateDynamic("ImportDeclaration")(ImportDeclaration.asInstanceOf[js.Any])
    if (ImportDefaultSpecifier != null) __obj.updateDynamic("ImportDefaultSpecifier")(ImportDefaultSpecifier.asInstanceOf[js.Any])
    if (ImportNamespaceSpecifier != null) __obj.updateDynamic("ImportNamespaceSpecifier")(ImportNamespaceSpecifier.asInstanceOf[js.Any])
    if (ImportSpecifier != null) __obj.updateDynamic("ImportSpecifier")(ImportSpecifier.asInstanceOf[js.Any])
    if (InterfaceDeclaration != null) __obj.updateDynamic("InterfaceDeclaration")(InterfaceDeclaration.asInstanceOf[js.Any])
    if (InterfaceExtends != null) __obj.updateDynamic("InterfaceExtends")(InterfaceExtends.asInstanceOf[js.Any])
    if (IntersectionTypeAnnotation != null) __obj.updateDynamic("IntersectionTypeAnnotation")(IntersectionTypeAnnotation.asInstanceOf[js.Any])
    if (JSX != null) __obj.updateDynamic("JSX")(JSX.asInstanceOf[js.Any])
    if (JSXAttribute != null) __obj.updateDynamic("JSXAttribute")(JSXAttribute.asInstanceOf[js.Any])
    if (JSXClosingElement != null) __obj.updateDynamic("JSXClosingElement")(JSXClosingElement.asInstanceOf[js.Any])
    if (JSXElement != null) __obj.updateDynamic("JSXElement")(JSXElement.asInstanceOf[js.Any])
    if (JSXEmptyExpression != null) __obj.updateDynamic("JSXEmptyExpression")(JSXEmptyExpression.asInstanceOf[js.Any])
    if (JSXExpressionContainer != null) __obj.updateDynamic("JSXExpressionContainer")(JSXExpressionContainer.asInstanceOf[js.Any])
    if (JSXIdentifier != null) __obj.updateDynamic("JSXIdentifier")(JSXIdentifier.asInstanceOf[js.Any])
    if (JSXMemberExpression != null) __obj.updateDynamic("JSXMemberExpression")(JSXMemberExpression.asInstanceOf[js.Any])
    if (JSXNamespacedName != null) __obj.updateDynamic("JSXNamespacedName")(JSXNamespacedName.asInstanceOf[js.Any])
    if (JSXOpeningElement != null) __obj.updateDynamic("JSXOpeningElement")(JSXOpeningElement.asInstanceOf[js.Any])
    if (JSXSpreadAttribute != null) __obj.updateDynamic("JSXSpreadAttribute")(JSXSpreadAttribute.asInstanceOf[js.Any])
    if (JSXText != null) __obj.updateDynamic("JSXText")(JSXText.asInstanceOf[js.Any])
    if (LVal != null) __obj.updateDynamic("LVal")(LVal.asInstanceOf[js.Any])
    if (LabeledStatement != null) __obj.updateDynamic("LabeledStatement")(LabeledStatement.asInstanceOf[js.Any])
    if (Literal != null) __obj.updateDynamic("Literal")(Literal.asInstanceOf[js.Any])
    if (LogicalExpression != null) __obj.updateDynamic("LogicalExpression")(LogicalExpression.asInstanceOf[js.Any])
    if (Loop != null) __obj.updateDynamic("Loop")(Loop.asInstanceOf[js.Any])
    if (MemberExpression != null) __obj.updateDynamic("MemberExpression")(MemberExpression.asInstanceOf[js.Any])
    if (MetaProperty != null) __obj.updateDynamic("MetaProperty")(MetaProperty.asInstanceOf[js.Any])
    if (Method != null) __obj.updateDynamic("Method")(Method.asInstanceOf[js.Any])
    if (MixedTypeAnnotation != null) __obj.updateDynamic("MixedTypeAnnotation")(MixedTypeAnnotation.asInstanceOf[js.Any])
    if (ModuleDeclaration != null) __obj.updateDynamic("ModuleDeclaration")(ModuleDeclaration.asInstanceOf[js.Any])
    if (ModuleSpecifier != null) __obj.updateDynamic("ModuleSpecifier")(ModuleSpecifier.asInstanceOf[js.Any])
    if (NewExpression != null) __obj.updateDynamic("NewExpression")(NewExpression.asInstanceOf[js.Any])
    if (Noop != null) __obj.updateDynamic("Noop")(Noop.asInstanceOf[js.Any])
    if (NullLiteral != null) __obj.updateDynamic("NullLiteral")(NullLiteral.asInstanceOf[js.Any])
    if (NullLiteralTypeAnnotation != null) __obj.updateDynamic("NullLiteralTypeAnnotation")(NullLiteralTypeAnnotation.asInstanceOf[js.Any])
    if (NullableTypeAnnotation != null) __obj.updateDynamic("NullableTypeAnnotation")(NullableTypeAnnotation.asInstanceOf[js.Any])
    if (NumberTypeAnnotation != null) __obj.updateDynamic("NumberTypeAnnotation")(NumberTypeAnnotation.asInstanceOf[js.Any])
    if (NumericLiteral != null) __obj.updateDynamic("NumericLiteral")(NumericLiteral.asInstanceOf[js.Any])
    if (NumericLiteralTypeAnnotation != null) __obj.updateDynamic("NumericLiteralTypeAnnotation")(NumericLiteralTypeAnnotation.asInstanceOf[js.Any])
    if (ObjectExpression != null) __obj.updateDynamic("ObjectExpression")(ObjectExpression.asInstanceOf[js.Any])
    if (ObjectMember != null) __obj.updateDynamic("ObjectMember")(ObjectMember.asInstanceOf[js.Any])
    if (ObjectMethod != null) __obj.updateDynamic("ObjectMethod")(ObjectMethod.asInstanceOf[js.Any])
    if (ObjectPattern != null) __obj.updateDynamic("ObjectPattern")(ObjectPattern.asInstanceOf[js.Any])
    if (ObjectProperty != null) __obj.updateDynamic("ObjectProperty")(ObjectProperty.asInstanceOf[js.Any])
    if (ObjectTypeAnnotation != null) __obj.updateDynamic("ObjectTypeAnnotation")(ObjectTypeAnnotation.asInstanceOf[js.Any])
    if (ObjectTypeCallProperty != null) __obj.updateDynamic("ObjectTypeCallProperty")(ObjectTypeCallProperty.asInstanceOf[js.Any])
    if (ObjectTypeIndexer != null) __obj.updateDynamic("ObjectTypeIndexer")(ObjectTypeIndexer.asInstanceOf[js.Any])
    if (ObjectTypeProperty != null) __obj.updateDynamic("ObjectTypeProperty")(ObjectTypeProperty.asInstanceOf[js.Any])
    if (ParenthesizedExpression != null) __obj.updateDynamic("ParenthesizedExpression")(ParenthesizedExpression.asInstanceOf[js.Any])
    if (Pattern != null) __obj.updateDynamic("Pattern")(Pattern.asInstanceOf[js.Any])
    if (Program != null) __obj.updateDynamic("Program")(Program.asInstanceOf[js.Any])
    if (Property != null) __obj.updateDynamic("Property")(Property.asInstanceOf[js.Any])
    if (Pureish != null) __obj.updateDynamic("Pureish")(Pureish.asInstanceOf[js.Any])
    if (QualifiedTypeIdentifier != null) __obj.updateDynamic("QualifiedTypeIdentifier")(QualifiedTypeIdentifier.asInstanceOf[js.Any])
    if (RegExpLiteral != null) __obj.updateDynamic("RegExpLiteral")(RegExpLiteral.asInstanceOf[js.Any])
    if (RestElement != null) __obj.updateDynamic("RestElement")(RestElement.asInstanceOf[js.Any])
    if (RestProperty != null) __obj.updateDynamic("RestProperty")(RestProperty.asInstanceOf[js.Any])
    if (ReturnStatement != null) __obj.updateDynamic("ReturnStatement")(ReturnStatement.asInstanceOf[js.Any])
    if (Scopable != null) __obj.updateDynamic("Scopable")(Scopable.asInstanceOf[js.Any])
    if (Scope != null) __obj.updateDynamic("Scope")(Scope.asInstanceOf[js.Any])
    if (SequenceExpression != null) __obj.updateDynamic("SequenceExpression")(SequenceExpression.asInstanceOf[js.Any])
    if (SpreadElement != null) __obj.updateDynamic("SpreadElement")(SpreadElement.asInstanceOf[js.Any])
    if (SpreadProperty != null) __obj.updateDynamic("SpreadProperty")(SpreadProperty.asInstanceOf[js.Any])
    if (Statement != null) __obj.updateDynamic("Statement")(Statement.asInstanceOf[js.Any])
    if (StringLiteral != null) __obj.updateDynamic("StringLiteral")(StringLiteral.asInstanceOf[js.Any])
    if (StringLiteralTypeAnnotation != null) __obj.updateDynamic("StringLiteralTypeAnnotation")(StringLiteralTypeAnnotation.asInstanceOf[js.Any])
    if (StringTypeAnnotation != null) __obj.updateDynamic("StringTypeAnnotation")(StringTypeAnnotation.asInstanceOf[js.Any])
    if (Super != null) __obj.updateDynamic("Super")(Super.asInstanceOf[js.Any])
    if (SwitchCase != null) __obj.updateDynamic("SwitchCase")(SwitchCase.asInstanceOf[js.Any])
    if (SwitchStatement != null) __obj.updateDynamic("SwitchStatement")(SwitchStatement.asInstanceOf[js.Any])
    if (TaggedTemplateExpression != null) __obj.updateDynamic("TaggedTemplateExpression")(TaggedTemplateExpression.asInstanceOf[js.Any])
    if (TemplateElement != null) __obj.updateDynamic("TemplateElement")(TemplateElement.asInstanceOf[js.Any])
    if (TemplateLiteral != null) __obj.updateDynamic("TemplateLiteral")(TemplateLiteral.asInstanceOf[js.Any])
    if (Terminatorless != null) __obj.updateDynamic("Terminatorless")(Terminatorless.asInstanceOf[js.Any])
    if (ThisExpression != null) __obj.updateDynamic("ThisExpression")(ThisExpression.asInstanceOf[js.Any])
    js.Dynamic.global.Object.assign(__obj, VisitNodeObject)
    __obj.asInstanceOf[Visitor[S]]
  }
}

